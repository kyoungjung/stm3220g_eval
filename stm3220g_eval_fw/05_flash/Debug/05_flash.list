
05_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f424  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800f5b0  0800f5b0  0001f5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd5c  0800fd5c  000203e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd5c  0800fd5c  0001fd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd64  0800fd64  000203e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd64  0800fd64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd68  0800fd68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0800fd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001894  200003e0  0801014c  000203e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  0801014c  00021c74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e23  00000000  00000000  00020409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a9  00000000  00000000  0003422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  000384d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00039748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a53  00000000  00000000  0003a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d682  00000000  00000000  00060213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c079f  00000000  00000000  0007d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006008  00000000  00000000  0013e084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003e0 	.word	0x200003e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f594 	.word	0x0800f594

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003e4 	.word	0x200003e4
 80001c4:	0800f594 	.word	0x0800f594

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__gesf2>:
 8000bf4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bf8:	e006      	b.n	8000c08 <__cmpsf2+0x4>
 8000bfa:	bf00      	nop

08000bfc <__lesf2>:
 8000bfc:	f04f 0c01 	mov.w	ip, #1
 8000c00:	e002      	b.n	8000c08 <__cmpsf2+0x4>
 8000c02:	bf00      	nop

08000c04 <__cmpsf2>:
 8000c04:	f04f 0c01 	mov.w	ip, #1
 8000c08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d011      	beq.n	8000c44 <__cmpsf2+0x40>
 8000c20:	b001      	add	sp, #4
 8000c22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c26:	bf18      	it	ne
 8000c28:	ea90 0f01 	teqne	r0, r1
 8000c2c:	bf58      	it	pl
 8000c2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c32:	bf88      	it	hi
 8000c34:	17c8      	asrhi	r0, r1, #31
 8000c36:	bf38      	it	cc
 8000c38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c3c:	bf18      	it	ne
 8000c3e:	f040 0001 	orrne.w	r0, r0, #1
 8000c42:	4770      	bx	lr
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	d102      	bne.n	8000c50 <__cmpsf2+0x4c>
 8000c4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c4e:	d105      	bne.n	8000c5c <__cmpsf2+0x58>
 8000c50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c54:	d1e4      	bne.n	8000c20 <__cmpsf2+0x1c>
 8000c56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c5a:	d0e1      	beq.n	8000c20 <__cmpsf2+0x1c>
 8000c5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__aeabi_cfrcmple>:
 8000c64:	4684      	mov	ip, r0
 8000c66:	4608      	mov	r0, r1
 8000c68:	4661      	mov	r1, ip
 8000c6a:	e7ff      	b.n	8000c6c <__aeabi_cfcmpeq>

08000c6c <__aeabi_cfcmpeq>:
 8000c6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c6e:	f7ff ffc9 	bl	8000c04 <__cmpsf2>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	bf48      	it	mi
 8000c76:	f110 0f00 	cmnmi.w	r0, #0
 8000c7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c7c <__aeabi_fcmpeq>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff fff4 	bl	8000c6c <__aeabi_cfcmpeq>
 8000c84:	bf0c      	ite	eq
 8000c86:	2001      	moveq	r0, #1
 8000c88:	2000      	movne	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fcmplt>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffea 	bl	8000c6c <__aeabi_cfcmpeq>
 8000c98:	bf34      	ite	cc
 8000c9a:	2001      	movcc	r0, #1
 8000c9c:	2000      	movcs	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmple>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffe0 	bl	8000c6c <__aeabi_cfcmpeq>
 8000cac:	bf94      	ite	ls
 8000cae:	2001      	movls	r0, #1
 8000cb0:	2000      	movhi	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fcmpge>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff ffd2 	bl	8000c64 <__aeabi_cfrcmple>
 8000cc0:	bf94      	ite	ls
 8000cc2:	2001      	movls	r0, #1
 8000cc4:	2000      	movhi	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmpgt>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffc8 	bl	8000c64 <__aeabi_cfrcmple>
 8000cd4:	bf34      	ite	cc
 8000cd6:	2001      	movcc	r0, #1
 8000cd8:	2000      	movcs	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmpun>:
 8000ce0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cec:	d102      	bne.n	8000cf4 <__aeabi_fcmpun+0x14>
 8000cee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fcmpun+0x26>
 8000cf4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__aeabi_fcmpun+0x20>
 8000cfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cfe:	d102      	bne.n	8000d06 <__aeabi_fcmpun+0x26>
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	f04f 0001 	mov.w	r0, #1
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_uldivmod>:
 8000d0c:	b953      	cbnz	r3, 8000d24 <__aeabi_uldivmod+0x18>
 8000d0e:	b94a      	cbnz	r2, 8000d24 <__aeabi_uldivmod+0x18>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	bf08      	it	eq
 8000d14:	2800      	cmpeq	r0, #0
 8000d16:	bf1c      	itt	ne
 8000d18:	f04f 31ff 	movne.w	r1, #4294967295
 8000d1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d20:	f000 b9ae 	b.w	8001080 <__aeabi_idiv0>
 8000d24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d2c:	f000 f83e 	bl	8000dac <__udivmoddi4>
 8000d30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d38:	b004      	add	sp, #16
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_d2lz>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	4605      	mov	r5, r0
 8000d40:	460c      	mov	r4, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	2300      	movs	r3, #0
 8000d46:	4628      	mov	r0, r5
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f7ff fe7d 	bl	8000a48 <__aeabi_dcmplt>
 8000d4e:	b928      	cbnz	r0, 8000d5c <__aeabi_d2lz+0x20>
 8000d50:	4628      	mov	r0, r5
 8000d52:	4621      	mov	r1, r4
 8000d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d58:	f000 b80a 	b.w	8000d70 <__aeabi_d2ulz>
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d62:	f000 f805 	bl	8000d70 <__aeabi_d2ulz>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
 8000d6e:	bf00      	nop

08000d70 <__aeabi_d2ulz>:
 8000d70:	b5d0      	push	{r4, r6, r7, lr}
 8000d72:	2200      	movs	r2, #0
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <__aeabi_d2ulz+0x34>)
 8000d76:	4606      	mov	r6, r0
 8000d78:	460f      	mov	r7, r1
 8000d7a:	f7ff fbf3 	bl	8000564 <__aeabi_dmul>
 8000d7e:	f7ff fec9 	bl	8000b14 <__aeabi_d2uiz>
 8000d82:	4604      	mov	r4, r0
 8000d84:	f7ff fb74 	bl	8000470 <__aeabi_ui2d>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <__aeabi_d2ulz+0x38>)
 8000d8c:	f7ff fbea 	bl	8000564 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4630      	mov	r0, r6
 8000d96:	4639      	mov	r1, r7
 8000d98:	f7ff fa2c 	bl	80001f4 <__aeabi_dsub>
 8000d9c:	f7ff feba 	bl	8000b14 <__aeabi_d2uiz>
 8000da0:	4621      	mov	r1, r4
 8000da2:	bdd0      	pop	{r4, r6, r7, pc}
 8000da4:	3df00000 	.word	0x3df00000
 8000da8:	41f00000 	.word	0x41f00000

08000dac <__udivmoddi4>:
 8000dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	9e08      	ldr	r6, [sp, #32]
 8000db2:	460d      	mov	r5, r1
 8000db4:	4604      	mov	r4, r0
 8000db6:	4688      	mov	r8, r1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d14d      	bne.n	8000e58 <__udivmoddi4+0xac>
 8000dbc:	428a      	cmp	r2, r1
 8000dbe:	4694      	mov	ip, r2
 8000dc0:	d968      	bls.n	8000e94 <__udivmoddi4+0xe8>
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	b152      	cbz	r2, 8000dde <__udivmoddi4+0x32>
 8000dc8:	fa01 f302 	lsl.w	r3, r1, r2
 8000dcc:	f1c2 0120 	rsb	r1, r2, #32
 8000dd0:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	ea41 0803 	orr.w	r8, r1, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000de2:	fbb8 f7f1 	udiv	r7, r8, r1
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	fb01 8817 	mls	r8, r1, r7, r8
 8000dee:	fb07 f00e 	mul.w	r0, r7, lr
 8000df2:	0c23      	lsrs	r3, r4, #16
 8000df4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	d90a      	bls.n	8000e12 <__udivmoddi4+0x66>
 8000dfc:	eb1c 0303 	adds.w	r3, ip, r3
 8000e00:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e04:	f080 811e 	bcs.w	8001044 <__udivmoddi4+0x298>
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	f240 811b 	bls.w	8001044 <__udivmoddi4+0x298>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4463      	add	r3, ip
 8000e12:	1a1b      	subs	r3, r3, r0
 8000e14:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e18:	fb01 3310 	mls	r3, r1, r0, r3
 8000e1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x94>
 8000e2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	f080 8109 	bcs.w	8001048 <__udivmoddi4+0x29c>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f240 8106 	bls.w	8001048 <__udivmoddi4+0x29c>
 8000e3c:	4464      	add	r4, ip
 8000e3e:	3802      	subs	r0, #2
 8000e40:	2100      	movs	r1, #0
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e4a:	b11e      	cbz	r6, 8000e54 <__udivmoddi4+0xa8>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	40d4      	lsrs	r4, r2
 8000e50:	e9c6 4300 	strd	r4, r3, [r6]
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0xc2>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	f000 80ee 	beq.w	800103e <__udivmoddi4+0x292>
 8000e62:	2100      	movs	r1, #0
 8000e64:	e9c6 0500 	strd	r0, r5, [r6]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	fab3 f183 	clz	r1, r3
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d14a      	bne.n	8000f0c <__udivmoddi4+0x160>
 8000e76:	42ab      	cmp	r3, r5
 8000e78:	d302      	bcc.n	8000e80 <__udivmoddi4+0xd4>
 8000e7a:	4282      	cmp	r2, r0
 8000e7c:	f200 80fc 	bhi.w	8001078 <__udivmoddi4+0x2cc>
 8000e80:	1a84      	subs	r4, r0, r2
 8000e82:	eb65 0303 	sbc.w	r3, r5, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	4698      	mov	r8, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d0e2      	beq.n	8000e54 <__udivmoddi4+0xa8>
 8000e8e:	e9c6 4800 	strd	r4, r8, [r6]
 8000e92:	e7df      	b.n	8000e54 <__udivmoddi4+0xa8>
 8000e94:	b902      	cbnz	r2, 8000e98 <__udivmoddi4+0xec>
 8000e96:	deff      	udf	#255	; 0xff
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	f040 8091 	bne.w	8000fc4 <__udivmoddi4+0x218>
 8000ea2:	eba1 000c 	sub.w	r0, r1, ip
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb4:	fb07 0013 	mls	r0, r7, r3, r0
 8000eb8:	0c25      	lsrs	r5, r4, #16
 8000eba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ebe:	fb0e f003 	mul.w	r0, lr, r3
 8000ec2:	42a8      	cmp	r0, r5
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x12c>
 8000ec6:	eb1c 0505 	adds.w	r5, ip, r5
 8000eca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0x12a>
 8000ed0:	42a8      	cmp	r0, r5
 8000ed2:	f200 80ce 	bhi.w	8001072 <__udivmoddi4+0x2c6>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	1a2d      	subs	r5, r5, r0
 8000eda:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ede:	fb07 5510 	mls	r5, r7, r0, r5
 8000ee2:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x156>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ef8:	d202      	bcs.n	8000f00 <__udivmoddi4+0x154>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f200 80b6 	bhi.w	800106c <__udivmoddi4+0x2c0>
 8000f00:	4628      	mov	r0, r5
 8000f02:	eba4 040e 	sub.w	r4, r4, lr
 8000f06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f0a:	e79e      	b.n	8000e4a <__udivmoddi4+0x9e>
 8000f0c:	f1c1 0720 	rsb	r7, r1, #32
 8000f10:	408b      	lsls	r3, r1
 8000f12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f1a:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fbba f8f9 	udiv	r8, sl, r9
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f2e:	408d      	lsls	r5, r1
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	431d      	orrs	r5, r3
 8000f36:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3a:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3e:	0c2c      	lsrs	r4, r5, #16
 8000f40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f44:	42a0      	cmp	r0, r4
 8000f46:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4a:	d90b      	bls.n	8000f64 <__udivmoddi4+0x1b8>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f54:	f080 8088 	bcs.w	8001068 <__udivmoddi4+0x2bc>
 8000f58:	42a0      	cmp	r0, r4
 8000f5a:	f240 8085 	bls.w	8001068 <__udivmoddi4+0x2bc>
 8000f5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f62:	4464      	add	r4, ip
 8000f64:	1a24      	subs	r4, r4, r0
 8000f66:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f6a:	fb09 4410 	mls	r4, r9, r0, r4
 8000f6e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f72:	b2ad      	uxth	r5, r5
 8000f74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x1e2>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f84:	d26c      	bcs.n	8001060 <__udivmoddi4+0x2b4>
 8000f86:	45a6      	cmp	lr, r4
 8000f88:	d96a      	bls.n	8001060 <__udivmoddi4+0x2b4>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f92:	fba0 9502 	umull	r9, r5, r0, r2
 8000f96:	eba4 040e 	sub.w	r4, r4, lr
 8000f9a:	42ac      	cmp	r4, r5
 8000f9c:	46c8      	mov	r8, r9
 8000f9e:	46ae      	mov	lr, r5
 8000fa0:	d356      	bcc.n	8001050 <__udivmoddi4+0x2a4>
 8000fa2:	d053      	beq.n	800104c <__udivmoddi4+0x2a0>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d069      	beq.n	800107c <__udivmoddi4+0x2d0>
 8000fa8:	ebb3 0208 	subs.w	r2, r3, r8
 8000fac:	eb64 040e 	sbc.w	r4, r4, lr
 8000fb0:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb4:	fa04 f707 	lsl.w	r7, r4, r7
 8000fb8:	431f      	orrs	r7, r3
 8000fba:	40cc      	lsrs	r4, r1
 8000fbc:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0xa8>
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	f1c2 0120 	rsb	r1, r2, #32
 8000fcc:	fa25 f301 	lsr.w	r3, r5, r1
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd8:	4095      	lsls	r5, r2
 8000fda:	430d      	orrs	r5, r1
 8000fdc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fe0:	fb07 3311 	mls	r3, r7, r1, r3
 8000fe4:	fa1f fe8c 	uxth.w	lr, ip
 8000fe8:	0c28      	lsrs	r0, r5, #16
 8000fea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fee:	fb01 f30e 	mul.w	r3, r1, lr
 8000ff2:	4283      	cmp	r3, r0
 8000ff4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff8:	d908      	bls.n	800100c <__udivmoddi4+0x260>
 8000ffa:	eb1c 0000 	adds.w	r0, ip, r0
 8000ffe:	f101 38ff 	add.w	r8, r1, #4294967295
 8001002:	d22f      	bcs.n	8001064 <__udivmoddi4+0x2b8>
 8001004:	4283      	cmp	r3, r0
 8001006:	d92d      	bls.n	8001064 <__udivmoddi4+0x2b8>
 8001008:	3902      	subs	r1, #2
 800100a:	4460      	add	r0, ip
 800100c:	1ac0      	subs	r0, r0, r3
 800100e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001012:	fb07 0013 	mls	r0, r7, r3, r0
 8001016:	b2ad      	uxth	r5, r5
 8001018:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800101c:	fb03 f00e 	mul.w	r0, r3, lr
 8001020:	42a8      	cmp	r0, r5
 8001022:	d908      	bls.n	8001036 <__udivmoddi4+0x28a>
 8001024:	eb1c 0505 	adds.w	r5, ip, r5
 8001028:	f103 38ff 	add.w	r8, r3, #4294967295
 800102c:	d216      	bcs.n	800105c <__udivmoddi4+0x2b0>
 800102e:	42a8      	cmp	r0, r5
 8001030:	d914      	bls.n	800105c <__udivmoddi4+0x2b0>
 8001032:	3b02      	subs	r3, #2
 8001034:	4465      	add	r5, ip
 8001036:	1a28      	subs	r0, r5, r0
 8001038:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800103c:	e738      	b.n	8000eb0 <__udivmoddi4+0x104>
 800103e:	4631      	mov	r1, r6
 8001040:	4630      	mov	r0, r6
 8001042:	e707      	b.n	8000e54 <__udivmoddi4+0xa8>
 8001044:	462f      	mov	r7, r5
 8001046:	e6e4      	b.n	8000e12 <__udivmoddi4+0x66>
 8001048:	4618      	mov	r0, r3
 800104a:	e6f9      	b.n	8000e40 <__udivmoddi4+0x94>
 800104c:	454b      	cmp	r3, r9
 800104e:	d2a9      	bcs.n	8000fa4 <__udivmoddi4+0x1f8>
 8001050:	ebb9 0802 	subs.w	r8, r9, r2
 8001054:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001058:	3801      	subs	r0, #1
 800105a:	e7a3      	b.n	8000fa4 <__udivmoddi4+0x1f8>
 800105c:	4643      	mov	r3, r8
 800105e:	e7ea      	b.n	8001036 <__udivmoddi4+0x28a>
 8001060:	4628      	mov	r0, r5
 8001062:	e794      	b.n	8000f8e <__udivmoddi4+0x1e2>
 8001064:	4641      	mov	r1, r8
 8001066:	e7d1      	b.n	800100c <__udivmoddi4+0x260>
 8001068:	46d0      	mov	r8, sl
 800106a:	e77b      	b.n	8000f64 <__udivmoddi4+0x1b8>
 800106c:	4464      	add	r4, ip
 800106e:	3802      	subs	r0, #2
 8001070:	e747      	b.n	8000f02 <__udivmoddi4+0x156>
 8001072:	3b02      	subs	r3, #2
 8001074:	4465      	add	r5, ip
 8001076:	e72f      	b.n	8000ed8 <__udivmoddi4+0x12c>
 8001078:	4608      	mov	r0, r1
 800107a:	e706      	b.n	8000e8a <__udivmoddi4+0xde>
 800107c:	4631      	mov	r1, r6
 800107e:	e6e9      	b.n	8000e54 <__udivmoddi4+0xa8>

08001080 <__aeabi_idiv0>:
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <apInit>:


#include "ap.h"

void apInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8001088:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800108c:	2000      	movs	r0, #0
 800108e:	f001 fd4b 	bl	8002b28 <uartOpen>
  uartOpen(_DEF_UART2, 115200);
 8001092:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001096:	2001      	movs	r0, #1
 8001098:	f001 fd46 	bl	8002b28 <uartOpen>

  cliOpen(_DEF_UART1, 115200);
 800109c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fb15 	bl	80016d0 <cliOpen>
  cliOpenLog(_DEF_UART2, 115200);
 80010a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fb2e 	bl	800170c <cliOpenLog>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <apMain>:

void apMain(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 80010ba:	f000 f897 	bl	80011ec <millis>
 80010be:	6078      	str	r0, [r7, #4]
  //초기에 설정된 baud 값을 저장한다.

  while(1)
  {
    if(millis() - pre_time >= 500)
 80010c0:	f000 f894 	bl	80011ec <millis>
 80010c4:	4602      	mov	r2, r0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ce:	d305      	bcc.n	80010dc <apMain+0x28>
    {
      pre_time = millis();
 80010d0:	f000 f88c 	bl	80011ec <millis>
 80010d4:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fc9e 	bl	8002a18 <ledToggle>

      //logPrintf("print test : %d\r\n", millis());
    }

    cliMain();
 80010dc:	f000 fbd0 	bl	8001880 <cliMain>
    if(millis() - pre_time >= 500)
 80010e0:	e7ee      	b.n	80010c0 <apMain+0xc>
	...

080010e4 <bspInit>:

void SystemClock_Config(void);
void Error_Handler(void);

void bspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80010ea:	f001 ff45 	bl	8002f78 <HAL_Init>
  SystemClock_Config();
 80010ee:	f000 f884 	bl	80011fa <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  //LED사용 Port Clock Enable
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <bspInit+0xcc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <bspInit+0xcc>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <bspInit+0xcc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <bspInit+0xcc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <bspInit+0xcc>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <bspInit+0xcc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <bspInit+0xcc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <bspInit+0xcc>)
 8001144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <bspInit+0xcc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
   * 다시 USB_DP핀을 입력으로 설정 해준다.
   * ==> 위와 같이 동작 시키면 PC에서 USB를 다시 인식할려는 동작을 수행한다.
   */

  //
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800115c:	2311      	movs	r3, #17
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <bspInit+0xd0>)
 8001170:	f003 f80a 	bl	8004188 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <bspInit+0xd0>)
 800117c:	f003 faa0 	bl	80046c0 <HAL_GPIO_WritePin>
  delay(300);
 8001180:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001184:	f000 f818 	bl	80011b8 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <bspInit+0xd0>)
 8001190:	f003 fa96 	bl	80046c0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <bspInit+0xd0>)
 80011a0:	f002 fff2 	bl	8004188 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80011a4:	f008 fe18 	bl	8009dd8 <MX_USB_DEVICE_Init>
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <delay>:

void delay(uint32_t ms)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 ff47 	bl	8003054 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <__io_putchar>:

int __io_putchar(int ch)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t*)&ch, 1);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	2000      	movs	r0, #0
 80011de:	f001 fd9b 	bl	8002d18 <uartWrite>
  return 1;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <millis>:

uint32_t millis(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80011f0:	f001 ff26 	bl	8003040 <HAL_GetTick>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}

080011fa <SystemClock_Config>:


void SystemClock_Config(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b092      	sub	sp, #72	; 0x48
 80011fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2230      	movs	r2, #48	; 0x30
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f009 fc57 	bl	800aabc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 800122e:	2314      	movs	r3, #20
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800123a:	2305      	movs	r3, #5
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fbc2 	bl	80059cc <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800124e:	f000 f81a 	bl	8001286 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2103      	movs	r1, #3
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fdfa 	bl	8005e68 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800127a:	f000 f804 	bl	8001286 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3748      	adds	r7, #72	; 0x48
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <Error_Handler>:

void Error_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128a:	b672      	cpsid	i
}
 800128c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128e:	e7fe      	b.n	800128e <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x48>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_MspInit+0x48>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_MspInit+0x48>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_MspInit+0x48>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_MspInit+0x48>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_MspInit+0x48>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f001 fe7b 	bl	800301c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA1_Stream1_IRQHandler+0x10>)
 8001332:	f002 f9e9 	bl	8003708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000090c 	.word	0x2000090c

08001340 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <USART3_IRQHandler+0x10>)
 8001346:	f005 f8cd 	bl	80064e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200008c8 	.word	0x200008c8

08001354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <OTG_FS_IRQHandler+0x10>)
 800135a:	f003 fb21 	bl	80049a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20001864 	.word	0x20001864

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <_kill>:

int _kill(int pid, int sig)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001380:	f009 fb62 	bl	800aa48 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	2216      	movs	r2, #22
 8001388:	601a      	str	r2, [r3, #0]
  return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_exit>:

void _exit (int status)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800139e:	f04f 31ff 	mov.w	r1, #4294967295
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffe7 	bl	8001376 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a8:	e7fe      	b.n	80013a8 <_exit+0x12>

080013aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e00a      	b.n	80013d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013bc:	f3af 8000 	nop.w
 80013c0:	4601      	mov	r1, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbf0      	blt.n	80013bc <_read+0x12>
  }

  return len;
 80013da:	687b      	ldr	r3, [r7, #4]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e009      	b.n	800140a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60ba      	str	r2, [r7, #8]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fee5 	bl	80011ce <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbf1      	blt.n	80013f6 <_write+0x12>
  }
  return len;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_close>:

int _close(int file)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f009 facc 	bl	800aa48 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20020000 	.word	0x20020000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	200003fc 	.word	0x200003fc
 80014e4:	20001c78 	.word	0x20001c78

080014e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800151e:	f7ff ffe3 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f009 fa97 	bl	800aa54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f009 fa83 	bl	800aa30 <main>
  bx  lr
 800152a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 8001538:	0800fd6c 	.word	0x0800fd6c
  ldr r2, =_sbss
 800153c:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8001540:	20001c74 	.word	0x20001c74

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>

08001546 <qbufferCreate>:
void qbufferInit(void)
{

}
bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001546:	b480      	push	{r7}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
  p_node->in  = 0;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	60da      	str	r2, [r3, #12]

  return ret;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <qbufferRead>:
  }
  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800157a:	b480      	push	{r7}
 800157c:	b087      	sub	sp, #28
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]

  for(int i=0;i<length;i++)
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e026      	b.n	80015de <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	441a      	add	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	440b      	add	r3, r1
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in) //버퍼에서 꺼낼 데이터가 있다면
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d00c      	beq.n	80015d2 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;  //out 인덱스 1증가시킨다.
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3301      	adds	r3, #1
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	6892      	ldr	r2, [r2, #8]
 80015c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80015c6:	fb01 f202 	mul.w	r2, r1, r2
 80015ca:	1a9a      	subs	r2, r3, r2
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	e002      	b.n	80015d8 <qbufferRead+0x5e>
    }
    else  //버퍼에서 꺼낼 데이터가 없다면
    {
      ret = false;  //에러
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
      break;        //for문 빠져나온다.
 80015d6:	e006      	b.n	80015e6 <qbufferRead+0x6c>
  for(int i=0;i<length;i++)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	3301      	adds	r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d8d4      	bhi.n	8001590 <qbufferRead+0x16>
    }
  }

  return ret;
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6892      	ldr	r2, [r2, #8]
 8001608:	fbb3 f1f2 	udiv	r1, r3, r2
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  return ret;
 8001614:	68fb      	ldr	r3, [r7, #12]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <cdcInit>:

#include "cdc.h"


bool cdcInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
  bool ret = true;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]



  return ret;
 800162a:	79fb      	ldrb	r3, [r7, #7]
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <cliInit+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <cliInit+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <cliInit+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <cliInit+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <cliInit+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <cliInit+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <cliInit+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <cliInit+0x74>)
 8001670:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <cliInit+0x78>)
 8001672:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <cliInit+0x74>)
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <cliInit+0x7c>)
 800167a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <cliInit+0x74>)
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <cliInit+0x80>)
 8001682:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <cliInit+0x74>)
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <cliInit+0x84>)
 800168a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <cliInit+0x74>)
 8001690:	f000 fb88 	bl	8001da4 <cliLineClean>


  cliAdd("help", cliShowList);
 8001694:	490a      	ldr	r1, [pc, #40]	; (80016c0 <cliInit+0x88>)
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <cliInit+0x8c>)
 8001698:	f000 fe38 	bl	800230c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800169c:	490a      	ldr	r1, [pc, #40]	; (80016c8 <cliInit+0x90>)
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <cliInit+0x94>)
 80016a0:	f000 fe34 	bl	800230c <cliAdd>

  return true;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000400 	.word	0x20000400
 80016b0:	080021a9 	.word	0x080021a9
 80016b4:	080021f9 	.word	0x080021f9
 80016b8:	08002249 	.word	0x08002249
 80016bc:	0800228d 	.word	0x0800228d
 80016c0:	080023a1 	.word	0x080023a1
 80016c4:	0800f5b0 	.word	0x0800f5b0
 80016c8:	08002411 	.word	0x08002411
 80016cc:	0800f5b8 	.word	0x0800f5b8

080016d0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <cliOpen+0x38>)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <cliOpen+0x38>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fa1b 	bl	8002b28 <uartOpen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <cliOpen+0x38>)
 80016f8:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <cliOpen+0x38>)
 80016fc:	7a1b      	ldrb	r3, [r3, #8]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000400 	.word	0x20000400

0800170c <cliOpenLog>:

bool cliOpenLog(uint8_t ch, uint32_t baud)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  bool ret;

  cli_node.log_ch = ch;
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <cliOpenLog+0x3c>)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	7293      	strb	r3, [r2, #10]
  cli_node.log_baud = baud;
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <cliOpenLog+0x3c>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	60d3      	str	r3, [r2, #12]

  ret = uartOpen(ch, baud);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f001 f9fd 	bl	8002b28 <uartOpen>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]

  if (ret == true)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <cliOpenLog+0x32>
  {
    cli_node.is_log = true;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <cliOpenLog+0x3c>)
 800173a:	2201      	movs	r2, #1
 800173c:	725a      	strb	r2, [r3, #9]
  }
  return ret;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000400 	.word	0x20000400

0800174c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <cliShowLog+0xdc>)
 8001756:	7a5b      	ldrb	r3, [r3, #9]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d061      	beq.n	8001820 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7a98      	ldrb	r0, [r3, #10]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001766:	461a      	mov	r2, r3
 8001768:	4930      	ldr	r1, [pc, #192]	; (800182c <cliShowLog+0xe0>)
 800176a:	f001 fb01 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a98      	ldrb	r0, [r3, #10]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001778:	461a      	mov	r2, r3
 800177a:	492d      	ldr	r1, [pc, #180]	; (8001830 <cliShowLog+0xe4>)
 800177c:	f001 faf8 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7a98      	ldrb	r0, [r3, #10]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800178a:	461a      	mov	r2, r3
 800178c:	4929      	ldr	r1, [pc, #164]	; (8001834 <cliShowLog+0xe8>)
 800178e:	f001 faef 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7a98      	ldrb	r0, [r3, #10]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800179c:	461a      	mov	r2, r3
 800179e:	4926      	ldr	r1, [pc, #152]	; (8001838 <cliShowLog+0xec>)
 80017a0:	f001 fae6 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7a98      	ldrb	r0, [r3, #10]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80017ae:	461a      	mov	r2, r3
 80017b0:	4922      	ldr	r1, [pc, #136]	; (800183c <cliShowLog+0xf0>)
 80017b2:	f001 fadd 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a98      	ldrb	r0, [r3, #10]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80017c0:	461a      	mov	r2, r3
 80017c2:	491f      	ldr	r1, [pc, #124]	; (8001840 <cliShowLog+0xf4>)
 80017c4:	f001 fad4 	bl	8002d70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7a98      	ldrb	r0, [r3, #10]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80017d2:	461a      	mov	r2, r3
 80017d4:	491b      	ldr	r1, [pc, #108]	; (8001844 <cliShowLog+0xf8>)
 80017d6:	f001 facb 	bl	8002d70 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e012      	b.n	8001806 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a98      	ldrb	r0, [r3, #10]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00da      	lsls	r2, r3, #3
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4913      	ldr	r1, [pc, #76]	; (8001848 <cliShowLog+0xfc>)
 80017fc:	f001 fab8 	bl	8002d70 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800180c:	461a      	mov	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4293      	cmp	r3, r2
 8001812:	dbe5      	blt.n	80017e0 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7a9b      	ldrb	r3, [r3, #10]
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <cliShowLog+0x100>)
 800181a:	4618      	mov	r0, r3
 800181c:	f001 faa8 	bl	8002d70 <uartPrintf>
  }
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000400 	.word	0x20000400
 800182c:	0800f5bc 	.word	0x0800f5bc
 8001830:	0800f5cc 	.word	0x0800f5cc
 8001834:	0800f5dc 	.word	0x0800f5dc
 8001838:	0800f5ec 	.word	0x0800f5ec
 800183c:	0800f5fc 	.word	0x0800f5fc
 8001840:	0800f60c 	.word	0x0800f60c
 8001844:	0800f61c 	.word	0x0800f61c
 8001848:	0800f62c 	.word	0x0800f62c
 800184c:	0800f63c 	.word	0x0800f63c

08001850 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <cliShowPrompt+0x28>)
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fa86 	bl	8002d70 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <cliShowPrompt+0x2c>)
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fa80 	bl	8002d70 <uartPrintf>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800f640 	.word	0x0800f640
 800187c:	0800f644 	.word	0x0800f644

08001880 <cliMain>:

bool cliMain(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <cliMain+0x3c>)
 8001886:	7a1b      	ldrb	r3, [r3, #8]
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <cliMain+0x16>
  {
    return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e00f      	b.n	80018b6 <cliMain+0x36>
  }

  if (cliAvailable() > 0)
 8001896:	f000 f813 	bl	80018c0 <cliAvailable>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <cliMain+0x34>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <cliMain+0x3c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fa13 	bl	8002cd0 <uartRead>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <cliMain+0x3c>)
 80018b0:	f000 f812 	bl	80018d8 <cliUpdate>
  }

  return true;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000400 	.word	0x20000400

080018c0 <cliAvailable>:

uint32_t cliAvailable(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <cliAvailable+0x14>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 f9cf 	bl	8002c6c <uartAvailable>
 80018ce:	4603      	mov	r3, r0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000400 	.word	0x20000400

080018d8 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80018f0:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7c1b      	ldrb	r3, [r3, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8168 	bne.w	8001bcc <cliUpdate+0x2f4>
  {
    switch(rx_data)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001900:	d02a      	beq.n	8001958 <cliUpdate+0x80>
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	f300 80da 	bgt.w	8001abc <cliUpdate+0x1e4>
 8001908:	2b1b      	cmp	r3, #27
 800190a:	d021      	beq.n	8001950 <cliUpdate+0x78>
 800190c:	2b1b      	cmp	r3, #27
 800190e:	f300 80d5 	bgt.w	8001abc <cliUpdate+0x1e4>
 8001912:	2b08      	cmp	r3, #8
 8001914:	d062      	beq.n	80019dc <cliUpdate+0x104>
 8001916:	2b0d      	cmp	r3, #13
 8001918:	f040 80d0 	bne.w	8001abc <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fa55 	bl	8001dd6 <cliLineAdd>
          cliRunCmd(p_cli);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fb41 	bl	8001fb4 <cliRunCmd>
        }

        line->count = 0;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff81 	bl	8001850 <cliShowPrompt>
        break;
 800194e:	e144      	b.n	8001bda <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	741a      	strb	r2, [r3, #16]
        break;
 8001956:	e140      	b.n	8001bda <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001964:	429a      	cmp	r2, r3
 8001966:	f080 8133 	bcs.w	8001bd0 <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800197a:	2301      	movs	r3, #1
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197e:	e013      	b.n	80019a8 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001986:	461a      	mov	r2, r3
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	441a      	add	r2, r3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001992:	4619      	mov	r1, r3
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	440b      	add	r3, r1
 8001998:	3b01      	subs	r3, #1
 800199a:	69f9      	ldr	r1, [r7, #28]
 800199c:	5c89      	ldrb	r1, [r1, r2]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	3301      	adds	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a8:	7efb      	ldrb	r3, [r7, #27]
 80019aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbe7      	blt.n	8001980 <cliUpdate+0xa8>
          }

          line->count--;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019c6:	461a      	mov	r2, r3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	498e      	ldr	r1, [pc, #568]	; (8001c0c <cliUpdate+0x334>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 f9cb 	bl	8002d70 <uartPrintf>
        }
        break;
 80019da:	e0f9      	b.n	8001bd0 <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d055      	beq.n	8001a92 <cliUpdate+0x1ba>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d050      	beq.n	8001a92 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10e      	bne.n	8001a1e <cliUpdate+0x146>
          {
            line->count--;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a16:	461a      	mov	r2, r3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d231      	bcs.n	8001a92 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a42:	e013      	b.n	8001a6c <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	441a      	add	r2, r3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a56:	4619      	mov	r1, r3
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	69f9      	ldr	r1, [r7, #28]
 8001a60:	5c89      	ldrb	r1, [r1, r2]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	3301      	adds	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6c:	7ebb      	ldrb	r3, [r7, #26]
 8001a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbe7      	blt.n	8001a44 <cliUpdate+0x16c>
            }

            line->count--;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 809b 	beq.w	8001bd4 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4957      	ldr	r1, [pc, #348]	; (8001c10 <cliUpdate+0x338>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 f95b 	bl	8002d70 <uartPrintf>
        }
        break;
 8001aba:	e08b      	b.n	8001bd4 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f280 8084 	bge.w	8001bd8 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d124      	bne.n	8001b2a <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	1cf9      	adds	r1, r7, #3
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 f915 	bl	8002d18 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af4:	461a      	mov	r2, r3
 8001af6:	78f9      	ldrb	r1, [r7, #3]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b22:	461a      	mov	r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d24e      	bcs.n	8001bd8 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	e013      	b.n	8001b78 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b64:	4619      	mov	r1, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1acb      	subs	r3, r1, r3
 8001b6a:	69f9      	ldr	r1, [r7, #28]
 8001b6c:	5c89      	ldrb	r1, [r1, r2]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	7e7b      	ldrb	r3, [r7, #25]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbe7      	blt.n	8001b50 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b86:	461a      	mov	r2, r3
 8001b88:	78f9      	ldrb	r1, [r7, #3]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	4914      	ldr	r1, [pc, #80]	; (8001c14 <cliUpdate+0x33c>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 f8d3 	bl	8002d70 <uartPrintf>
          }
        }
        break;
 8001bca:	e005      	b.n	8001bd8 <cliUpdate+0x300>
    }
  }
 8001bcc:	bf00      	nop
 8001bce:	e004      	b.n	8001bda <cliUpdate+0x302>
        break;
 8001bd0:	bf00      	nop
 8001bd2:	e002      	b.n	8001bda <cliUpdate+0x302>
        break;
 8001bd4:	bf00      	nop
 8001bd6:	e000      	b.n	8001bda <cliUpdate+0x302>
        break;
 8001bd8:	bf00      	nop

  switch(p_cli->state)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7c1b      	ldrb	r3, [r3, #16]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	f200 80d2 	bhi.w	8001d8a <cliUpdate+0x4b2>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <cliUpdate+0x314>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001c05 	.word	0x08001c05
 8001bf4:	08001c19 	.word	0x08001c19
 8001bf8:	08001d81 	.word	0x08001d81
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	741a      	strb	r2, [r3, #16]
      break;
 8001c02:	e0c2      	b.n	8001d8a <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	741a      	strb	r2, [r3, #16]
      break;
 8001c0a:	e0be      	b.n	8001d8a <cliUpdate+0x4b2>
 8001c0c:	0800f64c 	.word	0x0800f64c
 8001c10:	0800f654 	.word	0x0800f654
 8001c14:	0800f65c 	.word	0x0800f65c

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	2b44      	cmp	r3, #68	; 0x44
 8001c22:	d11a      	bne.n	8001c5a <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d015      	beq.n	8001c5a <cliUpdate+0x382>
        {
          line->cursor--;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8001c3e:	231b      	movs	r3, #27
 8001c40:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001c42:	235b      	movs	r3, #91	; 0x5b
 8001c44:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f107 010c 	add.w	r1, r7, #12
 8001c52:	2203      	movs	r2, #3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 f85f 	bl	8002d18 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b43      	cmp	r3, #67	; 0x43
 8001c5e:	d11d      	bne.n	8001c9c <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d215      	bcs.n	8001c9c <cliUpdate+0x3c4>
        {
          line->cursor++;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          tx_buf[0] = 0x1B;
 8001c80:	231b      	movs	r3, #27
 8001c82:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001c84:	235b      	movs	r3, #91	; 0x5b
 8001c86:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f107 010c 	add.w	r1, r7, #12
 8001c94:	2203      	movs	r2, #3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 f83e 	bl	8002d18 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b41      	cmp	r3, #65	; 0x41
 8001ca0:	d10c      	bne.n	8001cbc <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8eb 	bl	8001e80 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f001 f85a 	bl	8002d70 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b42      	cmp	r3, #66	; 0x42
 8001cc0:	d10c      	bne.n	8001cdc <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8db 	bl	8001e80 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f001 f84a 	bl	8002d70 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	2b31      	cmp	r3, #49	; 0x31
 8001ce0:	d10f      	bne.n	8001d02 <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7818      	ldrb	r0, [r3, #0]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cec:	461a      	mov	r2, r3
 8001cee:	492b      	ldr	r1, [pc, #172]	; (8001d9c <cliUpdate+0x4c4>)
 8001cf0:	f001 f83e 	bl	8002d70 <uartPrintf>
        line->cursor = 0;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b34      	cmp	r3, #52	; 0x34
 8001d06:	d13f      	bne.n	8001d88 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d210      	bcs.n	8001d3a <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	8afa      	ldrh	r2, [r7, #22]
 8001d32:	491b      	ldr	r1, [pc, #108]	; (8001da0 <cliUpdate+0x4c8>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f81b 	bl	8002d70 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	8afa      	ldrh	r2, [r7, #22]
 8001d64:	490d      	ldr	r1, [pc, #52]	; (8001d9c <cliUpdate+0x4c4>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 f802 	bl	8002d70 <uartPrintf>
        }
        line->cursor = line->count;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001d7e:	e003      	b.n	8001d88 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	741a      	strb	r2, [r3, #16]
      break;
 8001d86:	e000      	b.n	8001d8a <cliUpdate+0x4b2>
      break;
 8001d88:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fcde 	bl	800174c <cliShowLog>

  return ret;
 8001d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3730      	adds	r7, #48	; 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	0800f668 	.word	0x0800f668
 8001da0:	0800f670 	.word	0x0800f670

08001da4 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	221f      	movs	r2, #31
 8001dc0:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001de4:	461a      	mov	r2, r3
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00da      	lsls	r2, r3, #3
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	188b      	adds	r3, r1, r2
 8001df4:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8001dfe:	4694      	mov	ip, r2
 8001e00:	f104 0e20 	add.w	lr, r4, #32
 8001e04:	4665      	mov	r5, ip
 8001e06:	4626      	mov	r6, r4
 8001e08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e0a:	6028      	str	r0, [r5, #0]
 8001e0c:	6069      	str	r1, [r5, #4]
 8001e0e:	60aa      	str	r2, [r5, #8]
 8001e10:	60eb      	str	r3, [r5, #12]
 8001e12:	3410      	adds	r4, #16
 8001e14:	f10c 0c10 	add.w	ip, ip, #16
 8001e18:	4574      	cmp	r4, lr
 8001e1a:	d1f3      	bne.n	8001e04 <cliLineAdd+0x2e>
 8001e1c:	4663      	mov	r3, ip
 8001e1e:	4622      	mov	r2, r4
 8001e20:	8811      	ldrh	r1, [r2, #0]
 8001e22:	7892      	ldrb	r2, [r2, #2]
 8001e24:	8019      	strh	r1, [r3, #0]
 8001e26:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d807      	bhi.n	8001e42 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001e48:	b25a      	sxtb	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001e56:	3301      	adds	r3, #1
 8001e58:	425a      	negs	r2, r3
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	bf58      	it	pl
 8001e64:	4253      	negpl	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e80 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8086 	beq.w	8001fa4 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7818      	ldrb	r0, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001eac:	461a      	mov	r2, r3
 8001eae:	493f      	ldr	r1, [pc, #252]	; (8001fac <cliLineChange+0x12c>)
 8001eb0:	f000 ff5e 	bl	8002d70 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4939      	ldr	r1, [pc, #228]	; (8001fb0 <cliLineChange+0x130>)
 8001ecc:	f000 ff50 	bl	8002d70 <uartPrintf>
  }


  if (key_up == true)
 8001ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d125      	bne.n	8001f24 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001efe:	4413      	add	r3, r2
 8001f00:	3b01      	subs	r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001f08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e013      	b.n	8001f4c <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001f32:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f36:	fb01 f202 	mul.w	r2, r1, r2
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001f4a:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00da      	lsls	r2, r3, #3
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	1883      	adds	r3, r0, r2
 8001f5e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001f62:	461c      	mov	r4, r3
 8001f64:	f501 7609 	add.w	r6, r1, #548	; 0x224
 8001f68:	f104 0c20 	add.w	ip, r4, #32
 8001f6c:	4635      	mov	r5, r6
 8001f6e:	4623      	mov	r3, r4
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	3410      	adds	r4, #16
 8001f7c:	3610      	adds	r6, #16
 8001f7e:	4564      	cmp	r4, ip
 8001f80:	d1f4      	bne.n	8001f6c <cliLineChange+0xec>
 8001f82:	4633      	mov	r3, r6
 8001f84:	4622      	mov	r2, r4
 8001f86:	8811      	ldrh	r1, [r2, #0]
 8001f88:	7892      	ldrb	r2, [r2, #2]
 8001f8a:	8019      	strh	r1, [r3, #0]
 8001f8c:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001fa2:	e000      	b.n	8001fa6 <cliLineChange+0x126>
    return;
 8001fa4:	bf00      	nop
}
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	0800f668 	.word	0x0800f668
 8001fb0:	0800f678 	.word	0x0800f678

08001fb4 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f851 	bl	8002068 <cliParseArgs>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d046      	beq.n	800205a <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001fcc:	4825      	ldr	r0, [pc, #148]	; (8002064 <cliRunCmd+0xb0>)
 8001fce:	f000 f893 	bl	80020f8 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f8b1 	bl	8002140 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e033      	b.n	800204c <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe f8e2 	bl	80001c8 <strcmp>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11d      	bne.n	8002046 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8002040:	4610      	mov	r0, r2
 8002042:	4798      	blx	r3
        break;
 8002044:	e009      	b.n	800205a <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3301      	adds	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4293      	cmp	r3, r2
 8002058:	dbc4      	blt.n	8001fe4 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800205a:	7afb      	ldrb	r3, [r7, #11]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	0800f680 	.word	0x0800f680

08002068 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002086:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800208e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002090:	8afb      	ldrh	r3, [r7, #22]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <cliParseArgs+0x8c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	4619      	mov	r1, r3
 80020a6:	6938      	ldr	r0, [r7, #16]
 80020a8:	f00a fb22 	bl	800c6f0 <strtok_r>
 80020ac:	61b8      	str	r0, [r7, #24]
 80020ae:	e010      	b.n	80020d2 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80020b0:	8afb      	ldrh	r3, [r7, #22]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	82fa      	strh	r2, [r7, #22]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <cliParseArgs+0x8c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	4619      	mov	r1, r3
 80020ca:	2000      	movs	r0, #0
 80020cc:	f00a fb10 	bl	800c6f0 <strtok_r>
 80020d0:	61b8      	str	r0, [r7, #24]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1eb      	bne.n	80020b0 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8afa      	ldrh	r2, [r7, #22]
 80020dc:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80020e0:	8afb      	ldrh	r3, [r7, #22]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <cliParseArgs+0x82>
  {
    ret = true;
 80020e6:	2301      	movs	r3, #1
 80020e8:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000004 	.word	0x20000004

080020f8 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80020f8:	b40f      	push	{r0, r1, r2, r3}
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <cliPrintf+0x44>)
 8002108:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f103 0011 	add.w	r0, r3, #17
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002118:	f00a fc14 	bl	800c944 <vsniprintf>
 800211c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	7818      	ldrb	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3311      	adds	r3, #17
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4619      	mov	r1, r3
 800212a:	f000 fdf5 	bl	8002d18 <uartWrite>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002138:	b004      	add	sp, #16
 800213a:	4770      	bx	lr
 800213c:	20000400 	.word	0x20000400

08002140 <cliToUpper>:

void cliToUpper(char *str)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	81fb      	strh	r3, [r7, #14]
 800214c:	e018      	b.n	8002180 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002158:	7b7b      	ldrb	r3, [r7, #13]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	2b60      	cmp	r3, #96	; 0x60
 8002162:	d905      	bls.n	8002170 <cliToUpper+0x30>
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	2b7a      	cmp	r3, #122	; 0x7a
 8002168:	d802      	bhi.n	8002170 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800216a:	7b7b      	ldrb	r3, [r7, #13]
 800216c:	3b20      	subs	r3, #32
 800216e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	7b7a      	ldrb	r2, [r7, #13]
 8002178:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	3301      	adds	r3, #1
 800217e:	81fb      	strh	r3, [r7, #14]
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	d9e3      	bls.n	800214e <cliToUpper+0xe>
 8002186:	e000      	b.n	800218a <cliToUpper+0x4a>
      break;
 8002188:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	2b10      	cmp	r3, #16
 800218e:	d105      	bne.n	800219c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	3b01      	subs	r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
  }
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <cliArgsGetData+0x4c>)
 80021b8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d301      	bcc.n	80021cc <cliArgsGetData+0x24>
  {
    return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e00e      	b.n	80021ea <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f00a fb7a 	bl	800c8d8 <strtoul>
 80021e4:	4603      	mov	r3, r0
 80021e6:	60fb      	str	r3, [r7, #12]

  return ret;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000400 	.word	0x20000400

080021f8 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <cliArgsGetFloat+0x4c>)
 800220a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	b29a      	uxth	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <cliArgsGetFloat+0x28>
  {
    return 0;
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e00c      	b.n	800223a <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f00a f9e3 	bl	800c5fc <strtof>
 8002236:	60f8      	str	r0, [r7, #12]

  return ret;
 8002238:	68fb      	ldr	r3, [r7, #12]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000400 	.word	0x20000400

08002248 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <cliArgsGetStr+0x40>)
 8002258:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	b29a      	uxth	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8002264:	429a      	cmp	r2, r3
 8002266:	d301      	bcc.n	800226c <cliArgsGetStr+0x24>
  {
    return 0;
 8002268:	2300      	movs	r3, #0
 800226a:	e008      	b.n	800227e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  return ret;
 800227c:	68fb      	ldr	r3, [r7, #12]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000400 	.word	0x20000400

0800228c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <cliArgsIsStr+0x50>)
 800229e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d301      	bcc.n	80022b2 <cliArgsIsStr+0x26>
  {
    return 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e010      	b.n	80022d4 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f7fd ff80 	bl	80001c8 <strcmp>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <cliArgsIsStr+0x46>
  {
    ret = true;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000400 	.word	0x20000400

080022e0 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <cliKeepLoop+0x28>)
 80022e8:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fcbc 	bl	8002c6c <uartAvailable>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <cliKeepLoop+0x1e>
  {
    return true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80022fe:	2300      	movs	r3, #0
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000400 	.word	0x20000400

0800230c <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <cliAdd+0x90>)
 800231c:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d901      	bls.n	800232c <cliAdd+0x20>
  {
    return false;
 8002328:	2300      	movs	r3, #0
 800232a:	e032      	b.n	8002392 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8002332:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002334:	89fa      	ldrh	r2, [r7, #14]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	f009 fb3c 	bl	800b9c8 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002350:	89fa      	ldrh	r2, [r7, #14]
 8002352:	6939      	ldr	r1, [r7, #16]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002366:	89fa      	ldrh	r2, [r7, #14]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fee0 	bl	8002140 <cliToUpper>

  p_cli->cmd_count++;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8002386:	3301      	adds	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 8002390:	7dfb      	ldrb	r3, [r7, #23]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000400 	.word	0x20000400

080023a0 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <cliShowList+0x60>)
 80023aa:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80023ac:	4815      	ldr	r0, [pc, #84]	; (8002404 <cliShowList+0x64>)
 80023ae:	f7ff fea3 	bl	80020f8 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80023b2:	4815      	ldr	r0, [pc, #84]	; (8002408 <cliShowList+0x68>)
 80023b4:	f7ff fea0 	bl	80020f8 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e012      	b.n	80023e4 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe90 	bl	80020f8 <cliPrintf>
    cliPrintf("\r\n");
 80023d8:	480a      	ldr	r0, [pc, #40]	; (8002404 <cliShowList+0x64>)
 80023da:	f7ff fe8d 	bl	80020f8 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dbe5      	blt.n	80023be <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <cliShowList+0x6c>)
 80023f4:	f7ff fe80 	bl	80020f8 <cliPrintf>
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000400 	.word	0x20000400
 8002404:	0800f680 	.word	0x0800f680
 8002408:	0800f684 	.word	0x0800f684
 800240c:	0800f6a4 	.word	0x0800f6a4

08002410 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002418:	2310      	movs	r3, #16
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002430:	4840      	ldr	r0, [pc, #256]	; (8002534 <cliMemoryDump+0x124>)
 8002432:	f7ff fe61 	bl	80020f8 <cliPrintf>
 8002436:	e07a      	b.n	800252e <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	dd09      	ble.n	8002452 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	3304      	adds	r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f00a fa45 	bl	800c8d8 <strtoul>
 800244e:	4603      	mov	r3, r0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00a fa3c 	bl	800c8d8 <strtoul>
 8002460:	4603      	mov	r3, r0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002468:	4833      	ldr	r0, [pc, #204]	; (8002538 <cliMemoryDump+0x128>)
 800246a:	f7ff fe45 	bl	80020f8 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	e058      	b.n	8002526 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	482e      	ldr	r0, [pc, #184]	; (800253c <cliMemoryDump+0x12c>)
 8002484:	f7ff fe38 	bl	80020f8 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	482c      	ldr	r0, [pc, #176]	; (8002540 <cliMemoryDump+0x130>)
 8002490:	f7ff fe32 	bl	80020f8 <cliPrintf>

    if ((idx%4) == 3)
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	425a      	negs	r2, r3
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	bf58      	it	pl
 80024a2:	4253      	negpl	r3, r2
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d138      	bne.n	800251a <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80024a8:	4826      	ldr	r0, [pc, #152]	; (8002544 <cliMemoryDump+0x134>)
 80024aa:	f7ff fe25 	bl	80020f8 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	e02c      	b.n	800250e <cliMemoryDump+0xfe>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80024b8:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e01d      	b.n	80024fc <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80024c0:	f107 020c 	add.w	r2, r7, #12
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b1f      	cmp	r3, #31
 80024cc:	d910      	bls.n	80024f0 <cliMemoryDump+0xe0>
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b7e      	cmp	r3, #126	; 0x7e
 80024da:	d809      	bhi.n	80024f0 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4817      	ldr	r0, [pc, #92]	; (8002548 <cliMemoryDump+0x138>)
 80024ea:	f7ff fe05 	bl	80020f8 <cliPrintf>
 80024ee:	e002      	b.n	80024f6 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80024f0:	4816      	ldr	r0, [pc, #88]	; (800254c <cliMemoryDump+0x13c>)
 80024f2:	f7ff fe01 	bl	80020f8 <cliPrintf>
        for (i=0;i<4;i++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	ddde      	ble.n	80024c0 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3304      	adds	r3, #4
 8002506:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	3301      	adds	r3, #1
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b03      	cmp	r3, #3
 8002512:	ddcf      	ble.n	80024b4 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002514:	480e      	ldr	r0, [pc, #56]	; (8002550 <cliMemoryDump+0x140>)
 8002516:	f7ff fdef 	bl	80020f8 <cliPrintf>
    }
    addr++;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3304      	adds	r3, #4
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	3301      	adds	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	429a      	cmp	r2, r3
 800252c:	dba2      	blt.n	8002474 <cliMemoryDump+0x64>
  }
}
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	0800f6c4 	.word	0x0800f6c4
 8002538:	0800f6d8 	.word	0x0800f6d8
 800253c:	0800f6e0 	.word	0x0800f6e0
 8002540:	0800f6ec 	.word	0x0800f6ec
 8002544:	0800f6f4 	.word	0x0800f6f4
 8002548:	0800f6f8 	.word	0x0800f6f8
 800254c:	0800f6fc 	.word	0x0800f6fc
 8002550:	0800f700 	.word	0x0800f700

08002554 <flashInSector>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8002554:	b480      	push	{r7}
 8002556:	b08b      	sub	sp, #44	; 0x2c
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start  = flash_tbl[sector_num].addr;
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	4a25      	ldr	r2, [pc, #148]	; (8002600 <flashInSector+0xac>)
 800256c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002570:	623b      	str	r3, [r7, #32]
  sector_end    = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <flashInSector+0xac>)
 8002576:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	4920      	ldr	r1, [pc, #128]	; (8002600 <flashInSector+0xac>)
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3b01      	subs	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
  flash_start   = addr;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61bb      	str	r3, [r7, #24]
  flash_end     = flash_start + length - 1;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	3b01      	subs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]

  if(sector_start >= flash_start && sector_start <= flash_end)
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	429a      	cmp	r2, r3
 800259e:	d306      	bcc.n	80025ae <flashInSector+0x5a>
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d802      	bhi.n	80025ae <flashInSector+0x5a>
  {
    ret = true;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(sector_end >= flash_start && sector_end <= flash_end)
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d306      	bcc.n	80025c4 <flashInSector+0x70>
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d802      	bhi.n	80025c4 <flashInSector+0x70>
  {
    ret = true;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_start >= sector_start && flash_start <= sector_end)
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d306      	bcc.n	80025da <flashInSector+0x86>
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d802      	bhi.n	80025da <flashInSector+0x86>
  {
    ret = true;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_end >= sector_start && flash_end <= sector_end)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d306      	bcc.n	80025f0 <flashInSector+0x9c>
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d802      	bhi.n	80025f0 <flashInSector+0x9c>
  {
    ret = true;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	372c      	adds	r7, #44	; 0x2c
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000008 	.word	0x20000008

08002604 <flashInit>:

bool flashInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  bool ret = true;
 800260a:	2301      	movs	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
  cliAdd("Flash", cliFlash);
 800260e:	4904      	ldr	r1, [pc, #16]	; (8002620 <flashInit+0x1c>)
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <flashInit+0x20>)
 8002612:	f7ff fe7b 	bl	800230c <cliAdd>
#endif

  return ret;
 8002616:	79fb      	ldrb	r3, [r7, #7]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	08002735 	.word	0x08002735
 8002624:	0800f710 	.word	0x0800f710

08002628 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef       status;
  FLASH_EraseInitTypeDef  init;
  uint32_t SectorError;

  int16_t start_sector_num = -1;
 8002638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0;i<FLASH_SECTOR_MAX;i++)
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e015      	b.n	8002674 <flashErase+0x4c>
  {
    //지우고자 하는 플래시 영역에 섹터가 포함되는지?
    if(flashInSector(i, addr, length) == true)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	b29b      	uxth	r3, r3
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff7f 	bl	8002554 <flashInSector>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <flashErase+0x46>
    {
      //지우고자 하는 플래시 영역에 포함되는 첫번째 섹터 번호만 식별한다.
      if(start_sector_num < 0)
 800265c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	da01      	bge.n	8002668 <flashErase+0x40>
      {
        start_sector_num = i;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      //지우고자 하는 플래시 영역에 포함되는 섹터 갯수를 카운팅 한다.
      sector_count++;
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	3301      	adds	r3, #1
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0;i<FLASH_SECTOR_MAX;i++)
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	2b0b      	cmp	r3, #11
 8002678:	dde6      	ble.n	8002648 <flashErase+0x20>
    }
  }

  //지우고자 하는 플래시 영역에 포함되는 섹터가 존재한다면?
  if(sector_count > 0)
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <flashErase+0x9a>
  {
    //flash unlock 을 한다.
    HAL_FLASH_Unlock();
 8002680:	f001 fafc 	bl	8003c7c <HAL_FLASH_Unlock>

    init.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
    init.Banks        = FLASH_BANK_1;
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
    init.Sector       = start_sector_num;
 800268c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002690:	617b      	str	r3, [r7, #20]
    init.NbSectors    = sector_count;
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002696:	2302      	movs	r3, #2
 8002698:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &SectorError);
 800269a:	f107 0208 	add.w	r2, r7, #8
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fc47 	bl	8003f38 <HAL_FLASHEx_Erase>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if(status == HAL_OK)
 80026b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <flashErase+0x96>
    {
      ret = true;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    //flash lock 을 한다.
    HAL_FLASH_Lock();
 80026be:	f001 faff 	bl	8003cc0 <HAL_FLASH_Lock>
  }
  return ret;
 80026c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80026ce:	b5b0      	push	{r4, r5, r7, lr}
 80026d0:	b088      	sub	sp, #32
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80026da:	2301      	movs	r3, #1
 80026dc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  //flash unlock 을 한다.
  HAL_FLASH_Unlock();
 80026de:	f001 facd 	bl	8003c7c <HAL_FLASH_Unlock>

  for(int i=0;i<length;i+=1)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e019      	b.n	800271c <flashWrite+0x4e>
  {
    uint16_t data;
    //data = p_data[i+0] << 0;
    data = p_data[0] << 0;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	82fb      	strh	r3, [r7, #22]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	18d1      	adds	r1, r2, r3
 80026f4:	8afb      	ldrh	r3, [r7, #22]
 80026f6:	2200      	movs	r2, #0
 80026f8:	461c      	mov	r4, r3
 80026fa:	4615      	mov	r5, r2
 80026fc:	4622      	mov	r2, r4
 80026fe:	462b      	mov	r3, r5
 8002700:	2000      	movs	r0, #0
 8002702:	f001 fa67 	bl	8003bd4 <HAL_FLASH_Program>
 8002706:	4603      	mov	r3, r0
 8002708:	757b      	strb	r3, [r7, #21]

    if(status != HAL_OK)
 800270a:	7d7b      	ldrb	r3, [r7, #21]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <flashWrite+0x48>
    {
      ret = false;
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
      break;
 8002714:	e006      	b.n	8002724 <flashWrite+0x56>
  for(int i=0;i<length;i+=1)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	3301      	adds	r3, #1
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8e1      	bhi.n	80026e8 <flashWrite+0x1a>
    }
  }
  //flash lock 을 한다.
  HAL_FLASH_Lock();
 8002724:	f001 facc 	bl	8003cc0 <HAL_FLASH_Lock>

  return ret;
 8002728:	7ffb      	ldrb	r3, [r7, #31]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002734 <cliFlash>:
}


#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if(args->argc == 1 && args->isStr(0, "info") == true)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d121      	bne.n	800278e <cliFlash+0x5a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	495e      	ldr	r1, [pc, #376]	; (80028c8 <cliFlash+0x194>)
 8002750:	2000      	movs	r0, #0
 8002752:	4798      	blx	r3
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <cliFlash+0x5a>
  {
    for(int i=0;i<FLASH_SECTOR_MAX;i++)
 800275a:	2300      	movs	r3, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
 800275e:	e010      	b.n	8002782 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002760:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <cliFlash+0x198>)
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <cliFlash+0x198>)
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	461a      	mov	r2, r3
 8002776:	4856      	ldr	r0, [pc, #344]	; (80028d0 <cliFlash+0x19c>)
 8002778:	f7ff fcbe 	bl	80020f8 <cliPrintf>
    for(int i=0;i<FLASH_SECTOR_MAX;i++)
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	3301      	adds	r3, #1
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	2b0b      	cmp	r3, #11
 8002786:	ddeb      	ble.n	8002760 <cliFlash+0x2c>
    }

    ret = true;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if(args->argc == 3 && args->isStr(0, "read") == true)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d12b      	bne.n	80027ee <cliFlash+0xba>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	494e      	ldr	r1, [pc, #312]	; (80028d4 <cliFlash+0x1a0>)
 800279c:	2000      	movs	r0, #0
 800279e:	4798      	blx	r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d023      	beq.n	80027ee <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr    = (uint32_t)args->getData(1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2001      	movs	r0, #1
 80027ac:	4798      	blx	r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	623b      	str	r3, [r7, #32]
    length  = (uint32_t)args->getData(2);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2002      	movs	r0, #2
 80027b8:	4798      	blx	r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	61fb      	str	r3, [r7, #28]

    for(int i=0;i<length;i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e00d      	b.n	80027e0 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)addr + i));
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	18d1      	adds	r1, r2, r3
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4840      	ldr	r0, [pc, #256]	; (80028d8 <cliFlash+0x1a4>)
 80027d6:	f7ff fc8f 	bl	80020f8 <cliPrintf>
    for(int i=0;i<length;i++)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8ed      	bhi.n	80027c4 <cliFlash+0x90>
    }

    ret = true;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if(args->argc == 3 && args->isStr(0, "write") == true)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d127      	bne.n	8002846 <cliFlash+0x112>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4938      	ldr	r1, [pc, #224]	; (80028dc <cliFlash+0x1a8>)
 80027fc:	2000      	movs	r0, #0
 80027fe:	4798      	blx	r3
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01f      	beq.n	8002846 <cliFlash+0x112>
  {
    uint32_t addr;
    uint32_t data;

    addr    = (uint32_t)args->getData(1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2001      	movs	r0, #1
 800280c:	4798      	blx	r3
 800280e:	4603      	mov	r3, r0
 8002810:	61bb      	str	r3, [r7, #24]
    data    = (uint32_t)args->getData(2);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2002      	movs	r0, #2
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	60fb      	str	r3, [r7, #12]

    if(flashWrite(addr, (uint8_t *)&data, (uint32_t)16) == true)
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2210      	movs	r2, #16
 8002824:	4619      	mov	r1, r3
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7ff ff51 	bl	80026ce <flashWrite>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <cliFlash+0x106>
    {
      cliPrintf("Flash Write Success\r\n");
 8002832:	482b      	ldr	r0, [pc, #172]	; (80028e0 <cliFlash+0x1ac>)
 8002834:	f7ff fc60 	bl	80020f8 <cliPrintf>
 8002838:	e002      	b.n	8002840 <cliFlash+0x10c>
    }
    else
    {
      cliPrintf("Flash Write Fail\r\n");
 800283a:	482a      	ldr	r0, [pc, #168]	; (80028e4 <cliFlash+0x1b0>)
 800283c:	f7ff fc5c 	bl	80020f8 <cliPrintf>
    }

    ret = true;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if(args->argc == 3 && args->isStr(0, "erase") == true)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d124      	bne.n	8002898 <cliFlash+0x164>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <cliFlash+0x1b4>)
 8002854:	2000      	movs	r0, #0
 8002856:	4798      	blx	r3
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <cliFlash+0x164>
  {
    uint32_t addr;
    uint32_t length;

    addr    = args->getData(1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2001      	movs	r0, #1
 8002864:	4798      	blx	r3
 8002866:	4603      	mov	r3, r0
 8002868:	617b      	str	r3, [r7, #20]
    length  = args->getData(2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2002      	movs	r0, #2
 8002870:	4798      	blx	r3
 8002872:	4603      	mov	r3, r0
 8002874:	613b      	str	r3, [r7, #16]

    if(flashErase(addr, length) == true)
 8002876:	6939      	ldr	r1, [r7, #16]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7ff fed5 	bl	8002628 <flashErase>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <cliFlash+0x158>
    {
      cliPrintf("Flash Erase Success");
 8002884:	4819      	ldr	r0, [pc, #100]	; (80028ec <cliFlash+0x1b8>)
 8002886:	f7ff fc37 	bl	80020f8 <cliPrintf>
 800288a:	e002      	b.n	8002892 <cliFlash+0x15e>
    }
    else
    {
      cliPrintf("Flash Erase Fail");
 800288c:	4818      	ldr	r0, [pc, #96]	; (80028f0 <cliFlash+0x1bc>)
 800288e:	f7ff fc33 	bl	80020f8 <cliPrintf>
    }

    ret = true;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }


  if(ret != true)
 8002898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <cliFlash+0x18a>
  {
    cliPrintf("flash info\r\n");
 80028a6:	4813      	ldr	r0, [pc, #76]	; (80028f4 <cliFlash+0x1c0>)
 80028a8:	f7ff fc26 	bl	80020f8 <cliPrintf>
    cliPrintf("flash read addr length\r\n");
 80028ac:	4812      	ldr	r0, [pc, #72]	; (80028f8 <cliFlash+0x1c4>)
 80028ae:	f7ff fc23 	bl	80020f8 <cliPrintf>
    cliPrintf("flash write addr data\r\n");
 80028b2:	4812      	ldr	r0, [pc, #72]	; (80028fc <cliFlash+0x1c8>)
 80028b4:	f7ff fc20 	bl	80020f8 <cliPrintf>
    cliPrintf("flash erase addr length\r\n");
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <cliFlash+0x1cc>)
 80028ba:	f7ff fc1d 	bl	80020f8 <cliPrintf>
  }
}
 80028be:	bf00      	nop
 80028c0:	3730      	adds	r7, #48	; 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800f718 	.word	0x0800f718
 80028cc:	20000008 	.word	0x20000008
 80028d0:	0800f720 	.word	0x0800f720
 80028d4:	0800f730 	.word	0x0800f730
 80028d8:	0800f738 	.word	0x0800f738
 80028dc:	0800f748 	.word	0x0800f748
 80028e0:	0800f750 	.word	0x0800f750
 80028e4:	0800f768 	.word	0x0800f768
 80028e8:	0800f77c 	.word	0x0800f77c
 80028ec:	0800f784 	.word	0x0800f784
 80028f0:	0800f798 	.word	0x0800f798
 80028f4:	0800f7ac 	.word	0x0800f7ac
 80028f8:	0800f7bc 	.word	0x0800f7bc
 80028fc:	0800f7d8 	.word	0x0800f7d8
 8002900:	0800f7f0 	.word	0x0800f7f0

08002904 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
  bool ret = true;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]

  //LED사용 Port Clock Enable
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <ledInit+0xcc>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <ledInit+0xcc>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <ledInit+0xcc>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <ledInit+0xcc>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <ledInit+0xcc>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <ledInit+0xcc>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <ledInit+0xcc>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <ledInit+0xcc>)
 8002962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <ledInit+0xcc>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	683b      	ldr	r3, [r7, #0]

  //LED 사용 핀 출력 설정
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002974:	2301      	movs	r3, #1
 8002976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]

  for(int i=0;i<LED_MAX_CH;i++)
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	e017      	b.n	80029b6 <ledInit+0xb2>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <ledInit+0xd0>)
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	889b      	ldrh	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <ledInit+0xd0>)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800299a:	f107 020c 	add.w	r2, r7, #12
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fbf1 	bl	8004188 <HAL_GPIO_Init>

    ledOff(i);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f818 	bl	80029e0 <ledOff>
  for(int i=0;i<LED_MAX_CH;i++)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	dde4      	ble.n	8002986 <ledInit+0x82>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 80029bc:	4906      	ldr	r1, [pc, #24]	; (80029d8 <ledInit+0xd4>)
 80029be:	4807      	ldr	r0, [pc, #28]	; (80029dc <ledInit+0xd8>)
 80029c0:	f7ff fca4 	bl	800230c <cliAdd>
#endif

  return ret;
 80029c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	20000068 	.word	0x20000068
 80029d8:	08002a49 	.word	0x08002a49
 80029dc:	0800f80c 	.word	0x0800f80c

080029e0 <ledOff>:
{
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <ledOff+0x34>)
 80029ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <ledOff+0x34>)
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	8899      	ldrh	r1, [r3, #4]
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <ledOff+0x34>)
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	79db      	ldrb	r3, [r3, #7]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f001 fe5a 	bl	80046c0 <HAL_GPIO_WritePin>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000068 	.word	0x20000068

08002a18 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <ledToggle+0x2c>)
 8002a26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	4905      	ldr	r1, [pc, #20]	; (8002a44 <ledToggle+0x2c>)
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	889b      	ldrh	r3, [r3, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f001 fe5a 	bl	80046f0 <HAL_GPIO_TogglePin>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000068 	.word	0x20000068

08002a48 <cliLed>:


#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d136      	bne.n	8002aca <cliLed+0x82>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	4921      	ldr	r1, [pc, #132]	; (8002ae8 <cliLed+0xa0>)
 8002a62:	2000      	movs	r0, #0
 8002a64:	4798      	blx	r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02e      	beq.n	8002aca <cliLed+0x82>
  {
    uint8_t led_ch;
    uint32_t toogle_time;
    uint32_t pre_time;

    led_ch = args->getData(1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2001      	movs	r0, #1
 8002a72:	4798      	blx	r3
 8002a74:	4603      	mov	r3, r0
 8002a76:	75bb      	strb	r3, [r7, #22]
    toogle_time = args->getData(2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	4798      	blx	r3
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]

    if(led_ch > 0)
 8002a84:	7dbb      	ldrb	r3, [r7, #22]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <cliLed+0x48>
    {
      led_ch--;
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	75bb      	strb	r3, [r7, #22]
    }

    cliPrintf("cliLed OK \r\n");
 8002a90:	4816      	ldr	r0, [pc, #88]	; (8002aec <cliLed+0xa4>)
 8002a92:	f7ff fb31 	bl	80020f8 <cliPrintf>

    pre_time = millis();  //현재 카운터값 저장
 8002a96:	f7fe fba9 	bl	80011ec <millis>
 8002a9a:	6138      	str	r0, [r7, #16]

    while(cliKeepLoop())  //입력이 없으면 무한루프
 8002a9c:	e00e      	b.n	8002abc <cliLed+0x74>
    {
      //설정한 토글시간 이상 경과했다면
      if(millis() - pre_time >= toogle_time)
 8002a9e:	f7fe fba5 	bl	80011ec <millis>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d806      	bhi.n	8002abc <cliLed+0x74>
      {
        pre_time = millis();  // 다시 현재 카운터값 저장
 8002aae:	f7fe fb9d 	bl	80011ec <millis>
 8002ab2:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002ab4:	7dbb      	ldrb	r3, [r7, #22]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ffae 	bl	8002a18 <ledToggle>
    while(cliKeepLoop())  //입력이 없으면 무한루프
 8002abc:	f7ff fc10 	bl	80022e0 <cliKeepLoop>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1eb      	bne.n	8002a9e <cliLed+0x56>
      }
    }
    ret = true;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
  }

  if(ret != true)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <cliLed+0x96>
  {
    cliPrintf("led toggle CH[1 ~ %d] time(ms) \r\n", LED_MAX_CH);
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <cliLed+0xa8>)
 8002ada:	f7ff fb0d 	bl	80020f8 <cliPrintf>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800f810 	.word	0x0800f810
 8002aec:	0800f818 	.word	0x0800f818
 8002af0:	0800f828 	.word	0x0800f828

08002af4 <uartInit>:


void Error_Handler(void);

bool uartInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
  bool ret = true;
 8002afa:	2301      	movs	r3, #1
 8002afc:	71bb      	strb	r3, [r7, #6]

  for(uint8_t i=0;i<UART_MAX_CH;i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	71fb      	strb	r3, [r7, #7]
 8002b02:	e006      	b.n	8002b12 <uartInit+0x1e>
  {
    is_open[i] = false;
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <uartInit+0x30>)
 8002b08:	2100      	movs	r1, #0
 8002b0a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<UART_MAX_CH;i++)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d9f5      	bls.n	8002b04 <uartInit+0x10>
  }

  return ret;
 8002b18:	79bb      	ldrb	r3, [r7, #6]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	200007a4 	.word	0x200007a4

08002b28 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <uartOpen+0x1c>
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d007      	beq.n	8002b52 <uartOpen+0x2a>
 8002b42:	e07d      	b.n	8002c40 <uartOpen+0x118>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4a41      	ldr	r2, [pc, #260]	; (8002c4c <uartOpen+0x124>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	54d1      	strb	r1, [r2, r3]

      ret = true;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e076      	b.n	8002c40 <uartOpen+0x118>
    case _DEF_UART2:
      huart3.Instance         = USART3;
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <uartOpen+0x128>)
 8002b54:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <uartOpen+0x12c>)
 8002b56:	601a      	str	r2, [r3, #0]
      huart3.Init.BaudRate    = baud;
 8002b58:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <uartOpen+0x128>)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6053      	str	r3, [r2, #4]
      huart3.Init.WordLength  = UART_WORDLENGTH_8B;
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <uartOpen+0x128>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits    = UART_STOPBITS_1;
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <uartOpen+0x128>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
      huart3.Init.Parity      = UART_PARITY_NONE;
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <uartOpen+0x128>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
      huart3.Init.Mode        = UART_MODE_TX_RX;
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <uartOpen+0x128>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
      huart3.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <uartOpen+0x128>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <uartOpen+0x128>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]

      qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <uartOpen+0x130>)
 8002b88:	4834      	ldr	r0, [pc, #208]	; (8002c5c <uartOpen+0x134>)
 8002b8a:	f7fe fcdc 	bl	8001546 <qbufferCreate>

      //UART Init 이전에 DAM 설정
      __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <uartOpen+0x138>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a32      	ldr	r2, [pc, #200]	; (8002c60 <uartOpen+0x138>)
 8002b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <uartOpen+0x138>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	200c      	movs	r0, #12
 8002bb0:	f000 fb6f 	bl	8003292 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bb4:	200c      	movs	r0, #12
 8002bb6:	f000 fb88 	bl	80032ca <HAL_NVIC_EnableIRQ>

      //
      if (HAL_UART_DeInit(&huart3) == HAL_OK)
 8002bba:	4825      	ldr	r0, [pc, #148]	; (8002c50 <uartOpen+0x128>)
 8002bbc:	f003 fba1 	bl	8006302 <HAL_UART_DeInit>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <uartOpen+0xa4>
      {
        ret = true;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e001      	b.n	8002bd0 <uartOpen+0xa8>
      }
      else
      {
        ret = false;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
      }

      if(ret == true)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d033      	beq.n	8002c3e <uartOpen+0x116>
      {
        if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bd6:	481e      	ldr	r0, [pc, #120]	; (8002c50 <uartOpen+0x128>)
 8002bd8:	f003 fb46 	bl	8006268 <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <uartOpen+0xc0>
        {
          ret = false;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
        }
      }



      break;
 8002be6:	e02a      	b.n	8002c3e <uartOpen+0x116>
          is_open[ch] = true;
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <uartOpen+0x124>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	54d1      	strb	r1, [r2, r3]
          ret = true;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
          if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256)!=HAL_OK)
 8002bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf8:	4917      	ldr	r1, [pc, #92]	; (8002c58 <uartOpen+0x130>)
 8002bfa:	4815      	ldr	r0, [pc, #84]	; (8002c50 <uartOpen+0x128>)
 8002bfc:	f003 fc42 	bl	8006484 <HAL_UART_Receive_DMA>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <uartOpen+0xe2>
            ret = false;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
          qbuffer[ch].in = qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR;
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <uartOpen+0x13c>)
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	3308      	adds	r3, #8
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <uartOpen+0x140>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	1a8a      	subs	r2, r1, r2
 8002c20:	4910      	ldr	r1, [pc, #64]	; (8002c64 <uartOpen+0x13c>)
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	440b      	add	r3, r1
 8002c26:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8002c28:	79fa      	ldrb	r2, [r7, #7]
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	490d      	ldr	r1, [pc, #52]	; (8002c64 <uartOpen+0x13c>)
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	440a      	add	r2, r1
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <uartOpen+0x13c>)
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	440b      	add	r3, r1
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	601a      	str	r2, [r3, #0]
      break;
 8002c3e:	bf00      	nop
  }

  return ret;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200007a4 	.word	0x200007a4
 8002c50:	200008c8 	.word	0x200008c8
 8002c54:	40004800 	.word	0x40004800
 8002c58:	200007c8 	.word	0x200007c8
 8002c5c:	200007b8 	.word	0x200007b8
 8002c60:	40023800 	.word	0x40023800
 8002c64:	200007a8 	.word	0x200007a8
 8002c68:	2000090c 	.word	0x2000090c

08002c6c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <uartAvailable+0x1a>
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d004      	beq.n	8002c8e <uartAvailable+0x22>
      //                           256 - 256...265...254...
      qbuffer[ch].in = qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR;
      ret = qbufferAvailable(&qbuffer[ch]);
      break;

    default:break;
 8002c84:	e01b      	b.n	8002cbe <uartAvailable+0x52>
      ret = cdcAvailable();
 8002c86:	f007 f8d7 	bl	8009e38 <cdcAvailable>
 8002c8a:	60f8      	str	r0, [r7, #12]
      break;
 8002c8c:	e017      	b.n	8002cbe <uartAvailable+0x52>
      qbuffer[ch].in = qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR;
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <uartAvailable+0x5c>)
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	4413      	add	r3, r2
 8002c96:	3308      	adds	r3, #8
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <uartAvailable+0x60>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	1a8a      	subs	r2, r1, r2
 8002ca4:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <uartAvailable+0x5c>)
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	440b      	add	r3, r1
 8002caa:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <uartAvailable+0x5c>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fc9c 	bl	80015f2 <qbufferAvailable>
 8002cba:	60f8      	str	r0, [r7, #12]
      break;
 8002cbc:	bf00      	nop
  }

  return ret;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200007a8 	.word	0x200007a8
 8002ccc:	2000090c 	.word	0x2000090c

08002cd0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <uartRead+0x1a>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d005      	beq.n	8002cf4 <uartRead+0x24>

    case _DEF_UART2:
      qbufferRead(&qbuffer[ch], &ret, 1);
      break;

    default:break;
 8002ce8:	e00f      	b.n	8002d0a <uartRead+0x3a>
      ret = cdcRead();
 8002cea:	f007 f8e5 	bl	8009eb8 <cdcRead>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf2:	e00a      	b.n	8002d0a <uartRead+0x3a>
      qbufferRead(&qbuffer[ch], &ret, 1);
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <uartRead+0x44>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f107 010f 	add.w	r1, r7, #15
 8002d00:	2201      	movs	r2, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fc39 	bl	800157a <qbufferRead>
      break;
 8002d08:	bf00      	nop
  }

  return ret;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200007a8 	.word	0x200007a8

08002d18 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <uartWrite+0x1e>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d006      	beq.n	8002d42 <uartWrite+0x2a>
      {
        ret = length;
      }
      break;

    default:break;
 8002d34:	e014      	b.n	8002d60 <uartWrite+0x48>
      ret = cdcWrite(p_data, length);
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f007 f90f 	bl	8009f5c <cdcWrite>
 8002d3e:	6178      	str	r0, [r7, #20]
      break;
 8002d40:	e00e      	b.n	8002d60 <uartWrite+0x48>
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	2364      	movs	r3, #100	; 0x64
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	4808      	ldr	r0, [pc, #32]	; (8002d6c <uartWrite+0x54>)
 8002d4c:	f003 fb08 	bl	8006360 <HAL_UART_Transmit>
 8002d50:	4603      	mov	r3, r0
 8002d52:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <uartWrite+0x46>
        ret = length;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	bf00      	nop
  }
  return ret;
 8002d60:	697b      	ldr	r3, [r7, #20]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200008c8 	.word	0x200008c8

08002d70 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8002d70:	b40e      	push	{r1, r2, r3}
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b0c7      	sub	sp, #284	; 0x11c
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d7e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002d82:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002d84:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002d88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d90:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002d92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d9a:	f107 0010 	add.w	r0, r7, #16
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da8:	f009 fdcc 	bl	800c944 <vsniprintf>
 8002dac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002db0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002db4:	f107 0110 	add.w	r1, r7, #16
 8002db8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002dbc:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffa8 	bl	8002d18 <uartWrite>
 8002dc8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8002dcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ddc:	b003      	add	sp, #12
 8002dde:	4770      	bx	lr

08002de0 <HAL_UART_RxCpltCallback>:

  return ret;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], (uint8_t *)&rx_data[_DEF_UART2], 1);
    //다시 인터럽트로 데이터 수신을 하기 위해서는 다시 수신 인터럽트를 활성화 해야 한다.
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data[_DEF_UART2], 1);
#endif
  }
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
  {

  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <HAL_UART_MspInit+0xf4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d163      	bne.n	8002eee <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a33      	ldr	r2, [pc, #204]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_UART_MspInit+0xf8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002e5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e70:	2307      	movs	r3, #7
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4821      	ldr	r0, [pc, #132]	; (8002f00 <HAL_UART_MspInit+0xfc>)
 8002e7c:	f001 f984 	bl	8004188 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_UART_MspInit+0x104>)
 8002e84:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ec2:	4810      	ldr	r0, [pc, #64]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002ec4:	f000 fa2a 	bl	800331c <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002ece:	f7fe f9da 	bl	8001286 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_UART_MspInit+0x100>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2027      	movs	r0, #39	; 0x27
 8002ee4:	f000 f9d5 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ee8:	2027      	movs	r0, #39	; 0x27
 8002eea:	f000 f9ee 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020800 	.word	0x40020800
 8002f04:	2000090c 	.word	0x2000090c
 8002f08:	40026028 	.word	0x40026028

08002f0c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <HAL_UART_MspDeInit+0x40>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d112      	bne.n	8002f44 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_UART_MspDeInit+0x44>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_UART_MspDeInit+0x44>)
 8002f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_10);
 8002f2a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002f2e:	4809      	ldr	r0, [pc, #36]	; (8002f54 <HAL_UART_MspDeInit+0x48>)
 8002f30:	f001 fac8 	bl	80044c4 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa9d 	bl	8003478 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8002f3e:	2027      	movs	r0, #39	; 0x27
 8002f40:	f000 f9d1 	bl	80032e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40004800 	.word	0x40004800
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020800 	.word	0x40020800

08002f58 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  bspInit();
 8002f5c:	f7fe f8c2 	bl	80010e4 <bspInit>
  cliInit();
 8002f60:	f7fe fb6a 	bl	8001638 <cliInit>
  ledInit();
 8002f64:	f7ff fcce 	bl	8002904 <ledInit>
  uartInit();
 8002f68:	f7ff fdc4 	bl	8002af4 <uartInit>
  cdcInit();
 8002f6c:	f7fe fb58 	bl	8001620 <cdcInit>
  flashInit();
 8002f70:	f7ff fb48 	bl	8002604 <flashInit>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_Init+0x40>)
 8002f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_Init+0x40>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_Init+0x40>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f000 f96b 	bl	800327c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	200f      	movs	r0, #15
 8002fa8:	f000 f808 	bl	8002fbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f7fe f970 	bl	8001290 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_InitTick+0x54>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_InitTick+0x58>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f991 	bl	8003302 <HAL_SYSTICK_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00e      	b.n	8003008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d80a      	bhi.n	8003006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f000 f94b 	bl	8003292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ffc:	4a06      	ldr	r2, [pc, #24]	; (8003018 <HAL_InitTick+0x5c>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000000 	.word	0x20000000
 8003014:	2000008c 	.word	0x2000008c
 8003018:	20000088 	.word	0x20000088

0800301c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_IncTick+0x1c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_IncTick+0x20>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <HAL_IncTick+0x20>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	2000008c 	.word	0x2000008c
 800303c:	2000096c 	.word	0x2000096c

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <HAL_GetTick+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	2000096c 	.word	0x2000096c

08003054 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff fff0 	bl	8003040 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d005      	beq.n	800307a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_Delay+0x44>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307a:	bf00      	nop
 800307c:	f7ff ffe0 	bl	8003040 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8f7      	bhi.n	800307c <HAL_Delay+0x28>
  {
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000008c 	.word	0x2000008c

0800309c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4906      	ldr	r1, [pc, #24]	; (8003134 <__NVIC_EnableIRQ+0x34>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db12      	blt.n	8003170 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	490a      	ldr	r1, [pc, #40]	; (800317c <__NVIC_DisableIRQ+0x44>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	3320      	adds	r3, #32
 8003160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003164:	f3bf 8f4f 	dsb	sy
}
 8003168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800316a:	f3bf 8f6f 	isb	sy
}
 800316e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d301      	bcc.n	800324e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324a:	2301      	movs	r3, #1
 800324c:	e00f      	b.n	800326e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <SysTick_Config+0x40>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003256:	210f      	movs	r1, #15
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	f7ff ff90 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <SysTick_Config+0x40>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <SysTick_Config+0x40>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000e010 	.word	0xe000e010

0800327c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff09 	bl	800309c <__NVIC_SetPriorityGrouping>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a4:	f7ff ff1e 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 80032a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7ff ff90 	bl	80031d4 <NVIC_EncodePriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff5f 	bl	8003180 <__NVIC_SetPriority>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff11 	bl	8003100 <__NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff1f 	bl	8003138 <__NVIC_DisableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff94 	bl	8003238 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fe8a 	bl	8003040 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e099      	b.n	800346c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003358:	e00f      	b.n	800337a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335a:	f7ff fe71 	bl	8003040 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b05      	cmp	r3, #5
 8003366:	d908      	bls.n	800337a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e078      	b.n	800346c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e8      	bne.n	800335a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_DMA_Init+0x158>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4313      	orrs	r3, r2
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b04      	cmp	r3, #4
 800340c:	d117      	bne.n	800343e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb5d 	bl	8003ae0 <DMA_CheckFifoParam>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800343a:	2301      	movs	r3, #1
 800343c:	e016      	b.n	800346c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fb16 	bl	8003a78 <DMA_CalcBaseAndBitshift>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	223f      	movs	r2, #63	; 0x3f
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	f010803f 	.word	0xf010803f

08003478 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e050      	b.n	800352c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d101      	bne.n	800349a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e048      	b.n	800352c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2221      	movs	r2, #33	; 0x21
 80034d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 facc 	bl	8003a78 <DMA_CalcBaseAndBitshift>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_DMA_Start_IT+0x26>
 8003556:	2302      	movs	r3, #2
 8003558:	e040      	b.n	80035dc <HAL_DMA_Start_IT+0xa8>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d12f      	bne.n	80035ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fa4a 	bl	8003a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	223f      	movs	r2, #63	; 0x3f
 800358e:	409a      	lsls	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0216 	orr.w	r2, r2, #22
 80035a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0208 	orr.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e005      	b.n	80035da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035f2:	f7ff fd25 	bl	8003040 <HAL_GetTick>
 80035f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d008      	beq.n	8003616 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e052      	b.n	80036bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0216 	bic.w	r2, r2, #22
 8003624:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003634:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_DMA_Abort+0x62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0208 	bic.w	r2, r2, #8
 8003654:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003666:	e013      	b.n	8003690 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003668:	f7ff fcea 	bl	8003040 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b05      	cmp	r3, #5
 8003674:	d90c      	bls.n	8003690 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2203      	movs	r2, #3
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e015      	b.n	80036bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e4      	bne.n	8003668 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	223f      	movs	r2, #63	; 0x3f
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d004      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00c      	b.n	80036fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2205      	movs	r2, #5
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003714:	4b8e      	ldr	r3, [pc, #568]	; (8003950 <HAL_DMA_IRQHandler+0x248>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a8e      	ldr	r2, [pc, #568]	; (8003954 <HAL_DMA_IRQHandler+0x24c>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	2208      	movs	r2, #8
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	2208      	movs	r2, #8
 8003762:	409a      	lsls	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	2201      	movs	r2, #1
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d012      	beq.n	80037aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	2204      	movs	r2, #4
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	2204      	movs	r2, #4
 80037ce:	409a      	lsls	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	2210      	movs	r2, #16
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d043      	beq.n	8003878 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03c      	beq.n	8003878 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	2210      	movs	r2, #16
 8003804:	409a      	lsls	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d018      	beq.n	800384a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d024      	beq.n	8003878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
 8003836:	e01f      	b.n	8003878 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e016      	b.n	8003878 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0208 	bic.w	r2, r2, #8
 8003866:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2220      	movs	r2, #32
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 808f 	beq.w	80039a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8087 	beq.w	80039a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2220      	movs	r2, #32
 80038a0:	409a      	lsls	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d136      	bne.n	8003920 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0216 	bic.w	r2, r2, #22
 80038c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x1da>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	223f      	movs	r2, #63	; 0x3f
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	2b00      	cmp	r3, #0
 8003914:	d07e      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
        }
        return;
 800391e:	e079      	b.n	8003a14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	2b00      	cmp	r3, #0
 8003942:	d031      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
 800394c:	e02c      	b.n	80039a8 <HAL_DMA_IRQHandler+0x2a0>
 800394e:	bf00      	nop
 8003950:	20000000 	.word	0x20000000
 8003954:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d023      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
 8003968:	e01e      	b.n	80039a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10f      	bne.n	8003998 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0210 	bic.w	r2, r2, #16
 8003986:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d032      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2205      	movs	r2, #5
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d307      	bcc.n	80039f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f2      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x2cc>
 80039ee:	e000      	b.n	80039f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a14:	bf00      	nop
    }
  }
}
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d108      	bne.n	8003a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a5a:	e007      	b.n	8003a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3b10      	subs	r3, #16
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x60>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <DMA_CalcBaseAndBitshift+0x64>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d909      	bls.n	8003aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab8:	e007      	b.n	8003aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	0800f8ac 	.word	0x0800f8ac

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_FLASH_Program+0xa0>)
 8003be8:	7e1b      	ldrb	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_FLASH_Program+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e03b      	b.n	8003c6a <HAL_FLASH_Program+0x96>
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_FLASH_Program+0xa0>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bfc:	f000 f870 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d12b      	bne.n	8003c62 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c10:	783b      	ldrb	r3, [r7, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f000 f919 	bl	8003e4c <FLASH_Program_Byte>
 8003c1a:	e016      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c22:	883b      	ldrh	r3, [r7, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	f000 f8ee 	bl	8003e08 <FLASH_Program_HalfWord>
 8003c2c:	e00d      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d105      	bne.n	8003c40 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f000 f8c3 	bl	8003dc4 <FLASH_Program_Word>
 8003c3e:	e004      	b.n	8003c4a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c44:	68b8      	ldr	r0, [r7, #8]
 8003c46:	f000 f88b 	bl	8003d60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c4e:	f000 f847 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_FLASH_Program+0xa4>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_FLASH_Program+0xa4>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <HAL_FLASH_Program+0xa0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000970 	.word	0x20000970
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0b      	bge.n	8003ca6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_FLASH_Unlock+0x3c>)
 8003c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HAL_FLASH_Unlock+0x40>)
 8003c98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_FLASH_Unlock+0x38>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da01      	bge.n	8003ca6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00
 8003cb8:	45670123 	.word	0x45670123
 8003cbc:	cdef89ab 	.word	0xcdef89ab

08003cc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_FLASH_Lock+0x1c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_FLASH_Lock+0x1c>)
 8003cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023c00 	.word	0x40023c00

08003ce0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <FLASH_WaitForLastOperation+0x78>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf2:	f7ff f9a5 	bl	8003040 <HAL_GetTick>
 8003cf6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003cf8:	e010      	b.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d00c      	beq.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <FLASH_WaitForLastOperation+0x38>
 8003d08:	f7ff f99a 	bl	8003040 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d201      	bcs.n	8003d1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e019      	b.n	8003d50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e8      	bne.n	8003cfa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <FLASH_WaitForLastOperation+0x7c>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d46:	f000 f8a1 	bl	8003e8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
  
}  
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000970 	.word	0x20000970
 8003d5c:	40023c00 	.word	0x40023c00

08003d60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4a10      	ldr	r2, [pc, #64]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d7e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <FLASH_Program_DoubleWord+0x60>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d96:	f3bf 8f6f 	isb	sy
}
 8003d9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	000a      	movs	r2, r1
 8003daa:	2300      	movs	r3, #0
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	3104      	adds	r1, #4
 8003db0:	4613      	mov	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00

08003dc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4a06      	ldr	r2, [pc, #24]	; (8003e04 <FLASH_Program_Word+0x40>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	601a      	str	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <FLASH_Program_HalfWord+0x40>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	801a      	strh	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40023c00 	.word	0x40023c00

08003e4c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <FLASH_Program_Byte+0x3c>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	701a      	strb	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40023c00 	.word	0x40023c00

08003e8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f043 0308 	orr.w	r3, r3, #8
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003ea6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003eaa:	2210      	movs	r2, #16
 8003eac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003ec4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003ec8:	2220      	movs	r2, #32
 8003eca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003ee2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003f00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f043 0310 	orr.w	r3, r3, #16
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <FLASH_SetErrorCode+0xa8>)
 8003f1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <FLASH_SetErrorCode+0xa4>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	60da      	str	r2, [r3, #12]
  }
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	20000970 	.word	0x20000970

08003f38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_FLASHEx_Erase+0xd8>)
 8003f4c:	7e1b      	ldrb	r3, [r3, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_FLASHEx_Erase+0x1e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e058      	b.n	8004008 <HAL_FLASHEx_Erase+0xd0>
 8003f56:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_FLASHEx_Erase+0xd8>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f60:	f7ff febe 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d148      	bne.n	8004000 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 f8da 	bl	8004144 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f94:	f7ff fea4 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_FLASHEx_Erase+0xdc>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_FLASHEx_Erase+0xdc>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6113      	str	r3, [r2, #16]
 8003fa8:	e028      	b.n	8003ffc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	e01c      	b.n	8003fec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f000 f82c 	bl	8004018 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fc4:	f7ff fe8c 	bl	8003ce0 <FLASH_WaitForLastOperation>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_FLASHEx_Erase+0xdc>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4a10      	ldr	r2, [pc, #64]	; (8004014 <HAL_FLASHEx_Erase+0xdc>)
 8003fd2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003fd6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	601a      	str	r2, [r3, #0]
          break;
 8003fe4:	e00a      	b.n	8003ffc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d3da      	bcc.n	8003fb2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003ffc:	f000 f85e 	bl	80040bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <HAL_FLASHEx_Erase+0xd8>)
 8004002:	2200      	movs	r2, #0
 8004004:	761a      	strb	r2, [r3, #24]

  return status;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000970 	.word	0x20000970
 8004014:	40023c00 	.word	0x40023c00

08004018 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e010      	b.n	8004056 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d103      	bne.n	8004042 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800403a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e009      	b.n	8004056 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d103      	bne.n	8004050 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e002      	b.n	8004056 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004054:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 800405c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004060:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	4914      	ldr	r1, [pc, #80]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 8004074:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004078:	6113      	str	r3, [r2, #16]
 800407a:	23f8      	movs	r3, #248	; 0xf8
 800407c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004086:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4093      	lsls	r3, r2
 8004094:	f043 0202 	orr.w	r2, r3, #2
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4906      	ldr	r1, [pc, #24]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <FLASH_Erase_Sector+0xa0>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ac:	6113      	str	r3, [r2, #16]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40023c00 	.word	0x40023c00

080040bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d017      	beq.n	80040fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <FLASH_FlushCaches+0x84>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <FLASH_FlushCaches+0x84>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <FLASH_FlushCaches+0x84>)
 800410e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004112:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <FLASH_FlushCaches+0x84>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <FLASH_FlushCaches+0x84>)
 800411a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <FLASH_FlushCaches+0x84>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a06      	ldr	r2, [pc, #24]	; (8004140 <FLASH_FlushCaches+0x84>)
 8004126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <FLASH_FlushCaches+0x84>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a03      	ldr	r2, [pc, #12]	; (8004140 <FLASH_FlushCaches+0x84>)
 8004132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004136:	6013      	str	r3, [r2, #0]
  }
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40023c00 	.word	0x40023c00

08004144 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <FLASH_MassErase+0x40>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <FLASH_MassErase+0x40>)
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <FLASH_MassErase+0x40>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4a08      	ldr	r2, [pc, #32]	; (8004184 <FLASH_MassErase+0x40>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <FLASH_MassErase+0x40>)
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	4313      	orrs	r3, r2
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <FLASH_MassErase+0x40>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	6113      	str	r3, [r2, #16]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40023c00 	.word	0x40023c00

08004188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004196:	e16f      	b.n	8004478 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2101      	movs	r1, #1
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8161 	beq.w	8004472 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d005      	beq.n	80041c8 <HAL_GPIO_Init+0x40>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d130      	bne.n	800422a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041fe:	2201      	movs	r2, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0201 	and.w	r2, r3, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b03      	cmp	r3, #3
 8004234:	d017      	beq.n	8004266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d123      	bne.n	80042ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	08da      	lsrs	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3208      	adds	r2, #8
 800427a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	220f      	movs	r2, #15
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	08da      	lsrs	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	6939      	ldr	r1, [r7, #16]
 80042b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 0203 	and.w	r2, r3, #3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80bb 	beq.w	8004472 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <HAL_GPIO_Init+0x30c>)
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	4a63      	ldr	r2, [pc, #396]	; (8004494 <HAL_GPIO_Init+0x30c>)
 8004306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430a:	6453      	str	r3, [r2, #68]	; 0x44
 800430c:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_GPIO_Init+0x30c>)
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004318:	4a5f      	ldr	r2, [pc, #380]	; (8004498 <HAL_GPIO_Init+0x310>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	220f      	movs	r2, #15
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a57      	ldr	r2, [pc, #348]	; (800449c <HAL_GPIO_Init+0x314>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d031      	beq.n	80043a8 <HAL_GPIO_Init+0x220>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a56      	ldr	r2, [pc, #344]	; (80044a0 <HAL_GPIO_Init+0x318>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d02b      	beq.n	80043a4 <HAL_GPIO_Init+0x21c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a55      	ldr	r2, [pc, #340]	; (80044a4 <HAL_GPIO_Init+0x31c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d025      	beq.n	80043a0 <HAL_GPIO_Init+0x218>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a54      	ldr	r2, [pc, #336]	; (80044a8 <HAL_GPIO_Init+0x320>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01f      	beq.n	800439c <HAL_GPIO_Init+0x214>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a53      	ldr	r2, [pc, #332]	; (80044ac <HAL_GPIO_Init+0x324>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d019      	beq.n	8004398 <HAL_GPIO_Init+0x210>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_GPIO_Init+0x328>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x20c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a51      	ldr	r2, [pc, #324]	; (80044b4 <HAL_GPIO_Init+0x32c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x208>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a50      	ldr	r2, [pc, #320]	; (80044b8 <HAL_GPIO_Init+0x330>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x204>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a4f      	ldr	r2, [pc, #316]	; (80044bc <HAL_GPIO_Init+0x334>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x200>
 8004384:	2308      	movs	r3, #8
 8004386:	e010      	b.n	80043aa <HAL_GPIO_Init+0x222>
 8004388:	2309      	movs	r3, #9
 800438a:	e00e      	b.n	80043aa <HAL_GPIO_Init+0x222>
 800438c:	2307      	movs	r3, #7
 800438e:	e00c      	b.n	80043aa <HAL_GPIO_Init+0x222>
 8004390:	2306      	movs	r3, #6
 8004392:	e00a      	b.n	80043aa <HAL_GPIO_Init+0x222>
 8004394:	2305      	movs	r3, #5
 8004396:	e008      	b.n	80043aa <HAL_GPIO_Init+0x222>
 8004398:	2304      	movs	r3, #4
 800439a:	e006      	b.n	80043aa <HAL_GPIO_Init+0x222>
 800439c:	2303      	movs	r3, #3
 800439e:	e004      	b.n	80043aa <HAL_GPIO_Init+0x222>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e002      	b.n	80043aa <HAL_GPIO_Init+0x222>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_GPIO_Init+0x222>
 80043a8:	2300      	movs	r3, #0
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	f002 0203 	and.w	r2, r2, #3
 80043b0:	0092      	lsls	r2, r2, #2
 80043b2:	4093      	lsls	r3, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043bc:	4936      	ldr	r1, [pc, #216]	; (8004498 <HAL_GPIO_Init+0x310>)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	3302      	adds	r3, #2
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ca:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_GPIO_Init+0x338>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043ee:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_GPIO_Init+0x338>)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043f4:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <HAL_GPIO_Init+0x338>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <HAL_GPIO_Init+0x338>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HAL_GPIO_Init+0x338>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	43db      	mvns	r3, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_GPIO_Init+0x338>)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_GPIO_Init+0x338>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_GPIO_Init+0x338>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3301      	adds	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa22 f303 	lsr.w	r3, r2, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	f47f ae88 	bne.w	8004198 <HAL_GPIO_Init+0x10>
  }
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	40023800 	.word	0x40023800
 8004498:	40013800 	.word	0x40013800
 800449c:	40020000 	.word	0x40020000
 80044a0:	40020400 	.word	0x40020400
 80044a4:	40020800 	.word	0x40020800
 80044a8:	40020c00 	.word	0x40020c00
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40021400 	.word	0x40021400
 80044b4:	40021800 	.word	0x40021800
 80044b8:	40021c00 	.word	0x40021c00
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40013c00 	.word	0x40013c00

080044c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80044d2:	e0d1      	b.n	8004678 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80044d4:	2201      	movs	r2, #1
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80c4 	beq.w	8004672 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80044ea:	4a6a      	ldr	r2, [pc, #424]	; (8004694 <HAL_GPIO_DeInit+0x1d0>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	220f      	movs	r2, #15
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a62      	ldr	r2, [pc, #392]	; (8004698 <HAL_GPIO_DeInit+0x1d4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d031      	beq.n	8004578 <HAL_GPIO_DeInit+0xb4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_GPIO_DeInit+0x1d8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02b      	beq.n	8004574 <HAL_GPIO_DeInit+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_GPIO_DeInit+0x1dc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d025      	beq.n	8004570 <HAL_GPIO_DeInit+0xac>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a5f      	ldr	r2, [pc, #380]	; (80046a4 <HAL_GPIO_DeInit+0x1e0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01f      	beq.n	800456c <HAL_GPIO_DeInit+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a5e      	ldr	r2, [pc, #376]	; (80046a8 <HAL_GPIO_DeInit+0x1e4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d019      	beq.n	8004568 <HAL_GPIO_DeInit+0xa4>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a5d      	ldr	r2, [pc, #372]	; (80046ac <HAL_GPIO_DeInit+0x1e8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_GPIO_DeInit+0xa0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a5c      	ldr	r2, [pc, #368]	; (80046b0 <HAL_GPIO_DeInit+0x1ec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00d      	beq.n	8004560 <HAL_GPIO_DeInit+0x9c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a5b      	ldr	r2, [pc, #364]	; (80046b4 <HAL_GPIO_DeInit+0x1f0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <HAL_GPIO_DeInit+0x98>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a5a      	ldr	r2, [pc, #360]	; (80046b8 <HAL_GPIO_DeInit+0x1f4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_GPIO_DeInit+0x94>
 8004554:	2308      	movs	r3, #8
 8004556:	e010      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004558:	2309      	movs	r3, #9
 800455a:	e00e      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 800455c:	2307      	movs	r3, #7
 800455e:	e00c      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004560:	2306      	movs	r3, #6
 8004562:	e00a      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004564:	2305      	movs	r3, #5
 8004566:	e008      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004568:	2304      	movs	r3, #4
 800456a:	e006      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 800456c:	2303      	movs	r3, #3
 800456e:	e004      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004570:	2302      	movs	r3, #2
 8004572:	e002      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_GPIO_DeInit+0xb6>
 8004578:	2300      	movs	r3, #0
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	f002 0203 	and.w	r2, r2, #3
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	fa03 f202 	lsl.w	r2, r3, r2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d132      	bne.n	80045f2 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800458c:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	4949      	ldr	r1, [pc, #292]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 8004596:	4013      	ands	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800459a:	4b48      	ldr	r3, [pc, #288]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	4946      	ldr	r1, [pc, #280]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045a8:	4b44      	ldr	r3, [pc, #272]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	4942      	ldr	r1, [pc, #264]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	493f      	ldr	r1, [pc, #252]	; (80046bc <HAL_GPIO_DeInit+0x1f8>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	220f      	movs	r2, #15
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80045d4:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <HAL_GPIO_DeInit+0x1d0>)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	3302      	adds	r3, #2
 80045dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	482b      	ldr	r0, [pc, #172]	; (8004694 <HAL_GPIO_DeInit+0x1d0>)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	400a      	ands	r2, r1
 80045ec:	3302      	adds	r3, #2
 80045ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2103      	movs	r1, #3
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	08d2      	lsrs	r2, r2, #3
 8004628:	4019      	ands	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2103      	movs	r1, #3
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	2101      	movs	r1, #1
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2103      	movs	r1, #3
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	401a      	ands	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f af27 	bne.w	80044d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40013800 	.word	0x40013800
 8004698:	40020000 	.word	0x40020000
 800469c:	40020400 	.word	0x40020400
 80046a0:	40020800 	.word	0x40020800
 80046a4:	40020c00 	.word	0x40020c00
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40021400 	.word	0x40021400
 80046b0:	40021800 	.word	0x40021800
 80046b4:	40021c00 	.word	0x40021c00
 80046b8:	40022000 	.word	0x40022000
 80046bc:	40013c00 	.word	0x40013c00

080046c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
 80046cc:	4613      	mov	r3, r2
 80046ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d0:	787b      	ldrb	r3, [r7, #1]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046dc:	e003      	b.n	80046e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	041a      	lsls	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	619a      	str	r2, [r3, #24]
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	041a      	lsls	r2, r3, #16
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	43d9      	mvns	r1, r3
 800470e:	887b      	ldrh	r3, [r7, #2]
 8004710:	400b      	ands	r3, r1
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004724:	b08f      	sub	sp, #60	; 0x3c
 8004726:	af0a      	add	r7, sp, #40	; 0x28
 8004728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e10f      	b.n	8004954 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f005 fe70 	bl	800a434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2203      	movs	r2, #3
 8004758:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fd38 	bl	80071e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	687e      	ldr	r6, [r7, #4]
 8004780:	466d      	mov	r5, sp
 8004782:	f106 0410 	add.w	r4, r6, #16
 8004786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800478a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800478c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800478e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004792:	e885 0003 	stmia.w	r5, {r0, r1}
 8004796:	1d33      	adds	r3, r6, #4
 8004798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f002 fc1a 	bl	8006fd4 <USB_CoreInit>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0d0      	b.n	8004954 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f002 fd25 	bl	8007208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e04a      	b.n	800485a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	333d      	adds	r3, #61	; 0x3d
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	333c      	adds	r3, #60	; 0x3c
 80047e8:	7bfa      	ldrb	r2, [r7, #15]
 80047ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	b298      	uxth	r0, r3
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	3342      	adds	r3, #66	; 0x42
 8004800:	4602      	mov	r2, r0
 8004802:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	333f      	adds	r3, #63	; 0x3f
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3344      	adds	r3, #68	; 0x44
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	3348      	adds	r3, #72	; 0x48
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004840:	7bfa      	ldrb	r2, [r7, #15]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	3350      	adds	r3, #80	; 0x50
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	3301      	adds	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	7bfa      	ldrb	r2, [r7, #15]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d3af      	bcc.n	80047c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e044      	b.n	80048f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048ac:	7bfa      	ldrb	r2, [r7, #15]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048d8:	7bfa      	ldrb	r2, [r7, #15]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	3301      	adds	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3b5      	bcc.n	800486a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	687e      	ldr	r6, [r7, #4]
 8004906:	466d      	mov	r5, sp
 8004908:	f106 0410 	add.w	r4, r6, #16
 800490c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800490e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004914:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004918:	e885 0003 	stmia.w	r5, {r0, r1}
 800491c:	1d33      	adds	r3, r6, #4
 800491e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004920:	6838      	ldr	r0, [r7, #0]
 8004922:	f002 fcbd 	bl	80072a0 <USB_DevInit>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e00d      	b.n	8004954 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f003 fd2e 	bl	80083ae <USB_DevDisconnect>

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800495c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_PCD_Start+0x16>
 800496e:	2302      	movs	r3, #2
 8004970:	e012      	b.n	8004998 <HAL_PCD_Start+0x3c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f002 fc22 	bl	80071c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f003 fcf0 	bl	800836e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b08d      	sub	sp, #52	; 0x34
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fda7 	bl	800850a <USB_GetMode>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 838f 	bne.w	80050e2 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f003 fd10 	bl	80083ee <USB_ReadInterrupts>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8385 	beq.w	80050e0 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f003 fd07 	bl	80083ee <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d107      	bne.n	80049fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f002 0202 	and.w	r2, r2, #2
 80049f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f003 fcf5 	bl	80083ee <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d161      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0210 	bic.w	r2, r2, #16
 8004a1c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	0c5b      	lsrs	r3, r3, #17
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d124      	bne.n	8004a94 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d035      	beq.n	8004ac2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6a38      	ldr	r0, [r7, #32]
 8004a6a:	f003 fb32 	bl	80080d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a7a:	441a      	add	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a8c:	441a      	add	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	619a      	str	r2, [r3, #24]
 8004a92:	e016      	b.n	8004ac2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	0c5b      	lsrs	r3, r3, #17
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d110      	bne.n	8004ac2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6a38      	ldr	r0, [r7, #32]
 8004aac:	f003 fb11 	bl	80080d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004abc:	441a      	add	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0210 	orr.w	r2, r2, #16
 8004ad0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 fc89 	bl	80083ee <USB_ReadInterrupts>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae6:	d16e      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fc8e 	bl	8008412 <USB_ReadDevAllOutEpInterrupt>
 8004af6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004af8:	e062      	b.n	8004bc0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d057      	beq.n	8004bb4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f003 fcb1 	bl	8008476 <USB_ReadDevOutEPInterrupt>
 8004b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2301      	movs	r3, #1
 8004b30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fda1 	bl	800567c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2308      	movs	r3, #8
 8004b54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fe9b 	bl	8005894 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2310      	movs	r3, #16
 8004b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2320      	movs	r3, #32
 8004b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d199      	bne.n	8004afa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 fc0f 	bl	80083ee <USB_ReadInterrupts>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bda:	f040 80c0 	bne.w	8004d5e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f003 fc2e 	bl	8008444 <USB_ReadDevAllInEpInterrupt>
 8004be8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004bee:	e0b2      	b.n	8004d56 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80a7 	beq.w	8004d4a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fc52 	bl	80084b0 <USB_ReadDevInEPInterrupt>
 8004c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d057      	beq.n	8004cc8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69f9      	ldr	r1, [r7, #28]
 8004c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c38:	4013      	ands	r3, r2
 8004c3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d132      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3348      	adds	r3, #72	; 0x48
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4403      	add	r3, r0
 8004c76:	3344      	adds	r3, #68	; 0x44
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4419      	add	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	3348      	adds	r3, #72	; 0x48
 8004c8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d113      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x31c>
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3350      	adds	r3, #80	; 0x50
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d108      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	f003 fc56 	bl	8008568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fc37 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	461a      	mov	r2, r3
 8004d18:	2340      	movs	r3, #64	; 0x40
 8004d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	461a      	mov	r2, r3
 8004d34:	2302      	movs	r3, #2
 8004d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fc0c 	bl	8005562 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af49 	bne.w	8004bf0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f003 fb43 	bl	80083ee <USB_ReadInterrupts>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d72:	d114      	bne.n	8004d9e <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f005 fc4b 	bl	800a624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f003 fb23 	bl	80083ee <USB_ReadInterrupts>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d112      	bne.n	8004dda <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d102      	bne.n	8004dca <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f005 fc07 	bl	800a5d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004dd8:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f003 fb05 	bl	80083ee <USB_ReadInterrupts>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	f040 80c7 	bne.w	8004f80 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 fbab 	bl	8007568 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	e056      	b.n	8004ec6 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e4a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ebe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3a3      	bcc.n	8004e18 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ee2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efc:	f043 030b 	orr.w	r3, r3, #11
 8004f00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f12:	f043 030b 	orr.w	r3, r3, #11
 8004f16:	6453      	str	r3, [r2, #68]	; 0x44
 8004f18:	e015      	b.n	8004f46 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f40:	f043 030b 	orr.w	r3, r3, #11
 8004f44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f003 fafc 	bl	8008568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 fa32 	bl	80083ee <USB_ReadInterrupts>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d124      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 fac2 	bl	8008524 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fb3b 	bl	8007620 <USB_GetDevSpeed>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	f001 f909 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8004fba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f002 f85d 	bl	8007084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f005 fadb 	bl	800a586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 fa02 	bl	80083ee <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d10a      	bne.n	800500a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f005 fab8 	bl	800a56a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f002 0208 	and.w	r2, r2, #8
 8005008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 f9ed 	bl	80083ee <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501e:	d10f      	bne.n	8005040 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f005 fb1a 	bl	800a664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800503e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f003 f9d2 	bl	80083ee <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005054:	d10f      	bne.n	8005076 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	b2db      	uxtb	r3, r3
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f005 faed 	bl	800a640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f003 f9b7 	bl	80083ee <USB_ReadInterrupts>
 8005080:	4603      	mov	r3, r0
 8005082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d10a      	bne.n	80050a2 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f005 fafb 	bl	800a688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 f9a1 	bl	80083ee <USB_ReadInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d115      	bne.n	80050e2 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f005 faeb 	bl	800a6a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e000      	b.n	80050e2 <HAL_PCD_IRQHandler+0x742>
      return;
 80050e0:	bf00      	nop
    }
  }
}
 80050e2:	3734      	adds	r7, #52	; 0x34
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}

080050e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_PCD_SetAddress+0x1a>
 80050fe:	2302      	movs	r3, #2
 8005100:	e013      	b.n	800512a <HAL_PCD_SetAddress+0x42>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f003 f902 	bl	8008324 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	461a      	mov	r2, r3
 8005140:	4603      	mov	r3, r0
 8005142:	70fb      	strb	r3, [r7, #3]
 8005144:	460b      	mov	r3, r1
 8005146:	803b      	strh	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da0f      	bge.n	8005178 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	3338      	adds	r3, #56	; 0x38
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	3304      	adds	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	705a      	strb	r2, [r3, #1]
 8005176:	e00f      	b.n	8005198 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051a4:	883a      	ldrh	r2, [r7, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	78ba      	ldrb	r2, [r7, #2]
 80051ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051c2:	78bb      	ldrb	r3, [r7, #2]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d102      	bne.n	80051ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_PCD_EP_Open+0xaa>
 80051d8:	2302      	movs	r3, #2
 80051da:	e00e      	b.n	80051fa <HAL_PCD_EP_Open+0xc8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 fa3c 	bl	8007668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80051f8:	7afb      	ldrb	r3, [r7, #11]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800520e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da0f      	bge.n	8005236 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f003 020f 	and.w	r2, r3, #15
 800521c:	4613      	mov	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	3338      	adds	r3, #56	; 0x38
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	3304      	adds	r3, #4
 800522c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	705a      	strb	r2, [r3, #1]
 8005234:	e00f      	b.n	8005256 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	3304      	adds	r3, #4
 800524e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_PCD_EP_Close+0x6e>
 800526c:	2302      	movs	r3, #2
 800526e:	e00e      	b.n	800528e <HAL_PCD_EP_Close+0x8c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fa78 	bl	8007774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	460b      	mov	r3, r1
 80052a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	3304      	adds	r3, #4
 80052be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	6979      	ldr	r1, [r7, #20]
 800530a:	f002 fd53 	bl	8007db4 <USB_EP0StartXfer>
 800530e:	e008      	b.n	8005322 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6979      	ldr	r1, [r7, #20]
 800531e:	f002 fb05 	bl	800792c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	460b      	mov	r3, r1
 8005368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800536a:	7afb      	ldrb	r3, [r7, #11]
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	3338      	adds	r3, #56	; 0x38
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2201      	movs	r2, #1
 8005398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d102      	bne.n	80053b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	f002 fcf2 	bl	8007db4 <USB_EP0StartXfer>
 80053d0:	e008      	b.n	80053e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	f002 faa4 	bl	800792c <USB_EPStartXfer>
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d901      	bls.n	800540c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e050      	b.n	80054ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800540c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005410:	2b00      	cmp	r3, #0
 8005412:	da0f      	bge.n	8005434 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	3338      	adds	r3, #56	; 0x38
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	3304      	adds	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	705a      	strb	r2, [r3, #1]
 8005432:	e00d      	b.n	8005450 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	3304      	adds	r3, #4
 8005448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_PCD_EP_SetStall+0x82>
 800546c:	2302      	movs	r3, #2
 800546e:	e01e      	b.n	80054ae <HAL_PCD_EP_SetStall+0xc0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	4618      	mov	r0, r3
 8005480:	f002 fe7e 	bl	8008180 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	b2d9      	uxtb	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800549e:	461a      	mov	r2, r3
 80054a0:	f003 f862 	bl	8008568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	460b      	mov	r3, r1
 80054c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 020f 	and.w	r2, r3, #15
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d901      	bls.n	80054d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e042      	b.n	800555a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da0f      	bge.n	80054fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	3338      	adds	r3, #56	; 0x38
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	705a      	strb	r2, [r3, #1]
 80054fa:	e00f      	b.n	800551c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 020f 	and.w	r2, r3, #15
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_PCD_EP_ClrStall+0x86>
 8005538:	2302      	movs	r3, #2
 800553a:	e00e      	b.n	800555a <HAL_PCD_EP_ClrStall+0xa4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	4618      	mov	r0, r3
 800554c:	f002 fe85 	bl	800825a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08a      	sub	sp, #40	; 0x28
 8005566:	af02      	add	r7, sp, #8
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	3338      	adds	r3, #56	; 0x38
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	3304      	adds	r3, #4
 8005588:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	d901      	bls.n	800559a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e06c      	b.n	8005674 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d902      	bls.n	80055b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3303      	adds	r3, #3
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055be:	e02b      	b.n	8005618 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d902      	bls.n	80055dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3303      	adds	r3, #3
 80055e0:	089b      	lsrs	r3, r3, #2
 80055e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68d9      	ldr	r1, [r3, #12]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	6978      	ldr	r0, [r7, #20]
 80055fc:	f002 fd2c 	bl	8008058 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	b29b      	uxth	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	429a      	cmp	r2, r3
 800562c:	d809      	bhi.n	8005642 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005636:	429a      	cmp	r2, r3
 8005638:	d203      	bcs.n	8005642 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1be      	bne.n	80055c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	429a      	cmp	r2, r3
 800564c:	d811      	bhi.n	8005672 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	2201      	movs	r2, #1
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	43db      	mvns	r3, r3
 8005668:	6939      	ldr	r1, [r7, #16]
 800566a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566e:	4013      	ands	r3, r2
 8005670:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	333c      	adds	r3, #60	; 0x3c
 8005694:	3304      	adds	r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	f040 80a0 	bne.w	80057f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a72      	ldr	r2, [pc, #456]	; (800588c <PCD_EP_OutXfrComplete_int+0x210>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f240 80dd 	bls.w	8005882 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80d7 	beq.w	8005882 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e6:	6093      	str	r3, [r2, #8]
 80056e8:	e0cb      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	461a      	mov	r2, r3
 8005702:	2320      	movs	r3, #32
 8005704:	6093      	str	r3, [r2, #8]
 8005706:	e0bc      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 80b7 	bne.w	8005882 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a5d      	ldr	r2, [pc, #372]	; (800588c <PCD_EP_OutXfrComplete_int+0x210>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d90f      	bls.n	800573c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	461a      	mov	r2, r3
 8005734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	e0a2      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800574e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	0159      	lsls	r1, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	440b      	add	r3, r1
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005762:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4403      	add	r3, r0
 8005772:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005776:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4403      	add	r3, r0
 800579a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4419      	add	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4403      	add	r3, r0
 80057b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d114      	bne.n	80057e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d108      	bne.n	80057e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057de:	461a      	mov	r2, r3
 80057e0:	2101      	movs	r1, #1
 80057e2:	f002 fec1 	bl	8008568 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f004 fe87 	bl	800a500 <HAL_PCD_DataOutStageCallback>
 80057f2:	e046      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a26      	ldr	r2, [pc, #152]	; (8005890 <PCD_EP_OutXfrComplete_int+0x214>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d124      	bne.n	8005846 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	461a      	mov	r2, r3
 8005814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005818:	6093      	str	r3, [r2, #8]
 800581a:	e032      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	2320      	movs	r3, #32
 8005836:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f004 fe5e 	bl	800a500 <HAL_PCD_DataOutStageCallback>
 8005844:	e01d      	b.n	8005882 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d114      	bne.n	8005876 <PCD_EP_OutXfrComplete_int+0x1fa>
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800586e:	461a      	mov	r2, r3
 8005870:	2100      	movs	r1, #0
 8005872:	f002 fe79 	bl	8008568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f004 fe3f 	bl	800a500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	4f54300a 	.word	0x4f54300a
 8005890:	4f54310a 	.word	0x4f54310a

08005894 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	333c      	adds	r3, #60	; 0x3c
 80058ac:	3304      	adds	r3, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a15      	ldr	r2, [pc, #84]	; (800591c <PCD_EP_OutSetupPacket_int+0x88>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d90e      	bls.n	80058e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	461a      	mov	r2, r3
 80058e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f004 fdf7 	bl	800a4dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	; (800591c <PCD_EP_OutSetupPacket_int+0x88>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d90c      	bls.n	8005910 <PCD_EP_OutSetupPacket_int+0x7c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d108      	bne.n	8005910 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005908:	461a      	mov	r2, r3
 800590a:	2101      	movs	r1, #1
 800590c:	f002 fe2c 	bl	8008568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	4f54300a 	.word	0x4f54300a

08005920 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
 800592c:	4613      	mov	r3, r2
 800592e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800593e:	883b      	ldrh	r3, [r7, #0]
 8005940:	0419      	lsls	r1, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	430a      	orrs	r2, r1
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
 800594c:	e028      	b.n	80059a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e00d      	b.n	800597e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	3340      	adds	r3, #64	; 0x40
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	3301      	adds	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	3b01      	subs	r3, #1
 8005984:	429a      	cmp	r2, r3
 8005986:	d3ec      	bcc.n	8005962 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005988:	883b      	ldrh	r3, [r7, #0]
 800598a:	0418      	lsls	r0, r3, #16
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	3b01      	subs	r3, #1
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	4302      	orrs	r2, r0
 8005998:	3340      	adds	r3, #64	; 0x40
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	887a      	ldrh	r2, [r7, #2]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e236      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d050      	beq.n	8005a8c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ea:	4b9e      	ldr	r3, [pc, #632]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d00c      	beq.n	8005a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	4b9b      	ldr	r3, [pc, #620]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d112      	bne.n	8005a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a02:	4b98      	ldr	r3, [pc, #608]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0e:	d10b      	bne.n	8005a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	4b94      	ldr	r3, [pc, #592]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d036      	beq.n	8005a8a <HAL_RCC_OscConfig+0xbe>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d132      	bne.n	8005a8a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e211      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	4b8e      	ldr	r3, [pc, #568]	; (8005c68 <HAL_RCC_OscConfig+0x29c>)
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d013      	beq.n	8005a62 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fd fb01 	bl	8003040 <HAL_GetTick>
 8005a3e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a42:	f7fd fafd 	bl	8003040 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b64      	cmp	r3, #100	; 0x64
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e1fb      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a54:	4b83      	ldr	r3, [pc, #524]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x76>
 8005a60:	e014      	b.n	8005a8c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fd faed 	bl	8003040 <HAL_GetTick>
 8005a66:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a6a:	f7fd fae9 	bl	8003040 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b64      	cmp	r3, #100	; 0x64
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1e7      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x9e>
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d077      	beq.n	8005b88 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a98:	4b72      	ldr	r3, [pc, #456]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa4:	4b6f      	ldr	r3, [pc, #444]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d126      	bne.n	8005afe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab0:	4b6c      	ldr	r3, [pc, #432]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d120      	bne.n	8005afe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abc:	4b69      	ldr	r3, [pc, #420]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x108>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e1bb      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad4:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	21f8      	movs	r1, #248	; 0xf8
 8005ae2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	fa91 f1a1 	rbit	r1, r1
 8005aea:	6179      	str	r1, [r7, #20]
  return result;
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	fab1 f181 	clz	r1, r1
 8005af2:	b2c9      	uxtb	r1, r1
 8005af4:	408b      	lsls	r3, r1
 8005af6:	495b      	ldr	r1, [pc, #364]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afc:	e044      	b.n	8005b88 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02a      	beq.n	8005b5c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b06:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <HAL_RCC_OscConfig+0x2a0>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fd fa98 	bl	8003040 <HAL_GetTick>
 8005b10:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fd fa94 	bl	8003040 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e192      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	4b4c      	ldr	r3, [pc, #304]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	21f8      	movs	r1, #248	; 0xf8
 8005b40:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	6939      	ldr	r1, [r7, #16]
 8005b44:	fa91 f1a1 	rbit	r1, r1
 8005b48:	60f9      	str	r1, [r7, #12]
  return result;
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	fab1 f181 	clz	r1, r1
 8005b50:	b2c9      	uxtb	r1, r1
 8005b52:	408b      	lsls	r3, r1
 8005b54:	4943      	ldr	r1, [pc, #268]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]
 8005b5a:	e015      	b.n	8005b88 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b5c:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_OscConfig+0x2a0>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fd fa6d 	bl	8003040 <HAL_GetTick>
 8005b66:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6a:	f7fd fa69 	bl	8003040 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e167      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d030      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x2a4>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba2:	f7fd fa4d 	bl	8003040 <HAL_GetTick>
 8005ba6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005baa:	f7fd fa49 	bl	8003040 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e147      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bbc:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x1de>
 8005bc8:	e015      	b.n	8005bf6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bca:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <HAL_RCC_OscConfig+0x2a4>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd0:	f7fd fa36 	bl	8003040 <HAL_GetTick>
 8005bd4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fd fa32 	bl	8003040 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e130      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8087 	beq.w	8005d12 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0a:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d110      	bne.n	8005c38 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6413      	str	r3, [r2, #64]	; 0x40
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_RCC_OscConfig+0x298>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <HAL_RCC_OscConfig+0x2a8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <HAL_RCC_OscConfig+0x2a8>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c42:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_OscConfig+0x2a8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d122      	bne.n	8005c96 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <HAL_RCC_OscConfig+0x2a8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <HAL_RCC_OscConfig+0x2a8>)
 8005c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c5c:	f7fd f9f0 	bl	8003040 <HAL_GetTick>
 8005c60:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c62:	e012      	b.n	8005c8a <HAL_RCC_OscConfig+0x2be>
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40023802 	.word	0x40023802
 8005c6c:	42470000 	.word	0x42470000
 8005c70:	42470e80 	.word	0x42470e80
 8005c74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fd f9e2 	bl	8003040 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0e0      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8a:	4b72      	ldr	r3, [pc, #456]	; (8005e54 <HAL_RCC_OscConfig+0x488>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	4b6f      	ldr	r3, [pc, #444]	; (8005e58 <HAL_RCC_OscConfig+0x48c>)
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca8:	f7fd f9ca 	bl	8003040 <HAL_GetTick>
 8005cac:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb0:	f7fd f9c6 	bl	8003040 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0c2      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0ee      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x2e4>
 8005cd2:	e014      	b.n	8005cfe <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd4:	f7fd f9b4 	bl	8003040 <HAL_GetTick>
 8005cd8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cdc:	f7fd f9b0 	bl	8003040 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e0ac      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf2:	4b5a      	ldr	r3, [pc, #360]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1ee      	bne.n	8005cdc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a54      	ldr	r2, [pc, #336]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8097 	beq.w	8005e4a <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 030c 	and.w	r3, r3, #12
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d061      	beq.n	8005dec <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d146      	bne.n	8005dbe <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <HAL_RCC_OscConfig+0x494>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fd f983 	bl	8003040 <HAL_GetTick>
 8005d3a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd f97f 	bl	8003040 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b64      	cmp	r3, #100	; 0x64
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e07d      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	4b42      	ldr	r3, [pc, #264]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4b40      	ldr	r3, [pc, #256]	; (8005e64 <HAL_RCC_OscConfig+0x498>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	69d1      	ldr	r1, [r2, #28]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6a12      	ldr	r2, [r2, #32]
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d72:	0192      	lsls	r2, r2, #6
 8005d74:	4311      	orrs	r1, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d7a:	0612      	lsls	r2, r2, #24
 8005d7c:	4311      	orrs	r1, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0412      	lsls	r2, r2, #16
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	4934      	ldr	r1, [pc, #208]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d90:	4b33      	ldr	r3, [pc, #204]	; (8005e60 <HAL_RCC_OscConfig+0x494>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d96:	f7fd f953 	bl	8003040 <HAL_GetTick>
 8005d9a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9e:	f7fd f94f 	bl	8003040 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b64      	cmp	r3, #100	; 0x64
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e04d      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x3d2>
 8005dbc:	e045      	b.n	8005e4a <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbe:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <HAL_RCC_OscConfig+0x494>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fd f93c 	bl	8003040 <HAL_GetTick>
 8005dc8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dcc:	f7fd f938 	bl	8003040 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e036      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	4b1f      	ldr	r3, [pc, #124]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x400>
 8005dea:	e02e      	b.n	8005e4a <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e029      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCC_OscConfig+0x490>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d11c      	bne.n	8005e46 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d115      	bne.n	8005e46 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	099b      	lsrs	r3, r3, #6
 8005e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d10d      	bne.n	8005e46 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d106      	bne.n	8005e46 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3728      	adds	r7, #40	; 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40007000 	.word	0x40007000
 8005e58:	40023870 	.word	0x40023870
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	42470060 	.word	0x42470060
 8005e64:	f0bc8000 	.word	0xf0bc8000

08005e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0d2      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90c      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b68      	ldr	r3, [pc, #416]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b66      	ldr	r3, [pc, #408]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0be      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ebc:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a5b      	ldr	r2, [pc, #364]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005ed4:	4b56      	ldr	r3, [pc, #344]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4a55      	ldr	r2, [pc, #340]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4950      	ldr	r1, [pc, #320]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d040      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b4a      	ldr	r3, [pc, #296]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d115      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e085      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1e:	4b44      	ldr	r3, [pc, #272]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e079      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e071      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 0203 	bic.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4939      	ldr	r1, [pc, #228]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f50:	f7fd f876 	bl	8003040 <HAL_GetTick>
 8005f54:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fd f872 	bl	8003040 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e059      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	4b30      	ldr	r3, [pc, #192]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 020c 	and.w	r2, r3, #12
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1eb      	bne.n	8005f58 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f80:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d20c      	bcs.n	8005fa8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b27      	ldr	r3, [pc, #156]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f96:	4b25      	ldr	r3, [pc, #148]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e03c      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	491b      	ldr	r1, [pc, #108]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fd2:	4b17      	ldr	r3, [pc, #92]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4913      	ldr	r1, [pc, #76]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005fe6:	f000 f82b 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8005fea:	4601      	mov	r1, r0
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff4:	22f0      	movs	r2, #240	; 0xf0
 8005ff6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	fa92 f2a2 	rbit	r2, r2
 8005ffe:	60fa      	str	r2, [r7, #12]
  return result;
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	fab2 f282 	clz	r2, r2
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	40d3      	lsrs	r3, r2
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <HAL_RCC_ClockConfig+0x1cc>)
 800600c:	5cd3      	ldrb	r3, [r2, r3]
 800600e:	fa21 f303 	lsr.w	r3, r1, r3
 8006012:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_RCC_ClockConfig+0x1d0>)
 8006014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_RCC_ClockConfig+0x1d4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc ffce 	bl	8002fbc <HAL_InitTick>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40023c00 	.word	0x40023c00
 8006030:	40023800 	.word	0x40023800
 8006034:	0800f894 	.word	0x0800f894
 8006038:	20000000 	.word	0x20000000
 800603c:	20000088 	.word	0x20000088

08006040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006044:	b090      	sub	sp, #64	; 0x40
 8006046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006050:	2300      	movs	r3, #0
 8006052:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 030c 	and.w	r3, r3, #12
 8006060:	2b08      	cmp	r3, #8
 8006062:	d00d      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0x40>
 8006064:	2b08      	cmp	r3, #8
 8006066:	f200 80a2 	bhi.w	80061ae <HAL_RCC_GetSysClockFreq+0x16e>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x34>
 800606e:	2b04      	cmp	r3, #4
 8006070:	d003      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x3a>
 8006072:	e09c      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006078:	e09c      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800607a:	4b53      	ldr	r3, [pc, #332]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800607e:	e099      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006080:	4b4f      	ldr	r3, [pc, #316]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800608a:	4b4d      	ldr	r3, [pc, #308]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d027      	beq.n	80060e6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	099b      	lsrs	r3, r3, #6
 800609c:	2200      	movs	r2, #0
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	627a      	str	r2, [r7, #36]	; 0x24
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060a8:	2100      	movs	r1, #0
 80060aa:	4b47      	ldr	r3, [pc, #284]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060ac:	fb03 f201 	mul.w	r2, r3, r1
 80060b0:	2300      	movs	r3, #0
 80060b2:	fb00 f303 	mul.w	r3, r0, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	4a43      	ldr	r2, [pc, #268]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80060ba:	fba0 2102 	umull	r2, r1, r0, r2
 80060be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80060c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c4:	4413      	add	r3, r2
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	2200      	movs	r2, #0
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	61fa      	str	r2, [r7, #28]
 80060d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060d8:	f7fa fe18 	bl	8000d0c <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e4:	e055      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e6:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	099b      	lsrs	r3, r3, #6
 80060ec:	2200      	movs	r2, #0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	617a      	str	r2, [r7, #20]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060f8:	f04f 0b00 	mov.w	fp, #0
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	f04f 0000 	mov.w	r0, #0
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	0159      	lsls	r1, r3, #5
 800610a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610e:	0150      	lsls	r0, r2, #5
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	ebb2 080a 	subs.w	r8, r2, sl
 8006118:	eb63 090b 	sbc.w	r9, r3, fp
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006128:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800612c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006130:	ebb2 0408 	subs.w	r4, r2, r8
 8006134:	eb63 0509 	sbc.w	r5, r3, r9
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	00eb      	lsls	r3, r5, #3
 8006142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006146:	00e2      	lsls	r2, r4, #3
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	eb14 030a 	adds.w	r3, r4, sl
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	eb45 030b 	adc.w	r3, r5, fp
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006164:	4629      	mov	r1, r5
 8006166:	028b      	lsls	r3, r1, #10
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	4604      	mov	r4, r0
 800616e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006172:	4601      	mov	r1, r0
 8006174:	028a      	lsls	r2, r1, #10
 8006176:	4610      	mov	r0, r2
 8006178:	4619      	mov	r1, r3
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	2200      	movs	r2, #0
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	60fa      	str	r2, [r7, #12]
 8006182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006186:	f7fa fdc1 	bl	8000d0c <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4613      	mov	r3, r2
 8006190:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	3301      	adds	r3, #1
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061ac:	e002      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3740      	adds	r7, #64	; 0x40
 80061ba:	46bd      	mov	sp, r7
 80061bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c0:	40023800 	.word	0x40023800
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	017d7840 	.word	0x017d7840

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d0:	4b02      	ldr	r3, [pc, #8]	; (80061dc <HAL_RCC_GetHCLKFreq+0x10>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	20000000 	.word	0x20000000

080061e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80061e6:	f7ff fff1 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80061ea:	4601      	mov	r1, r0
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80061f4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80061f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	fa92 f2a2 	rbit	r2, r2
 8006200:	603a      	str	r2, [r7, #0]
  return result;
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	fab2 f282 	clz	r2, r2
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	40d3      	lsrs	r3, r2
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <HAL_RCC_GetPCLK1Freq+0x40>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40023800 	.word	0x40023800
 8006220:	0800f8a4 	.word	0x0800f8a4

08006224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800622a:	f7ff ffcf 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 800622e:	4601      	mov	r1, r0
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006238:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800623c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	fa92 f2a2 	rbit	r2, r2
 8006244:	603a      	str	r2, [r7, #0]
  return result;
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	fab2 f282 	clz	r2, r2
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	40d3      	lsrs	r3, r2
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	0800f8a4 	.word	0x0800f8a4

08006268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e03f      	b.n	80062fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fc fdb8 	bl	8002e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	; 0x24
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fda7 	bl	8006e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e021      	b.n	8006358 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fc fded 	bl	8002f0c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b20      	cmp	r3, #32
 800637e:	d17c      	bne.n	800647a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_UART_Transmit+0x2c>
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e075      	b.n	800647c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_UART_Transmit+0x3e>
 800639a:	2302      	movs	r3, #2
 800639c:	e06e      	b.n	800647c <HAL_UART_Transmit+0x11c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2221      	movs	r2, #33	; 0x21
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b4:	f7fc fe44 	bl	8003040 <HAL_GetTick>
 80063b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d108      	bne.n	80063e2 <HAL_UART_Transmit+0x82>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e003      	b.n	80063ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063f2:	e02a      	b.n	800644a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2200      	movs	r2, #0
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fae9 	bl	80069d6 <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e036      	b.n	800647c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006422:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	3302      	adds	r3, #2
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e007      	b.n	800643c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	781a      	ldrb	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1cf      	bne.n	80063f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fab9 	bl	80069d6 <UART_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e006      	b.n	800647c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b20      	cmp	r3, #32
 800649c:	d11d      	bne.n	80064da <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_Receive_DMA+0x26>
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e016      	b.n	80064dc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Receive_DMA+0x38>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e00f      	b.n	80064dc <HAL_UART_Receive_DMA+0x58>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	461a      	mov	r2, r3
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 facb 	bl	8006a6c <UART_Start_Receive_DMA>
 80064d6:	4603      	mov	r3, r0
 80064d8:	e000      	b.n	80064dc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064da:	2302      	movs	r3, #2
  }
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x52>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fbbc 	bl	8006cac <UART_Receive_IT>
      return;
 8006534:	e17c      	b.n	8006830 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80b1 	beq.w	80066a0 <HAL_UART_IRQHandler+0x1bc>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <HAL_UART_IRQHandler+0x70>
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80a6 	beq.w	80066a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_UART_IRQHandler+0x90>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f043 0201 	orr.w	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_UART_IRQHandler+0xb0>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0202 	orr.w	r2, r3, #2
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd0>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f043 0204 	orr.w	r2, r3, #4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <HAL_UART_IRQHandler+0xfa>
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_UART_IRQHandler+0xee>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0208 	orr.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 811f 	beq.w	8006826 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_UART_IRQHandler+0x11e>
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb55 	bl	8006cac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <HAL_UART_IRQHandler+0x146>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d031      	beq.n	800668e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa97 	bl	8006b5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d123      	bne.n	8006686 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	4a77      	ldr	r2, [pc, #476]	; (8006838 <HAL_UART_IRQHandler+0x354>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd f82e 	bl	80036c4 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00e      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc fbb7 	bl	8002df2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00a      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc fbb3 	bl	8002df2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e006      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fc fbaf 	bl	8002df2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800669a:	e0c4      	b.n	8006826 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e0c2      	b.n	8006826 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	f040 80a2 	bne.w	80067ee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 809c 	beq.w	80067ee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8096 	beq.w	80067ee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d14f      	bne.n	8006786 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066f0:	8a3b      	ldrh	r3, [r7, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8099 	beq.w	800682a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066fc:	8a3a      	ldrh	r2, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	f080 8093 	bcs.w	800682a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8a3a      	ldrh	r2, [r7, #16]
 8006708:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006714:	d02b      	beq.n	800676e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006724:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006744:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0210 	bic.w	r2, r2, #16
 8006762:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	4618      	mov	r0, r3
 800676a:	f7fc ff3b 	bl	80035e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006776:	b29b      	uxth	r3, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	b29b      	uxth	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f86e 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006784:	e051      	b.n	800682a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d047      	beq.n	800682e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800679e:	8a7b      	ldrh	r3, [r7, #18]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d044      	beq.n	800682e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0210 	bic.w	r2, r2, #16
 80067e0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e2:	8a7b      	ldrh	r3, [r7, #18]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f83a 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067ec:	e01f      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_UART_IRQHandler+0x326>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9eb 	bl	8006bde <UART_Transmit_IT>
    return;
 8006808:	e012      	b.n	8006830 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <HAL_UART_IRQHandler+0x34c>
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa2c 	bl	8006c7c <UART_EndTransmit_IT>
    return;
 8006824:	e004      	b.n	8006830 <HAL_UART_IRQHandler+0x34c>
    return;
 8006826:	bf00      	nop
 8006828:	e002      	b.n	8006830 <HAL_UART_IRQHandler+0x34c>
      return;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <HAL_UART_IRQHandler+0x34c>
      return;
 800682e:	bf00      	nop
  }
}
 8006830:	3728      	adds	r7, #40	; 0x28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	08006bb7 	.word	0x08006bb7

0800683c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d12a      	bne.n	80068e8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695a      	ldr	r2, [r3, #20]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0210 	bic.w	r2, r2, #16
 80068e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d106      	bne.n	80068fe <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068f4:	4619      	mov	r1, r3
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff ffb2 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068fc:	e002      	b.n	8006904 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7fc fa6e 	bl	8002de0 <HAL_UART_RxCpltCallback>
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	2b01      	cmp	r3, #1
 8006920:	d108      	bne.n	8006934 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff97 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006932:	e002      	b.n	800693a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ff8a 	bl	800684e <HAL_UART_RxHalfCpltCallback>
}
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b80      	cmp	r3, #128	; 0x80
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b21      	cmp	r3, #33	; 0x21
 8006974:	d108      	bne.n	8006988 <UART_DMAError+0x46>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006982:	68b8      	ldr	r0, [r7, #8]
 8006984:	f000 f8d6 	bl	8006b34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b22      	cmp	r3, #34	; 0x22
 80069a8:	d108      	bne.n	80069bc <UART_DMAError+0x7a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069b6:	68b8      	ldr	r0, [r7, #8]
 80069b8:	f000 f8d1 	bl	8006b5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	f043 0210 	orr.w	r2, r3, #16
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c8:	68b8      	ldr	r0, [r7, #8]
 80069ca:	f7fc fa12 	bl	8002df2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	4613      	mov	r3, r2
 80069e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e6:	e02c      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ee:	d028      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f6:	f7fc fb23 	bl	8003040 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d21d      	bcs.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e00f      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d0c3      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2222      	movs	r2, #34	; 0x22
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	4a23      	ldr	r2, [pc, #140]	; (8006b28 <UART_Start_Receive_DMA+0xbc>)
 8006a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <UART_Start_Receive_DMA+0xc0>)
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <UART_Start_Receive_DMA+0xc4>)
 8006aaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f7fc fd32 	bl	8003534 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006afc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695a      	ldr	r2, [r3, #20]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08006877 	.word	0x08006877
 8006b2c:	0800690d 	.word	0x0800690d
 8006b30:	08006943 	.word	0x08006943

08006b34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b4a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d107      	bne.n	8006b9e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0210 	bic.w	r2, r2, #16
 8006b9c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7fc f90e 	bl	8002df2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b21      	cmp	r3, #33	; 0x21
 8006bf0:	d13e      	bne.n	8006c70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	d114      	bne.n	8006c26 <UART_Transmit_IT+0x48>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d110      	bne.n	8006c26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]
 8006c24:	e008      	b.n	8006c38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6211      	str	r1, [r2, #32]
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	4619      	mov	r1, r3
 8006c46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10f      	bne.n	8006c6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff fdcd 	bl	800683c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b22      	cmp	r3, #34	; 0x22
 8006cbe:	f040 8099 	bne.w	8006df4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d117      	bne.n	8006cfc <UART_Receive_IT+0x50>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d113      	bne.n	8006cfc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	1c9a      	adds	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8006cfa:	e026      	b.n	8006d4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	d007      	beq.n	8006d20 <UART_Receive_IT+0x74>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <UART_Receive_IT+0x82>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e008      	b.n	8006d40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4619      	mov	r1, r3
 8006d58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d148      	bne.n	8006df0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0220 	bic.w	r2, r2, #32
 8006d6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d123      	bne.n	8006de6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0210 	bic.w	r2, r2, #16
 8006db2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d10a      	bne.n	8006dd8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fd3e 	bl	8006860 <HAL_UARTEx_RxEventCallback>
 8006de4:	e002      	b.n	8006dec <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fb fffa 	bl	8002de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e002      	b.n	8006df6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e40:	f023 030c 	bic.w	r3, r3, #12
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a57      	ldr	r2, [pc, #348]	; (8006fc8 <UART_SetConfig+0x1c8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <UART_SetConfig+0x78>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a56      	ldr	r2, [pc, #344]	; (8006fcc <UART_SetConfig+0x1cc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d103      	bne.n	8006e80 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e78:	f7ff f9d4 	bl	8006224 <HAL_RCC_GetPCLK2Freq>
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	e002      	b.n	8006e86 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e80:	f7ff f9ae 	bl	80061e0 <HAL_RCC_GetPCLK1Freq>
 8006e84:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8e:	d14c      	bne.n	8006f2a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009a      	lsls	r2, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea6:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	0119      	lsls	r1, r3, #4
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009a      	lsls	r2, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ec6:	4b42      	ldr	r3, [pc, #264]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006ec8:	fba3 0302 	umull	r0, r3, r3, r2
 8006ecc:	095b      	lsrs	r3, r3, #5
 8006ece:	2064      	movs	r0, #100	; 0x64
 8006ed0:	fb00 f303 	mul.w	r3, r0, r3
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	3332      	adds	r3, #50	; 0x32
 8006eda:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	095b      	lsrs	r3, r3, #5
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ee8:	4419      	add	r1, r3
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009a      	lsls	r2, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f02:	fba3 0302 	umull	r0, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2064      	movs	r0, #100	; 0x64
 8006f0a:	fb00 f303 	mul.w	r3, r0, r3
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	3332      	adds	r3, #50	; 0x32
 8006f14:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	f003 0207 	and.w	r2, r3, #7
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	440a      	add	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f28:	e04a      	b.n	8006fc0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009a      	lsls	r2, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	0119      	lsls	r1, r3, #4
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009a      	lsls	r2, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f60:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f62:	fba3 0302 	umull	r0, r3, r3, r2
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2064      	movs	r0, #100	; 0x64
 8006f6a:	fb00 f303 	mul.w	r3, r0, r3
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	3332      	adds	r3, #50	; 0x32
 8006f74:	4a16      	ldr	r2, [pc, #88]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f76:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f80:	4419      	add	r1, r3
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009a      	lsls	r2, r3, #2
 8006f8c:	441a      	add	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2064      	movs	r0, #100	; 0x64
 8006fa2:	fb00 f303 	mul.w	r3, r0, r3
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	3332      	adds	r3, #50	; 0x32
 8006fac:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <UART_SetConfig+0x1d0>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40011000 	.word	0x40011000
 8006fcc:	40011400 	.word	0x40011400
 8006fd0:	51eb851f 	.word	0x51eb851f

08006fd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	f107 001c 	add.w	r0, r7, #28
 8006fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d122      	bne.n	8007032 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d105      	bne.n	8007026 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fafa 	bl	8008620 <USB_CoreReset>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
 8007030:	e010      	b.n	8007054 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 faee 	bl	8008620 <USB_CoreReset>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10b      	bne.n	8007072 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f043 0206 	orr.w	r2, r3, #6
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800707e:	b004      	add	sp, #16
 8007080:	4770      	bx	lr
	...

08007084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d165      	bne.n	8007164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <USB_SetTurnaroundTime+0x11c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d906      	bls.n	80070ae <USB_SetTurnaroundTime+0x2a>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <USB_SetTurnaroundTime+0x120>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d202      	bcs.n	80070ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070a8:	230f      	movs	r3, #15
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e062      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a3c      	ldr	r2, [pc, #240]	; (80071a4 <USB_SetTurnaroundTime+0x120>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d306      	bcc.n	80070c4 <USB_SetTurnaroundTime+0x40>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4a3b      	ldr	r2, [pc, #236]	; (80071a8 <USB_SetTurnaroundTime+0x124>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d202      	bcs.n	80070c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070be:	230e      	movs	r3, #14
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e057      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <USB_SetTurnaroundTime+0x124>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d306      	bcc.n	80070da <USB_SetTurnaroundTime+0x56>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a37      	ldr	r2, [pc, #220]	; (80071ac <USB_SetTurnaroundTime+0x128>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d202      	bcs.n	80070da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070d4:	230d      	movs	r3, #13
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e04c      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a33      	ldr	r2, [pc, #204]	; (80071ac <USB_SetTurnaroundTime+0x128>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d306      	bcc.n	80070f0 <USB_SetTurnaroundTime+0x6c>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <USB_SetTurnaroundTime+0x12c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d802      	bhi.n	80070f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070ea:	230c      	movs	r3, #12
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e041      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a2f      	ldr	r2, [pc, #188]	; (80071b0 <USB_SetTurnaroundTime+0x12c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d906      	bls.n	8007106 <USB_SetTurnaroundTime+0x82>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <USB_SetTurnaroundTime+0x130>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d802      	bhi.n	8007106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007100:	230b      	movs	r3, #11
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e036      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <USB_SetTurnaroundTime+0x130>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d906      	bls.n	800711c <USB_SetTurnaroundTime+0x98>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <USB_SetTurnaroundTime+0x134>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d802      	bhi.n	800711c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007116:	230a      	movs	r3, #10
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e02b      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <USB_SetTurnaroundTime+0x134>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d906      	bls.n	8007132 <USB_SetTurnaroundTime+0xae>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <USB_SetTurnaroundTime+0x138>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d202      	bcs.n	8007132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800712c:	2309      	movs	r3, #9
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e020      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a21      	ldr	r2, [pc, #132]	; (80071bc <USB_SetTurnaroundTime+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d306      	bcc.n	8007148 <USB_SetTurnaroundTime+0xc4>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <USB_SetTurnaroundTime+0x13c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d802      	bhi.n	8007148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007142:	2308      	movs	r3, #8
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e015      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <USB_SetTurnaroundTime+0x13c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d906      	bls.n	800715e <USB_SetTurnaroundTime+0xda>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <USB_SetTurnaroundTime+0x140>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d202      	bcs.n	800715e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007158:	2307      	movs	r3, #7
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e00a      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800715e:	2306      	movs	r3, #6
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e007      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800716a:	2309      	movs	r3, #9
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e001      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007170:	2309      	movs	r3, #9
 8007172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	00d8acbf 	.word	0x00d8acbf
 80071a4:	00e4e1c0 	.word	0x00e4e1c0
 80071a8:	00f42400 	.word	0x00f42400
 80071ac:	01067380 	.word	0x01067380
 80071b0:	011a499f 	.word	0x011a499f
 80071b4:	01312cff 	.word	0x01312cff
 80071b8:	014ca43f 	.word	0x014ca43f
 80071bc:	016e3600 	.word	0x016e3600
 80071c0:	01a6ab1f 	.word	0x01a6ab1f
 80071c4:	01e84800 	.word	0x01e84800

080071c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 0201 	bic.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d115      	bne.n	8007256 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007236:	2001      	movs	r0, #1
 8007238:	f7fb ff0c 	bl	8003054 <HAL_Delay>
      ms++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 f961 	bl	800850a <USB_GetMode>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d01e      	beq.n	800728c <USB_SetCurrentMode+0x84>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b31      	cmp	r3, #49	; 0x31
 8007252:	d9f0      	bls.n	8007236 <USB_SetCurrentMode+0x2e>
 8007254:	e01a      	b.n	800728c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d115      	bne.n	8007288 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007268:	2001      	movs	r0, #1
 800726a:	f7fb fef3 	bl	8003054 <HAL_Delay>
      ms++;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f948 	bl	800850a <USB_GetMode>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <USB_SetCurrentMode+0x84>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b31      	cmp	r3, #49	; 0x31
 8007284:	d9f0      	bls.n	8007268 <USB_SetCurrentMode+0x60>
 8007286:	e001      	b.n	800728c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e005      	b.n	8007298 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b32      	cmp	r3, #50	; 0x32
 8007290:	d101      	bne.n	8007296 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a0:	b084      	sub	sp, #16
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	e009      	b.n	80072d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3340      	adds	r3, #64	; 0x40
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3301      	adds	r3, #1
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b0e      	cmp	r3, #14
 80072d8:	d9f2      	bls.n	80072c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11c      	bne.n	800731a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f043 0302 	orr.w	r3, r3, #2
 80072f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
 8007318:	e00b      	b.n	8007332 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007338:	461a      	mov	r2, r3
 800733a:	2300      	movs	r3, #0
 800733c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	4619      	mov	r1, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734c:	461a      	mov	r2, r3
 800734e:	680b      	ldr	r3, [r1, #0]
 8007350:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10c      	bne.n	8007372 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f945 	bl	80075f0 <USB_SetDevSpeed>
 8007366:	e008      	b.n	800737a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007368:	2101      	movs	r1, #1
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f940 	bl	80075f0 <USB_SetDevSpeed>
 8007370:	e003      	b.n	800737a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007372:	2103      	movs	r1, #3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f93b 	bl	80075f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800737a:	2110      	movs	r1, #16
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f8f3 	bl	8007568 <USB_FlushTxFifo>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f90f 	bl	80075b0 <USB_FlushRxFifo>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a2:	461a      	mov	r2, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	461a      	mov	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	e043      	b.n	800744e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073dc:	d118      	bne.n	8007410 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	461a      	mov	r2, r3
 80073f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e013      	b.n	8007422 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007406:	461a      	mov	r2, r3
 8007408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e008      	b.n	8007422 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007440:	461a      	mov	r2, r3
 8007442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3301      	adds	r3, #1
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	429a      	cmp	r2, r3
 8007454:	d3b7      	bcc.n	80073c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	e043      	b.n	80074e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800746e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007472:	d118      	bne.n	80074a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	e013      	b.n	80074b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749c:	461a      	mov	r2, r3
 800749e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e008      	b.n	80074b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b2:	461a      	mov	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	461a      	mov	r2, r3
 80074c6:	2300      	movs	r3, #0
 80074c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	461a      	mov	r2, r3
 80074d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3301      	adds	r3, #1
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3b7      	bcc.n	800745c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800750c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f043 0210 	orr.w	r2, r3, #16
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <USB_DevInit+0x2c4>)
 8007526:	4313      	orrs	r3, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f043 0208 	orr.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800753e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d107      	bne.n	8007554 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800754c:	f043 0304 	orr.w	r3, r3, #4
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007560:	b004      	add	sp, #16
 8007562:	4770      	bx	lr
 8007564:	803c3800 	.word	0x803c3800

08007568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	019b      	lsls	r3, r3, #6
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4a08      	ldr	r2, [pc, #32]	; (80075ac <USB_FlushTxFifo+0x44>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e006      	b.n	80075a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b20      	cmp	r3, #32
 800759e:	d0f0      	beq.n	8007582 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr
 80075ac:	00030d40 	.word	0x00030d40

080075b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2210      	movs	r2, #16
 80075c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a08      	ldr	r2, [pc, #32]	; (80075ec <USB_FlushRxFifo+0x3c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d901      	bls.n	80075d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e006      	b.n	80075e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d0f0      	beq.n	80075c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	00030d40 	.word	0x00030d40

080075f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007610:	4313      	orrs	r3, r2
 8007612:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr

08007620 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0306 	and.w	r3, r3, #6
 8007638:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007640:	2300      	movs	r3, #0
 8007642:	75fb      	strb	r3, [r7, #23]
 8007644:	e00a      	b.n	800765c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d002      	beq.n	8007652 <USB_GetDevSpeed+0x32>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b06      	cmp	r3, #6
 8007650:	d102      	bne.n	8007658 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007652:	2302      	movs	r3, #2
 8007654:	75fb      	strb	r3, [r7, #23]
 8007656:	e001      	b.n	800765c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007658:	230f      	movs	r3, #15
 800765a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d13a      	bne.n	80076fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	2101      	movs	r1, #1
 8007696:	fa01 f303 	lsl.w	r3, r1, r3
 800769a:	b29b      	uxth	r3, r3
 800769c:	68f9      	ldr	r1, [r7, #12]
 800769e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d155      	bne.n	8007768 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	78db      	ldrb	r3, [r3, #3]
 80076d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	059b      	lsls	r3, r3, #22
 80076de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076e0:	4313      	orrs	r3, r2
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	e036      	b.n	8007768 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007700:	69da      	ldr	r2, [r3, #28]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	2101      	movs	r1, #1
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007718:	4313      	orrs	r3, r2
 800771a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11a      	bne.n	8007768 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	78db      	ldrb	r3, [r3, #3]
 800774c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800774e:	430b      	orrs	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007766:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d161      	bne.n	8007854 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077a6:	d11f      	bne.n	80077e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	2101      	movs	r1, #1
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	b29b      	uxth	r3, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007808:	4013      	ands	r3, r2
 800780a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	2101      	movs	r1, #1
 800781e:	fa01 f303 	lsl.w	r3, r1, r3
 8007822:	b29b      	uxth	r3, r3
 8007824:	43db      	mvns	r3, r3
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800782c:	4013      	ands	r3, r2
 800782e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	0159      	lsls	r1, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	440b      	add	r3, r1
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	4619      	mov	r1, r3
 800784c:	4b35      	ldr	r3, [pc, #212]	; (8007924 <USB_DeactivateEndpoint+0x1b0>)
 800784e:	4013      	ands	r3, r2
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	e060      	b.n	8007916 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786a:	d11f      	bne.n	80078ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800788a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	2101      	movs	r1, #1
 80078be:	fa01 f303 	lsl.w	r3, r1, r3
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	43db      	mvns	r3, r3
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078cc:	4013      	ands	r3, r2
 80078ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	2101      	movs	r1, #1
 80078e2:	fa01 f303 	lsl.w	r3, r1, r3
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	43db      	mvns	r3, r3
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f0:	4013      	ands	r3, r2
 80078f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	0159      	lsls	r1, r3, #5
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	440b      	add	r3, r1
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	4619      	mov	r1, r3
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <USB_DeactivateEndpoint+0x1b4>)
 8007912:	4013      	ands	r3, r2
 8007914:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	ec337800 	.word	0xec337800
 8007928:	eff37800 	.word	0xeff37800

0800792c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b01      	cmp	r3, #1
 800794a:	f040 815c 	bne.w	8007c06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d132      	bne.n	80079bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	440a      	add	r2, r1
 8007990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b4:	0cdb      	lsrs	r3, r3, #19
 80079b6:	04db      	lsls	r3, r3, #19
 80079b8:	6113      	str	r3, [r2, #16]
 80079ba:	e074      	b.n	8007aa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d6:	0cdb      	lsrs	r3, r3, #19
 80079d8:	04db      	lsls	r3, r3, #19
 80079da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6959      	ldr	r1, [r3, #20]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	440b      	add	r3, r1
 8007a18:	1e59      	subs	r1, r3, #1
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a24:	4b9d      	ldr	r3, [pc, #628]	; (8007c9c <USB_EPStartXfer+0x370>)
 8007a26:	400b      	ands	r3, r1
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	0148      	lsls	r0, r1, #5
 8007a2c:	69f9      	ldr	r1, [r7, #28]
 8007a2e:	4401      	add	r1, r0
 8007a30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a34:	4313      	orrs	r3, r2
 8007a36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	0148      	lsls	r0, r1, #5
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	4401      	add	r1, r0
 8007a56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d11f      	bne.n	8007aa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d14b      	bne.n	8007b44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	78db      	ldrb	r3, [r3, #3]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d128      	bne.n	8007b22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d110      	bne.n	8007b02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e00f      	b.n	8007b22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	e12f      	b.n	8007da4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d015      	beq.n	8007b98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8117 	beq.w	8007da4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	2101      	movs	r1, #1
 8007b88:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b92:	4313      	orrs	r3, r2
 8007b94:	634b      	str	r3, [r1, #52]	; 0x34
 8007b96:	e105      	b.n	8007da4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d110      	bne.n	8007bca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	e00f      	b.n	8007bea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	68d9      	ldr	r1, [r3, #12]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	b298      	uxth	r0, r3
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fa2a 	bl	8008058 <USB_WritePacket>
 8007c04:	e0ce      	b.n	8007da4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c20:	0cdb      	lsrs	r3, r3, #19
 8007c22:	04db      	lsls	r3, r3, #19
 8007c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d126      	bne.n	8007ca0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c68:	69b9      	ldr	r1, [r7, #24]
 8007c6a:	0148      	lsls	r0, r1, #5
 8007c6c:	69f9      	ldr	r1, [r7, #28]
 8007c6e:	4401      	add	r1, r0
 8007c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c74:	4313      	orrs	r3, r2
 8007c76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c96:	6113      	str	r3, [r2, #16]
 8007c98:	e036      	b.n	8007d08 <USB_EPStartXfer+0x3dc>
 8007c9a:	bf00      	nop
 8007c9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	695a      	ldr	r2, [r3, #20]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4413      	add	r3, r2
 8007caa:	1e5a      	subs	r2, r3, #1
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	8afb      	ldrh	r3, [r7, #22]
 8007cc6:	04d9      	lsls	r1, r3, #19
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <USB_EPStartXfer+0x484>)
 8007cca:	400b      	ands	r3, r1
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	0148      	lsls	r0, r1, #5
 8007cd0:	69f9      	ldr	r1, [r7, #28]
 8007cd2:	4401      	add	r1, r0
 8007cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	8af9      	ldrh	r1, [r7, #22]
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	0148      	lsls	r0, r1, #5
 8007cfc:	69f9      	ldr	r1, [r7, #28]
 8007cfe:	4401      	add	r1, r0
 8007d00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d04:	4313      	orrs	r3, r2
 8007d06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d10d      	bne.n	8007d2a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	68d9      	ldr	r1, [r3, #12]
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d26:	460a      	mov	r2, r1
 8007d28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d128      	bne.n	8007d84 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d110      	bne.n	8007d64 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e00f      	b.n	8007d84 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	1ff80000 	.word	0x1ff80000

08007db4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	f040 80cd 	bne.w	8007f70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d132      	bne.n	8007e44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3c:	0cdb      	lsrs	r3, r3, #19
 8007e3e:	04db      	lsls	r3, r3, #19
 8007e40:	6113      	str	r3, [r2, #16]
 8007e42:	e04e      	b.n	8007ee2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5e:	0cdb      	lsrs	r3, r3, #19
 8007e60:	04db      	lsls	r3, r3, #19
 8007e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	695a      	ldr	r2, [r3, #20]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed2:	6939      	ldr	r1, [r7, #16]
 8007ed4:	0148      	lsls	r0, r1, #5
 8007ed6:	6979      	ldr	r1, [r7, #20]
 8007ed8:	4401      	add	r1, r0
 8007eda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d11e      	bne.n	8007f26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	461a      	mov	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	e092      	b.n	800804c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d07e      	beq.n	800804c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	2101      	movs	r1, #1
 8007f60:	fa01 f303 	lsl.w	r3, r1, r3
 8007f64:	6979      	ldr	r1, [r7, #20]
 8007f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8007f6e:	e06d      	b.n	800804c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8a:	0cdb      	lsrs	r3, r3, #19
 8007f8c:	04db      	lsls	r3, r3, #19
 8007f8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ffa:	6939      	ldr	r1, [r7, #16]
 8007ffc:	0148      	lsls	r0, r1, #5
 8007ffe:	6979      	ldr	r1, [r7, #20]
 8008000:	4401      	add	r1, r0
 8008002:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008006:	4313      	orrs	r3, r2
 8008008:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10d      	bne.n	800802c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	68d9      	ldr	r1, [r3, #12]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008028:	460a      	mov	r2, r1
 800802a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800804a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008058:	b480      	push	{r7}
 800805a:	b089      	sub	sp, #36	; 0x24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4611      	mov	r1, r2
 8008064:	461a      	mov	r2, r3
 8008066:	460b      	mov	r3, r1
 8008068:	71fb      	strb	r3, [r7, #7]
 800806a:	4613      	mov	r3, r2
 800806c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d123      	bne.n	80080c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800807e:	88bb      	ldrh	r3, [r7, #4]
 8008080:	3303      	adds	r3, #3
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008086:	2300      	movs	r3, #0
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e018      	b.n	80080be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	031a      	lsls	r2, r3, #12
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4413      	add	r3, r2
 8008094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008098:	461a      	mov	r2, r3
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	3301      	adds	r3, #1
 80080b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3301      	adds	r3, #1
 80080b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3e2      	bcc.n	800808c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3724      	adds	r7, #36	; 0x24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b08b      	sub	sp, #44	; 0x2c
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	089b      	lsrs	r3, r3, #2
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080f8:	2300      	movs	r3, #0
 80080fa:	623b      	str	r3, [r7, #32]
 80080fc:	e014      	b.n	8008128 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	601a      	str	r2, [r3, #0]
    pDest++;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	3301      	adds	r3, #1
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	3301      	adds	r3, #1
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	3301      	adds	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	3301      	adds	r3, #1
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	3301      	adds	r3, #1
 8008126:	623b      	str	r3, [r7, #32]
 8008128:	6a3a      	ldr	r2, [r7, #32]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	429a      	cmp	r2, r3
 800812e:	d3e6      	bcc.n	80080fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008130:	8bfb      	ldrh	r3, [r7, #30]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01e      	beq.n	8008174 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008140:	461a      	mov	r2, r3
 8008142:	f107 0310 	add.w	r3, r7, #16
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	701a      	strb	r2, [r3, #0]
      i++;
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	3301      	adds	r3, #1
 8008160:	623b      	str	r3, [r7, #32]
      pDest++;
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	3301      	adds	r3, #1
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008168:	8bfb      	ldrh	r3, [r7, #30]
 800816a:	3b01      	subs	r3, #1
 800816c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800816e:	8bfb      	ldrh	r3, [r7, #30]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ea      	bne.n	800814a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008176:	4618      	mov	r0, r3
 8008178:	372c      	adds	r7, #44	; 0x2c
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr

08008180 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d12c      	bne.n	80081f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	db12      	blt.n	80081d4 <USB_EPSetStall+0x54>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00f      	beq.n	80081d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e02b      	b.n	800824e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	db12      	blt.n	800822e <USB_EPSetStall+0xae>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00f      	beq.n	800822e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008228:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800822c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800824c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr

0800825a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d128      	bne.n	80082c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d003      	beq.n	80082a6 <USB_EPClearStall+0x4c>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	78db      	ldrb	r3, [r3, #3]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d138      	bne.n	8008318 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	e027      	b.n	8008318 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	0151      	lsls	r1, r2, #5
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	440a      	add	r2, r1
 80082de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d003      	beq.n	80082f8 <USB_EPClearStall+0x9e>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d10f      	bne.n	8008318 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008316:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008342:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008346:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008358:	68f9      	ldr	r1, [r7, #12]
 800835a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800835e:	4313      	orrs	r3, r2
 8008360:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008388:	f023 0303 	bic.w	r3, r3, #3
 800838c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800839c:	f023 0302 	bic.w	r3, r3, #2
 80083a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr

080083ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083c8:	f023 0303 	bic.w	r3, r3, #3
 80083cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083dc:	f043 0302 	orr.w	r3, r3, #2
 80083e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4013      	ands	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008406:	68fb      	ldr	r3, [r7, #12]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	4013      	ands	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	0c1b      	lsrs	r3, r3, #16
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4013      	ands	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	b29b      	uxth	r3, r3
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4013      	ands	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084a4:	68bb      	ldr	r3, [r7, #8]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	01db      	lsls	r3, r3, #7
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4013      	ands	r3, r2
 80084fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084fe:	68bb      	ldr	r3, [r7, #8]
}
 8008500:	4618      	mov	r0, r3
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f003 0301 	and.w	r3, r3, #1
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr

08008524 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008542:	f023 0307 	bic.w	r3, r3, #7
 8008546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr

08008568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	460b      	mov	r3, r1
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	333c      	adds	r3, #60	; 0x3c
 800857e:	3304      	adds	r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4a25      	ldr	r2, [pc, #148]	; (800861c <USB_EP0_OutStart+0xb4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d90a      	bls.n	80085a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800859c:	d101      	bne.n	80085a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e037      	b.n	8008612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d0:	f043 0318 	orr.w	r3, r3, #24
 80085d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10f      	bne.n	8008610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800860e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr
 800861c:	4f54300a 	.word	0x4f54300a

08008620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4a12      	ldr	r2, [pc, #72]	; (8008680 <USB_CoreReset+0x60>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d901      	bls.n	800863e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e01b      	b.n	8008676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	daf2      	bge.n	800862c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f043 0201 	orr.w	r2, r3, #1
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a08      	ldr	r2, [pc, #32]	; (8008680 <USB_CoreReset+0x60>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d0f0      	beq.n	8008656 <USB_CoreReset+0x36>

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr
 8008680:	00030d40 	.word	0x00030d40

08008684 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	7c1b      	ldrb	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d115      	bne.n	80086c8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800869c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a0:	2202      	movs	r2, #2
 80086a2:	2181      	movs	r1, #129	; 0x81
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 f870 	bl	800a78a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b4:	2202      	movs	r2, #2
 80086b6:	2101      	movs	r1, #1
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 f866 	bl	800a78a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80086c6:	e012      	b.n	80086ee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086c8:	2340      	movs	r3, #64	; 0x40
 80086ca:	2202      	movs	r2, #2
 80086cc:	2181      	movs	r1, #129	; 0x81
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f002 f85b 	bl	800a78a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086da:	2340      	movs	r3, #64	; 0x40
 80086dc:	2202      	movs	r2, #2
 80086de:	2101      	movs	r1, #1
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f002 f852 	bl	800a78a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086ee:	2308      	movs	r3, #8
 80086f0:	2203      	movs	r2, #3
 80086f2:	2182      	movs	r1, #130	; 0x82
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f002 f848 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008700:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008704:	f002 f9ca 	bl	800aa9c <malloc>
 8008708:	4603      	mov	r3, r0
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
 8008720:	e026      	b.n	8008770 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7c1b      	ldrb	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008756:	2101      	movs	r1, #1
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f002 f906 	bl	800a96a <USBD_LL_PrepareReceive>
 800875e:	e007      	b.n	8008770 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008766:	2340      	movs	r3, #64	; 0x40
 8008768:	2101      	movs	r1, #1
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 f8fd 	bl	800a96a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800878a:	2181      	movs	r1, #129	; 0x81
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 f822 	bl	800a7d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008798:	2101      	movs	r1, #1
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f002 f81b 	bl	800a7d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087a8:	2182      	movs	r1, #130	; 0x82
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f002 f813 	bl	800a7d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d0:	4618      	mov	r0, r3
 80087d2:	f002 f96b 	bl	800aaac <free>
    pdev->pClassData = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80087de:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800880e:	2b00      	cmp	r3, #0
 8008810:	d039      	beq.n	8008886 <USBD_CDC_Setup+0x9e>
 8008812:	2b20      	cmp	r3, #32
 8008814:	d17f      	bne.n	8008916 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d029      	beq.n	8008872 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b25b      	sxtb	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	da11      	bge.n	800884c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008834:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	88d2      	ldrh	r2, [r2, #6]
 800883a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800883c:	6939      	ldr	r1, [r7, #16]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	461a      	mov	r2, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 fa42 	bl	8009cce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800884a:	e06b      	b.n	8008924 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	785a      	ldrb	r2, [r3, #1]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008862:	6939      	ldr	r1, [r7, #16]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	88db      	ldrh	r3, [r3, #6]
 8008868:	461a      	mov	r2, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fa5d 	bl	8009d2a <USBD_CtlPrepareRx>
      break;
 8008870:	e058      	b.n	8008924 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	7850      	ldrb	r0, [r2, #1]
 800887e:	2200      	movs	r2, #0
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	4798      	blx	r3
      break;
 8008884:	e04e      	b.n	8008924 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b0b      	cmp	r3, #11
 800888c:	d02e      	beq.n	80088ec <USBD_CDC_Setup+0x104>
 800888e:	2b0b      	cmp	r3, #11
 8008890:	dc38      	bgt.n	8008904 <USBD_CDC_Setup+0x11c>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <USBD_CDC_Setup+0xb4>
 8008896:	2b0a      	cmp	r3, #10
 8008898:	d014      	beq.n	80088c4 <USBD_CDC_Setup+0xdc>
 800889a:	e033      	b.n	8008904 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d107      	bne.n	80088b6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	2202      	movs	r2, #2
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fa0d 	bl	8009cce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088b4:	e02e      	b.n	8008914 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 f99e 	bl	8009bfa <USBD_CtlError>
            ret = USBD_FAIL;
 80088be:	2302      	movs	r3, #2
 80088c0:	75fb      	strb	r3, [r7, #23]
          break;
 80088c2:	e027      	b.n	8008914 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d107      	bne.n	80088de <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80088ce:	f107 030f 	add.w	r3, r7, #15
 80088d2:	2201      	movs	r2, #1
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f9f9 	bl	8009cce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088dc:	e01a      	b.n	8008914 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f98a 	bl	8009bfa <USBD_CtlError>
            ret = USBD_FAIL;
 80088e6:	2302      	movs	r3, #2
 80088e8:	75fb      	strb	r3, [r7, #23]
          break;
 80088ea:	e013      	b.n	8008914 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d00d      	beq.n	8008912 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f97e 	bl	8009bfa <USBD_CtlError>
            ret = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008902:	e006      	b.n	8008912 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 f977 	bl	8009bfa <USBD_CtlError>
          ret = USBD_FAIL;
 800890c:	2302      	movs	r3, #2
 800890e:	75fb      	strb	r3, [r7, #23]
          break;
 8008910:	e000      	b.n	8008914 <USBD_CDC_Setup+0x12c>
          break;
 8008912:	bf00      	nop
      }
      break;
 8008914:	e006      	b.n	8008924 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 f96e 	bl	8009bfa <USBD_CtlError>
      ret = USBD_FAIL;
 800891e:	2302      	movs	r3, #2
 8008920:	75fb      	strb	r3, [r7, #23]
      break;
 8008922:	bf00      	nop
  }

  return ret;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008940:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008948:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03a      	beq.n	80089ca <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	331c      	adds	r3, #28
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d029      	beq.n	80089be <USBD_CDC_DataIn+0x90>
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	331c      	adds	r3, #28
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	78f9      	ldrb	r1, [r7, #3]
 800897e:	68b8      	ldr	r0, [r7, #8]
 8008980:	460b      	mov	r3, r1
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	1a5b      	subs	r3, r3, r1
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4403      	add	r3, r0
 800898a:	3344      	adds	r3, #68	; 0x44
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d110      	bne.n	80089be <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800899c:	78fa      	ldrb	r2, [r7, #3]
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	331c      	adds	r3, #28
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089b0:	78f9      	ldrb	r1, [r7, #3]
 80089b2:	2300      	movs	r3, #0
 80089b4:	2200      	movs	r2, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 ffb4 	bl	800a924 <USBD_LL_Transmit>
 80089bc:	e003      	b.n	80089c6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e000      	b.n	80089cc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80089ca:	2302      	movs	r3, #2
  }
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 ffdf 	bl	800a9b0 <USBD_LL_GetRxDataSize>
 80089f2:	4602      	mov	r2, r0
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00d      	beq.n	8008a20 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4798      	blx	r3

    return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e000      	b.n	8008a22 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a20:	2302      	movs	r3, #2
  }
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a38:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d015      	beq.n	8008a70 <USBD_CDC_EP0_RxReady+0x46>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a4a:	2bff      	cmp	r3, #255	; 0xff
 8008a4c:	d010      	beq.n	8008a70 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a64:	b292      	uxth	r2, r2
 8008a66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	22ff      	movs	r2, #255	; 0xff
 8008a6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2243      	movs	r2, #67	; 0x43
 8008a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a8a:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000118 	.word	0x20000118

08008a9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2243      	movs	r2, #67	; 0x43
 8008aa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008aaa:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	200000d4 	.word	0x200000d4

08008abc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2243      	movs	r2, #67	; 0x43
 8008ac8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008aca:	4b03      	ldr	r3, [pc, #12]	; (8008ad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	2000015c 	.word	0x2000015c

08008adc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008aea:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000090 	.word	0x20000090

08008afc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b06:	2302      	movs	r3, #2
 8008b08:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr

08008b28 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b46:	88fa      	ldrh	r2, [r7, #6]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01c      	beq.n	8008bd4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d115      	bne.n	8008bd0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	2181      	movs	r1, #129	; 0x81
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 feac 	bl	800a924 <USBD_LL_Transmit>

      return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e002      	b.n	8008bd6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e000      	b.n	8008bd6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008bd4:	2302      	movs	r3, #2
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d017      	beq.n	8008c28 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7c1b      	ldrb	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d109      	bne.n	8008c14 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 feac 	bl	800a96a <USBD_LL_PrepareReceive>
 8008c12:	e007      	b.n	8008c24 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fea3 	bl	800a96a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e000      	b.n	8008c2a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c28:	2302      	movs	r3, #2
  }
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	e01a      	b.n	8008c80 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	79fa      	ldrb	r2, [r7, #7]
 8008c76:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f001 fd21 	bl	800a6c0 <USBD_LL_Init>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d006      	beq.n	8008caa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
 8008ca8:	e001      	b.n	8008cae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008caa:	2302      	movs	r3, #2
 8008cac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr

08008cba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fd46 	bl	800a754 <USBD_LL_Start>

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr

08008ce6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00c      	beq.n	8008d1a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 ff10 	bl	8009b82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d016      	beq.n	8008db4 <USBD_LL_SetupStage+0x6a>
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d81c      	bhi.n	8008dc4 <USBD_LL_SetupStage+0x7a>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <USBD_LL_SetupStage+0x4a>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d008      	beq.n	8008da4 <USBD_LL_SetupStage+0x5a>
 8008d92:	e017      	b.n	8008dc4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa03 	bl	80091a8 <USBD_StdDevReq>
      break;
 8008da2:	e01a      	b.n	8008dda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa65 	bl	800927c <USBD_StdItfReq>
      break;
 8008db2:	e012      	b.n	8008dda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 faa5 	bl	800930c <USBD_StdEPReq>
      break;
 8008dc2:	e00a      	b.n	8008dda <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fd1e 	bl	800a814 <USBD_LL_StallEP>
      break;
 8008dd8:	bf00      	nop
  }

  return USBD_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d14b      	bne.n	8008e90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dfe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d134      	bne.n	8008e74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d919      	bls.n	8008e4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d203      	bcs.n	8008e38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	e002      	b.n	8008e3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 ff8f 	bl	8009d66 <USBD_CtlContinueRx>
 8008e48:	e038      	b.n	8008ebc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	d105      	bne.n	8008e6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 ff8c 	bl	8009d8a <USBD_CtlSendStatus>
 8008e72:	e023      	b.n	8008ebc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d11e      	bne.n	8008ebc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e86:	2100      	movs	r1, #0
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f001 fcc3 	bl	800a814 <USBD_LL_StallEP>
 8008e8e:	e015      	b.n	8008ebc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00d      	beq.n	8008eb8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d108      	bne.n	8008eb8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	7afa      	ldrb	r2, [r7, #11]
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	4798      	blx	r3
 8008eb6:	e001      	b.n	8008ebc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e000      	b.n	8008ebe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d17f      	bne.n	8008fda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3314      	adds	r3, #20
 8008ede:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d15c      	bne.n	8008fa4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d915      	bls.n	8008f22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fef9 	bl	8009d06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f14:	2300      	movs	r3, #0
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f001 fd25 	bl	800a96a <USBD_LL_PrepareReceive>
 8008f20:	e04e      	b.n	8008fc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	6912      	ldr	r2, [r2, #16]
 8008f2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f2e:	fb01 f202 	mul.w	r2, r1, r2
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d11c      	bne.n	8008f72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d316      	bcc.n	8008f72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d20f      	bcs.n	8008f72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fed5 	bl	8009d06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f64:	2300      	movs	r3, #0
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f001 fcfd 	bl	800a96a <USBD_LL_PrepareReceive>
 8008f70:	e026      	b.n	8008fc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d105      	bne.n	8008f94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f94:	2180      	movs	r1, #128	; 0x80
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 fc3c 	bl	800a814 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 ff07 	bl	8009db0 <USBD_CtlReceiveStatus>
 8008fa2:	e00d      	b.n	8008fc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d004      	beq.n	8008fb8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008fb8:	2180      	movs	r1, #128	; 0x80
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 fc2a 	bl	800a814 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d11d      	bne.n	8009006 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff fe81 	bl	8008cd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fd8:	e015      	b.n	8009006 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d108      	bne.n	8009002 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	7afa      	ldrb	r2, [r7, #11]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	4798      	blx	r3
 8009000:	e001      	b.n	8009006 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	e000      	b.n	8009008 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	2200      	movs	r2, #0
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fbb3 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2240      	movs	r2, #64	; 0x40
 8009030:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	2200      	movs	r2, #0
 8009038:	2180      	movs	r1, #128	; 0x80
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fba5 	bl	800a78a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2240      	movs	r2, #64	; 0x40
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	2b00      	cmp	r3, #0
 8009072:	d009      	beq.n	8009088 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6852      	ldr	r2, [r2, #4]
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	4611      	mov	r1, r2
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
  }

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr

080090b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2204      	movs	r2, #4
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr

080090d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d105      	bne.n	80090f6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009110:	2b03      	cmp	r3, #3
 8009112:	d10b      	bne.n	800912c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr

0800914e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	bc80      	pop	{r7}
 8009164:	4770      	bx	lr

08009166 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6852      	ldr	r2, [r2, #4]
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	4611      	mov	r1, r2
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d005      	beq.n	80091ce <USBD_StdDevReq+0x26>
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d84f      	bhi.n	8009266 <USBD_StdDevReq+0xbe>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <USBD_StdDevReq+0x36>
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d14b      	bne.n	8009266 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
      break;
 80091dc:	e048      	b.n	8009270 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	d839      	bhi.n	800925a <USBD_StdDevReq+0xb2>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <USBD_StdDevReq+0x44>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	0800923d 	.word	0x0800923d
 80091f0:	08009251 	.word	0x08009251
 80091f4:	0800925b 	.word	0x0800925b
 80091f8:	08009247 	.word	0x08009247
 80091fc:	0800925b 	.word	0x0800925b
 8009200:	0800921f 	.word	0x0800921f
 8009204:	08009215 	.word	0x08009215
 8009208:	0800925b 	.word	0x0800925b
 800920c:	08009233 	.word	0x08009233
 8009210:	08009229 	.word	0x08009229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9dc 	bl	80095d4 <USBD_GetDescriptor>
          break;
 800921c:	e022      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb3f 	bl	80098a4 <USBD_SetAddress>
          break;
 8009226:	e01d      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb7e 	bl	800992c <USBD_SetConfig>
          break;
 8009230:	e018      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fc07 	bl	8009a48 <USBD_GetConfig>
          break;
 800923a:	e013      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc37 	bl	8009ab2 <USBD_GetStatus>
          break;
 8009244:	e00e      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc65 	bl	8009b18 <USBD_SetFeature>
          break;
 800924e:	e009      	b.n	8009264 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fc74 	bl	8009b40 <USBD_ClrFeature>
          break;
 8009258:	e004      	b.n	8009264 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fccc 	bl	8009bfa <USBD_CtlError>
          break;
 8009262:	bf00      	nop
      }
      break;
 8009264:	e004      	b.n	8009270 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fcc6 	bl	8009bfa <USBD_CtlError>
      break;
 800926e:	bf00      	nop
  }

  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop

0800927c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009292:	2b40      	cmp	r3, #64	; 0x40
 8009294:	d005      	beq.n	80092a2 <USBD_StdItfReq+0x26>
 8009296:	2b40      	cmp	r3, #64	; 0x40
 8009298:	d82e      	bhi.n	80092f8 <USBD_StdItfReq+0x7c>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <USBD_StdItfReq+0x26>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d12a      	bne.n	80092f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a8:	3b01      	subs	r3, #1
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d81d      	bhi.n	80092ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d813      	bhi.n	80092e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	4798      	blx	r3
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	88db      	ldrh	r3, [r3, #6]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d110      	bne.n	80092f4 <USBD_StdItfReq+0x78>
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10d      	bne.n	80092f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fd56 	bl	8009d8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092de:	e009      	b.n	80092f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fc89 	bl	8009bfa <USBD_CtlError>
          break;
 80092e8:	e004      	b.n	80092f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc84 	bl	8009bfa <USBD_CtlError>
          break;
 80092f2:	e000      	b.n	80092f6 <USBD_StdItfReq+0x7a>
          break;
 80092f4:	bf00      	nop
      }
      break;
 80092f6:	e004      	b.n	8009302 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc7d 	bl	8009bfa <USBD_CtlError>
      break;
 8009300:	bf00      	nop
  }

  return USBD_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	889b      	ldrh	r3, [r3, #4]
 800931e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	d007      	beq.n	800933c <USBD_StdEPReq+0x30>
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	f200 8146 	bhi.w	80095be <USBD_StdEPReq+0x2b2>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <USBD_StdEPReq+0x40>
 8009336:	2b20      	cmp	r3, #32
 8009338:	f040 8141 	bne.w	80095be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
      break;
 800934a:	e13d      	b.n	80095c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009354:	2b20      	cmp	r3, #32
 8009356:	d10a      	bne.n	800936e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]

        return ret;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	e12d      	b.n	80095ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	785b      	ldrb	r3, [r3, #1]
 8009372:	2b03      	cmp	r3, #3
 8009374:	d007      	beq.n	8009386 <USBD_StdEPReq+0x7a>
 8009376:	2b03      	cmp	r3, #3
 8009378:	f300 811b 	bgt.w	80095b2 <USBD_StdEPReq+0x2a6>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d072      	beq.n	8009466 <USBD_StdEPReq+0x15a>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d03a      	beq.n	80093fa <USBD_StdEPReq+0xee>
 8009384:	e115      	b.n	80095b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	2b02      	cmp	r3, #2
 800938e:	d002      	beq.n	8009396 <USBD_StdEPReq+0x8a>
 8009390:	2b03      	cmp	r3, #3
 8009392:	d015      	beq.n	80093c0 <USBD_StdEPReq+0xb4>
 8009394:	e02b      	b.n	80093ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00c      	beq.n	80093b6 <USBD_StdEPReq+0xaa>
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	2b80      	cmp	r3, #128	; 0x80
 80093a0:	d009      	beq.n	80093b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 fa34 	bl	800a814 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093ac:	2180      	movs	r1, #128	; 0x80
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fa30 	bl	800a814 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093b4:	e020      	b.n	80093f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc1e 	bl	8009bfa <USBD_CtlError>
              break;
 80093be:	e01b      	b.n	80093f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	885b      	ldrh	r3, [r3, #2]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10e      	bne.n	80093e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <USBD_StdEPReq+0xda>
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b80      	cmp	r3, #128	; 0x80
 80093d2:	d008      	beq.n	80093e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	88db      	ldrh	r3, [r3, #6]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fa17 	bl	800a814 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fccf 	bl	8009d8a <USBD_CtlSendStatus>

              break;
 80093ec:	e004      	b.n	80093f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fc02 	bl	8009bfa <USBD_CtlError>
              break;
 80093f6:	bf00      	nop
          }
          break;
 80093f8:	e0e0      	b.n	80095bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009400:	2b02      	cmp	r3, #2
 8009402:	d002      	beq.n	800940a <USBD_StdEPReq+0xfe>
 8009404:	2b03      	cmp	r3, #3
 8009406:	d015      	beq.n	8009434 <USBD_StdEPReq+0x128>
 8009408:	e026      	b.n	8009458 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00c      	beq.n	800942a <USBD_StdEPReq+0x11e>
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d009      	beq.n	800942a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f9fa 	bl	800a814 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009420:	2180      	movs	r1, #128	; 0x80
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 f9f6 	bl	800a814 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009428:	e01c      	b.n	8009464 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fbe4 	bl	8009bfa <USBD_CtlError>
              break;
 8009432:	e017      	b.n	8009464 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	885b      	ldrh	r3, [r3, #2]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d112      	bne.n	8009462 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009442:	2b00      	cmp	r3, #0
 8009444:	d004      	beq.n	8009450 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fa01 	bl	800a852 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fc9a 	bl	8009d8a <USBD_CtlSendStatus>
              }
              break;
 8009456:	e004      	b.n	8009462 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fbcd 	bl	8009bfa <USBD_CtlError>
              break;
 8009460:	e000      	b.n	8009464 <USBD_StdEPReq+0x158>
              break;
 8009462:	bf00      	nop
          }
          break;
 8009464:	e0aa      	b.n	80095bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946c:	2b02      	cmp	r3, #2
 800946e:	d002      	beq.n	8009476 <USBD_StdEPReq+0x16a>
 8009470:	2b03      	cmp	r3, #3
 8009472:	d032      	beq.n	80094da <USBD_StdEPReq+0x1ce>
 8009474:	e097      	b.n	80095a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <USBD_StdEPReq+0x180>
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	d004      	beq.n	800948c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fbb8 	bl	8009bfa <USBD_CtlError>
                break;
 800948a:	e091      	b.n	80095b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800948c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009490:	2b00      	cmp	r3, #0
 8009492:	da0b      	bge.n	80094ac <USBD_StdEPReq+0x1a0>
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	3310      	adds	r3, #16
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	e00b      	b.n	80094c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2202      	movs	r2, #2
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fbfb 	bl	8009cce <USBD_CtlSendData>
              break;
 80094d8:	e06a      	b.n	80095b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da11      	bge.n	8009506 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3318      	adds	r3, #24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d117      	bne.n	800952c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fb7b 	bl	8009bfa <USBD_CtlError>
                  break;
 8009504:	e054      	b.n	80095b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	f003 020f 	and.w	r2, r3, #15
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	440b      	add	r3, r1
 8009518:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb68 	bl	8009bfa <USBD_CtlError>
                  break;
 800952a:	e041      	b.n	80095b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800952c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009530:	2b00      	cmp	r3, #0
 8009532:	da0b      	bge.n	800954c <USBD_StdEPReq+0x240>
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	3310      	adds	r3, #16
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	3304      	adds	r3, #4
 800954a:	e00b      	b.n	8009564 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	3304      	adds	r3, #4
 8009564:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <USBD_StdEPReq+0x266>
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d103      	bne.n	800957a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e00e      	b.n	8009598 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 f986 	bl	800a890 <USBD_LL_IsStallEP>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2201      	movs	r2, #1
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e002      	b.n	8009598 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2202      	movs	r2, #2
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb95 	bl	8009cce <USBD_CtlSendData>
              break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fb26 	bl	8009bfa <USBD_CtlError>
              break;
 80095ae:	bf00      	nop
          }
          break;
 80095b0:	e004      	b.n	80095bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fb20 	bl	8009bfa <USBD_CtlError>
          break;
 80095ba:	bf00      	nop
      }
      break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fb1a 	bl	8009bfa <USBD_CtlError>
      break;
 80095c6:	bf00      	nop
  }

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	885b      	ldrh	r3, [r3, #2]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	2b06      	cmp	r3, #6
 80095f6:	f200 8128 	bhi.w	800984a <USBD_GetDescriptor+0x276>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USBD_GetDescriptor+0x2c>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009635 	.word	0x08009635
 8009608:	08009675 	.word	0x08009675
 800960c:	0800984b 	.word	0x0800984b
 8009610:	0800984b 	.word	0x0800984b
 8009614:	080097eb 	.word	0x080097eb
 8009618:	08009817 	.word	0x08009817
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	7c12      	ldrb	r2, [r2, #16]
 8009628:	f107 0108 	add.w	r1, r7, #8
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
 8009630:	60f8      	str	r0, [r7, #12]
      break;
 8009632:	e112      	b.n	800985a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7c1b      	ldrb	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10d      	bne.n	8009658 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f107 0208 	add.w	r2, r7, #8
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3301      	adds	r3, #1
 8009652:	2202      	movs	r2, #2
 8009654:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009656:	e100      	b.n	800985a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	2202      	movs	r2, #2
 8009670:	701a      	strb	r2, [r3, #0]
      break;
 8009672:	e0f2      	b.n	800985a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b05      	cmp	r3, #5
 800967c:	f200 80ac 	bhi.w	80097d8 <USBD_GetDescriptor+0x204>
 8009680:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <USBD_GetDescriptor+0xb4>)
 8009682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009686:	bf00      	nop
 8009688:	080096a1 	.word	0x080096a1
 800968c:	080096d5 	.word	0x080096d5
 8009690:	08009709 	.word	0x08009709
 8009694:	0800973d 	.word	0x0800973d
 8009698:	08009771 	.word	0x08009771
 800969c:	080097a5 	.word	0x080097a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c2:	e091      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa97 	bl	8009bfa <USBD_CtlError>
            err++;
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	3301      	adds	r3, #1
 80096d0:	72fb      	strb	r3, [r7, #11]
          break;
 80096d2:	e089      	b.n	80097e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	7c12      	ldrb	r2, [r2, #16]
 80096ec:	f107 0108 	add.w	r1, r7, #8
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096f6:	e077      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa7d 	bl	8009bfa <USBD_CtlError>
            err++;
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	3301      	adds	r3, #1
 8009704:	72fb      	strb	r3, [r7, #11]
          break;
 8009706:	e06f      	b.n	80097e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	7c12      	ldrb	r2, [r2, #16]
 8009720:	f107 0108 	add.w	r1, r7, #8
 8009724:	4610      	mov	r0, r2
 8009726:	4798      	blx	r3
 8009728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972a:	e05d      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa63 	bl	8009bfa <USBD_CtlError>
            err++;
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	3301      	adds	r3, #1
 8009738:	72fb      	strb	r3, [r7, #11]
          break;
 800973a:	e055      	b.n	80097e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	7c12      	ldrb	r2, [r2, #16]
 8009754:	f107 0108 	add.w	r1, r7, #8
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
 800975c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800975e:	e043      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa49 	bl	8009bfa <USBD_CtlError>
            err++;
 8009768:	7afb      	ldrb	r3, [r7, #11]
 800976a:	3301      	adds	r3, #1
 800976c:	72fb      	strb	r3, [r7, #11]
          break;
 800976e:	e03b      	b.n	80097e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	7c12      	ldrb	r2, [r2, #16]
 8009788:	f107 0108 	add.w	r1, r7, #8
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009792:	e029      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa2f 	bl	8009bfa <USBD_CtlError>
            err++;
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	3301      	adds	r3, #1
 80097a0:	72fb      	strb	r3, [r7, #11]
          break;
 80097a2:	e021      	b.n	80097e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	7c12      	ldrb	r2, [r2, #16]
 80097bc:	f107 0108 	add.w	r1, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c6:	e00f      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa15 	bl	8009bfa <USBD_CtlError>
            err++;
 80097d0:	7afb      	ldrb	r3, [r7, #11]
 80097d2:	3301      	adds	r3, #1
 80097d4:	72fb      	strb	r3, [r7, #11]
          break;
 80097d6:	e007      	b.n	80097e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa0d 	bl	8009bfa <USBD_CtlError>
          err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80097e6:	e038      	b.n	800985a <USBD_GetDescriptor+0x286>
 80097e8:	e037      	b.n	800985a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7c1b      	ldrb	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fa:	f107 0208 	add.w	r2, r7, #8
 80097fe:	4610      	mov	r0, r2
 8009800:	4798      	blx	r3
 8009802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009804:	e029      	b.n	800985a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f9f6 	bl	8009bfa <USBD_CtlError>
        err++;
 800980e:	7afb      	ldrb	r3, [r7, #11]
 8009810:	3301      	adds	r3, #1
 8009812:	72fb      	strb	r3, [r7, #11]
      break;
 8009814:	e021      	b.n	800985a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7c1b      	ldrb	r3, [r3, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10d      	bne.n	800983a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	f107 0208 	add.w	r2, r7, #8
 800982a:	4610      	mov	r0, r2
 800982c:	4798      	blx	r3
 800982e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3301      	adds	r3, #1
 8009834:	2207      	movs	r2, #7
 8009836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009838:	e00f      	b.n	800985a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f9dc 	bl	8009bfa <USBD_CtlError>
        err++;
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	3301      	adds	r3, #1
 8009846:	72fb      	strb	r3, [r7, #11]
      break;
 8009848:	e007      	b.n	800985a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f9d4 	bl	8009bfa <USBD_CtlError>
      err++;
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	3301      	adds	r3, #1
 8009856:	72fb      	strb	r3, [r7, #11]
      break;
 8009858:	bf00      	nop
  }

  if (err != 0U)
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d11c      	bne.n	800989a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009860:	893b      	ldrh	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d011      	beq.n	800988a <USBD_GetDescriptor+0x2b6>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	88db      	ldrh	r3, [r3, #6]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00d      	beq.n	800988a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	88da      	ldrh	r2, [r3, #6]
 8009872:	893b      	ldrh	r3, [r7, #8]
 8009874:	4293      	cmp	r3, r2
 8009876:	bf28      	it	cs
 8009878:	4613      	movcs	r3, r2
 800987a:	b29b      	uxth	r3, r3
 800987c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800987e:	893b      	ldrh	r3, [r7, #8]
 8009880:	461a      	mov	r2, r3
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fa22 	bl	8009cce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88db      	ldrh	r3, [r3, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa79 	bl	8009d8a <USBD_CtlSendStatus>
 8009898:	e000      	b.n	800989c <USBD_GetDescriptor+0x2c8>
    return;
 800989a:	bf00      	nop
    }
  }
}
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop

080098a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	889b      	ldrh	r3, [r3, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d130      	bne.n	8009918 <USBD_SetAddress+0x74>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	88db      	ldrh	r3, [r3, #6]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d12c      	bne.n	8009918 <USBD_SetAddress+0x74>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	885b      	ldrh	r3, [r3, #2]
 80098c2:	2b7f      	cmp	r3, #127	; 0x7f
 80098c4:	d828      	bhi.n	8009918 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d104      	bne.n	80098e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f98b 	bl	8009bfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e4:	e01d      	b.n	8009922 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7bfa      	ldrb	r2, [r7, #15]
 80098ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fff7 	bl	800a8e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fa46 	bl	8009d8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990c:	e009      	b.n	8009922 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009916:	e004      	b.n	8009922 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f96d 	bl	8009bfa <USBD_CtlError>
  }
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	4b41      	ldr	r3, [pc, #260]	; (8009a44 <USBD_SetConfig+0x118>)
 800993e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009940:	4b40      	ldr	r3, [pc, #256]	; (8009a44 <USBD_SetConfig+0x118>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d904      	bls.n	8009952 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f955 	bl	8009bfa <USBD_CtlError>
 8009950:	e075      	b.n	8009a3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009958:	2b02      	cmp	r3, #2
 800995a:	d002      	beq.n	8009962 <USBD_SetConfig+0x36>
 800995c:	2b03      	cmp	r3, #3
 800995e:	d023      	beq.n	80099a8 <USBD_SetConfig+0x7c>
 8009960:	e062      	b.n	8009a28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009962:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <USBD_SetConfig+0x118>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01a      	beq.n	80099a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <USBD_SetConfig+0x118>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2203      	movs	r2, #3
 8009978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800997c:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <USBD_SetConfig+0x118>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff f9af 	bl	8008ce6 <USBD_SetClassConfig>
 8009988:	4603      	mov	r3, r0
 800998a:	2b02      	cmp	r3, #2
 800998c:	d104      	bne.n	8009998 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f932 	bl	8009bfa <USBD_CtlError>
            return;
 8009996:	e052      	b.n	8009a3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9f6 	bl	8009d8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800999e:	e04e      	b.n	8009a3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f9f2 	bl	8009d8a <USBD_CtlSendStatus>
        break;
 80099a6:	e04a      	b.n	8009a3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099a8:	4b26      	ldr	r3, [pc, #152]	; (8009a44 <USBD_SetConfig+0x118>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d112      	bne.n	80099d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80099b8:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <USBD_SetConfig+0x118>)
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80099c2:	4b20      	ldr	r3, [pc, #128]	; (8009a44 <USBD_SetConfig+0x118>)
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff f9ab 	bl	8008d24 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9db 	bl	8009d8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099d4:	e033      	b.n	8009a3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80099d6:	4b1b      	ldr	r3, [pc, #108]	; (8009a44 <USBD_SetConfig+0x118>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d01d      	beq.n	8009a20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff f999 	bl	8008d24 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <USBD_SetConfig+0x118>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099fc:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <USBD_SetConfig+0x118>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff f96f 	bl	8008ce6 <USBD_SetClassConfig>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d104      	bne.n	8009a18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f8f2 	bl	8009bfa <USBD_CtlError>
            return;
 8009a16:	e012      	b.n	8009a3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f9b6 	bl	8009d8a <USBD_CtlSendStatus>
        break;
 8009a1e:	e00e      	b.n	8009a3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9b2 	bl	8009d8a <USBD_CtlSendStatus>
        break;
 8009a26:	e00a      	b.n	8009a3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f8e5 	bl	8009bfa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <USBD_SetConfig+0x118>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff f974 	bl	8008d24 <USBD_ClrClassConfig>
        break;
 8009a3c:	bf00      	nop
    }
  }
}
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000990 	.word	0x20000990

08009a48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	88db      	ldrh	r3, [r3, #6]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d004      	beq.n	8009a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f8cc 	bl	8009bfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a62:	e022      	b.n	8009aaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	dc02      	bgt.n	8009a74 <USBD_GetConfig+0x2c>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dc03      	bgt.n	8009a7a <USBD_GetConfig+0x32>
 8009a72:	e015      	b.n	8009aa0 <USBD_GetConfig+0x58>
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetConfig+0x48>
 8009a78:	e012      	b.n	8009aa0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3308      	adds	r3, #8
 8009a84:	2201      	movs	r2, #1
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f920 	bl	8009cce <USBD_CtlSendData>
        break;
 8009a8e:	e00c      	b.n	8009aaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	2201      	movs	r2, #1
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f918 	bl	8009cce <USBD_CtlSendData>
        break;
 8009a9e:	e004      	b.n	8009aaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f8a9 	bl	8009bfa <USBD_CtlError>
        break;
 8009aa8:	bf00      	nop
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d81e      	bhi.n	8009b06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	88db      	ldrh	r3, [r3, #6]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d004      	beq.n	8009ada <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f891 	bl	8009bfa <USBD_CtlError>
        break;
 8009ad8:	e01a      	b.n	8009b10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f043 0202 	orr.w	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	330c      	adds	r3, #12
 8009afa:	2202      	movs	r2, #2
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8e5 	bl	8009cce <USBD_CtlSendData>
      break;
 8009b04:	e004      	b.n	8009b10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f876 	bl	8009bfa <USBD_CtlError>
      break;
 8009b0e:	bf00      	nop
  }
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d106      	bne.n	8009b38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f929 	bl	8009d8a <USBD_CtlSendStatus>
  }
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b50:	3b01      	subs	r3, #1
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d80b      	bhi.n	8009b6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	885b      	ldrh	r3, [r3, #2]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d10c      	bne.n	8009b78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f90f 	bl	8009d8a <USBD_CtlSendStatus>
      }
      break;
 8009b6c:	e004      	b.n	8009b78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f842 	bl	8009bfa <USBD_CtlError>
      break;
 8009b76:	e000      	b.n	8009b7a <USBD_ClrFeature+0x3a>
      break;
 8009b78:	bf00      	nop
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	785a      	ldrb	r2, [r3, #1]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	3303      	adds	r3, #3
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	3305      	adds	r3, #5
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	4413      	add	r3, r2
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	3306      	adds	r3, #6
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3307      	adds	r3, #7
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	021b      	lsls	r3, r3, #8
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	80da      	strh	r2, [r3, #6]

}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr

08009bfa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c04:	2180      	movs	r1, #128	; 0x80
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fe04 	bl	800a814 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fe00 	bl	800a814 <USBD_LL_StallEP>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d032      	beq.n	8009c98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f834 	bl	8009ca0 <USBD_GetLen>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	75fa      	strb	r2, [r7, #23]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	4413      	add	r3, r2
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	7812      	ldrb	r2, [r2, #0]
 8009c56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	75fa      	strb	r2, [r7, #23]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4413      	add	r3, r2
 8009c64:	2203      	movs	r2, #3
 8009c66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009c68:	e012      	b.n	8009c90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	60fa      	str	r2, [r7, #12]
 8009c70:	7dfa      	ldrb	r2, [r7, #23]
 8009c72:	1c51      	adds	r1, r2, #1
 8009c74:	75f9      	strb	r1, [r7, #23]
 8009c76:	4611      	mov	r1, r2
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	75fa      	strb	r2, [r7, #23]
 8009c86:	461a      	mov	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e8      	bne.n	8009c6a <USBD_GetString+0x4e>
    }
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009cac:	e005      	b.n	8009cba <USBD_GetLen+0x1a>
  {
    len++;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f5      	bne.n	8009cae <USBD_GetLen+0xe>
  }

  return len;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr

08009cce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ce4:	88fa      	ldrh	r2, [r7, #6]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fe14 	bl	800a924 <USBD_LL_Transmit>

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	4613      	mov	r3, r2
 8009d12:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	2100      	movs	r1, #0
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fe02 	bl	800a924 <USBD_LL_Transmit>

  return USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d40:	88fa      	ldrh	r2, [r7, #6]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d48:	88fa      	ldrh	r2, [r7, #6]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d50:	88fb      	ldrh	r3, [r7, #6]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	2100      	movs	r1, #0
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fe07 	bl	800a96a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	4613      	mov	r3, r2
 8009d72:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fdf5 	bl	800a96a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2204      	movs	r2, #4
 8009d96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fdbf 	bl	800a924 <USBD_LL_Transmit>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2205      	movs	r2, #5
 8009dbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fdcf 	bl	800a96a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4912      	ldr	r1, [pc, #72]	; (8009e28 <MX_USB_DEVICE_Init+0x50>)
 8009de0:	4812      	ldr	r0, [pc, #72]	; (8009e2c <MX_USB_DEVICE_Init+0x54>)
 8009de2:	f7fe ff26 	bl	8008c32 <USBD_Init>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dec:	f7f7 fa4b 	bl	8001286 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009df0:	490f      	ldr	r1, [pc, #60]	; (8009e30 <MX_USB_DEVICE_Init+0x58>)
 8009df2:	480e      	ldr	r0, [pc, #56]	; (8009e2c <MX_USB_DEVICE_Init+0x54>)
 8009df4:	f7fe ff48 	bl	8008c88 <USBD_RegisterClass>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009dfe:	f7f7 fa42 	bl	8001286 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e02:	490c      	ldr	r1, [pc, #48]	; (8009e34 <MX_USB_DEVICE_Init+0x5c>)
 8009e04:	4809      	ldr	r0, [pc, #36]	; (8009e2c <MX_USB_DEVICE_Init+0x54>)
 8009e06:	f7fe fe79 	bl	8008afc <USBD_CDC_RegisterInterface>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e10:	f7f7 fa39 	bl	8001286 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e14:	4805      	ldr	r0, [pc, #20]	; (8009e2c <MX_USB_DEVICE_Init+0x54>)
 8009e16:	f7fe ff50 	bl	8008cba <USBD_Start>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e20:	f7f7 fa31 	bl	8001286 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e24:	bf00      	nop
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	200001bc 	.word	0x200001bc
 8009e2c:	20000994 	.word	0x20000994
 8009e30:	2000009c 	.word	0x2000009c
 8009e34:	200001ac 	.word	0x200001ac

08009e38 <cdcAvailable>:
bool      rx_full = false;



uint32_t cdcAvailable(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	607b      	str	r3, [r7, #4]

  //버퍼 ?��?�� ?��?��
  //?��?��중이 버퍼 �??��
  ret = (rx_in - rx_out) % rx_len;
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <cdcAvailable+0x30>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <cdcAvailable+0x34>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	4a08      	ldr	r2, [pc, #32]	; (8009e70 <cdcAvailable+0x38>)
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e54:	fb01 f202 	mul.w	r2, r1, r2
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	607b      	str	r3, [r7, #4]

  return ret;
 8009e5c:	687b      	ldr	r3, [r7, #4]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr
 8009e68:	20000c58 	.word	0x20000c58
 8009e6c:	20000c5c 	.word	0x20000c5c
 8009e70:	200001a8 	.word	0x200001a8

08009e74 <USBD_CDC_SOF>:
uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]

  //버퍼가 받을 수 없는 상황에서
  //다시 계산하여 버퍼가 받을 수 있는 상황이면
  //PC쪽에 다음 데이터를 보내라고 한다.
  if(rx_full == true)
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <USBD_CDC_SOF+0x3c>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d010      	beq.n	8009ea6 <USBD_CDC_SOF+0x32>
  {
    //남아 있는 공간을 확인
    uint32_t buf_len;
    //수신 버퍼에 비어있는 데이터량
    buf_len = (rx_len - cdcAvailable()) - 1;
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <USBD_CDC_SOF+0x40>)
 8009e86:	681c      	ldr	r4, [r3, #0]
 8009e88:	f7ff ffd6 	bl	8009e38 <cdcAvailable>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	1ae3      	subs	r3, r4, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b3f      	cmp	r3, #63	; 0x3f
 8009e98:	d905      	bls.n	8009ea6 <USBD_CDC_SOF+0x32>
    {
      //데이터를 받을 공간이 있다라고 PC쪽에 알려준다.
      //PC는 아래 함수를 통해 신호를 받아야 다음 데이터를 보낸다.
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); //처음에 한번만 설정하면 되므로
                                                      //사용 안해도 됨
      USBD_CDC_ReceivePacket(pdev);   //입력 파라미터는 pdev
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fe fe9f 	bl	8008bde <USBD_CDC_ReceivePacket>
      rx_full = false;
 8009ea0:	4b03      	ldr	r3, [pc, #12]	; (8009eb0 <USBD_CDC_SOF+0x3c>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd90      	pop	{r4, r7, pc}
 8009eb0:	20000e60 	.word	0x20000e60
 8009eb4:	200001a8 	.word	0x200001a8

08009eb8 <cdcRead>:


uint8_t cdcRead(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <cdcRead+0x40>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <cdcRead+0x44>)
 8009ec4:	5cd3      	ldrb	r3, [r2, r3]
 8009ec6:	71fb      	strb	r3, [r7, #7]

  if(rx_in != rx_out)
 8009ec8:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <cdcRead+0x48>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <cdcRead+0x40>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d00b      	beq.n	8009eec <cdcRead+0x34>
  {
    //?��?��?���? 같으�? ?��?��?���? ?��?��
    rx_out = (rx_out + 1) % rx_len;
 8009ed4:	4b08      	ldr	r3, [pc, #32]	; (8009ef8 <cdcRead+0x40>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	4a0a      	ldr	r2, [pc, #40]	; (8009f04 <cdcRead+0x4c>)
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ee2:	fb01 f202 	mul.w	r2, r1, r2
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	4a03      	ldr	r2, [pc, #12]	; (8009ef8 <cdcRead+0x40>)
 8009eea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009eec:	79fb      	ldrb	r3, [r7, #7]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr
 8009ef8:	20000c5c 	.word	0x20000c5c
 8009efc:	20000c60 	.word	0x20000c60
 8009f00:	20000c58 	.word	0x20000c58
 8009f04:	200001a8 	.word	0x200001a8

08009f08 <cdcDataIn>:




void cdcDataIn(uint8_t rx_data)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  //?��?�� ?��?��?�� 버퍼?�� ???��
  rx_buf[rx_in] = rx_data;
 8009f12:	4b0e      	ldr	r3, [pc, #56]	; (8009f4c <cdcDataIn+0x44>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	490e      	ldr	r1, [pc, #56]	; (8009f50 <cdcDataIn+0x48>)
 8009f18:	79fa      	ldrb	r2, [r7, #7]
 8009f1a:	54ca      	strb	r2, [r1, r3]

  //rx_in ?��?��?�� 1 증�? ?��?�� ?�� �? ?��?��?�� 값을 next_rx_in?�� ???��?��?��.
  next_rx_in = (rx_in + 1) % rx_len;
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <cdcDataIn+0x44>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	4a0c      	ldr	r2, [pc, #48]	; (8009f54 <cdcDataIn+0x4c>)
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f2a:	fb01 f202 	mul.w	r2, r1, r2
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  //rx_in + 1 ?��?��?�� �? next_rx_in?�� rx_out ?��?��?��?? 같�? ?��?���?
    //--> ?���? 버퍼�? full?�� ?��?��?���?.....
  if(next_rx_in != rx_out)
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <cdcDataIn+0x50>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d002      	beq.n	8009f42 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8009f3c:	4a03      	ldr	r2, [pc, #12]	; (8009f4c <cdcDataIn+0x44>)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6013      	str	r3, [r2, #0]
  }
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr
 8009f4c:	20000c58 	.word	0x20000c58
 8009f50:	20000c60 	.word	0x20000c60
 8009f54:	200001a8 	.word	0x200001a8
 8009f58:	20000c5c 	.word	0x20000c5c

08009f5c <cdcWrite>:
/*
 * usb�? write ?��?�� ?��?��
 */

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;
  pre_time = millis();
 8009f66:	f7f7 f941 	bl	80011ec <millis>
 8009f6a:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f92a 	bl	800a1cc <CDC_Transmit_FS>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <cdcWrite+0x2a>
    {
      return length;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	e00e      	b.n	8009fa4 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d101      	bne.n	8009f90 <cdcWrite+0x34>
    {
      return 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e009      	b.n	8009fa4 <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)  //time out
 8009f90:	f7f7 f92c 	bl	80011ec <millis>
 8009f94:	4602      	mov	r2, r0
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b63      	cmp	r3, #99	; 0x63
 8009f9c:	d800      	bhi.n	8009fa0 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8009f9e:	e7e5      	b.n	8009f6c <cdcWrite+0x10>
    {
      break;
 8009fa0:	bf00      	nop
    }
  }

  return 0;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4905      	ldr	r1, [pc, #20]	; (8009fc8 <CDC_Init_FS+0x1c>)
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <CDC_Init_FS+0x20>)
 8009fb6:	f7fe fdb7 	bl	8008b28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fba:	4905      	ldr	r1, [pc, #20]	; (8009fd0 <CDC_Init_FS+0x24>)
 8009fbc:	4803      	ldr	r0, [pc, #12]	; (8009fcc <CDC_Init_FS+0x20>)
 8009fbe:	f7fe fdcc 	bl	8008b5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001264 	.word	0x20001264
 8009fcc:	20000994 	.word	0x20000994
 8009fd0:	20000e64 	.word	0x20000e64

08009fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr
	...

08009fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	6039      	str	r1, [r7, #0]
 8009fee:	71fb      	strb	r3, [r7, #7]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	2b23      	cmp	r3, #35	; 0x23
 8009ff8:	f200 80a6 	bhi.w	800a148 <CDC_Control_FS+0x164>
 8009ffc:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <CDC_Control_FS+0x20>)
 8009ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a002:	bf00      	nop
 800a004:	0800a149 	.word	0x0800a149
 800a008:	0800a149 	.word	0x0800a149
 800a00c:	0800a149 	.word	0x0800a149
 800a010:	0800a149 	.word	0x0800a149
 800a014:	0800a149 	.word	0x0800a149
 800a018:	0800a149 	.word	0x0800a149
 800a01c:	0800a149 	.word	0x0800a149
 800a020:	0800a149 	.word	0x0800a149
 800a024:	0800a149 	.word	0x0800a149
 800a028:	0800a149 	.word	0x0800a149
 800a02c:	0800a149 	.word	0x0800a149
 800a030:	0800a149 	.word	0x0800a149
 800a034:	0800a149 	.word	0x0800a149
 800a038:	0800a149 	.word	0x0800a149
 800a03c:	0800a149 	.word	0x0800a149
 800a040:	0800a149 	.word	0x0800a149
 800a044:	0800a149 	.word	0x0800a149
 800a048:	0800a149 	.word	0x0800a149
 800a04c:	0800a149 	.word	0x0800a149
 800a050:	0800a149 	.word	0x0800a149
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a149 	.word	0x0800a149
 800a05c:	0800a149 	.word	0x0800a149
 800a060:	0800a149 	.word	0x0800a149
 800a064:	0800a149 	.word	0x0800a149
 800a068:	0800a149 	.word	0x0800a149
 800a06c:	0800a149 	.word	0x0800a149
 800a070:	0800a149 	.word	0x0800a149
 800a074:	0800a149 	.word	0x0800a149
 800a078:	0800a149 	.word	0x0800a149
 800a07c:	0800a149 	.word	0x0800a149
 800a080:	0800a149 	.word	0x0800a149
 800a084:	0800a095 	.word	0x0800a095
 800a088:	0800a0f5 	.word	0x0800a0f5
 800a08c:	0800a149 	.word	0x0800a149
 800a090:	0800a149 	.word	0x0800a149
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate       = (uint32_t)(pbuf[0]);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	4b2f      	ldr	r3, [pc, #188]	; (800a158 <CDC_Control_FS+0x174>)
 800a09c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[1] << 8);
 800a09e:	4b2e      	ldr	r3, [pc, #184]	; (800a158 <CDC_Control_FS+0x174>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	3201      	adds	r2, #1
 800a0a6:	7812      	ldrb	r2, [r2, #0]
 800a0a8:	0212      	lsls	r2, r2, #8
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	4a2a      	ldr	r2, [pc, #168]	; (800a158 <CDC_Control_FS+0x174>)
 800a0ae:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[2] << 16);
 800a0b0:	4b29      	ldr	r3, [pc, #164]	; (800a158 <CDC_Control_FS+0x174>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	3202      	adds	r2, #2
 800a0b8:	7812      	ldrb	r2, [r2, #0]
 800a0ba:	0412      	lsls	r2, r2, #16
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a26      	ldr	r2, [pc, #152]	; (800a158 <CDC_Control_FS+0x174>)
 800a0c0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[3] << 24);
 800a0c2:	4b25      	ldr	r3, [pc, #148]	; (800a158 <CDC_Control_FS+0x174>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	3203      	adds	r2, #3
 800a0ca:	7812      	ldrb	r2, [r2, #0]
 800a0cc:	0612      	lsls	r2, r2, #24
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	4a21      	ldr	r2, [pc, #132]	; (800a158 <CDC_Control_FS+0x174>)
 800a0d2:	6013      	str	r3, [r2, #0]
      LineCoding.format        = (uint8_t)pbuf[4];
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	4b1f      	ldr	r3, [pc, #124]	; (800a158 <CDC_Control_FS+0x174>)
 800a0dc:	711a      	strb	r2, [r3, #4]
      LineCoding.datatype      = (uint8_t)pbuf[5];
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	3305      	adds	r3, #5
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	4b1c      	ldr	r3, [pc, #112]	; (800a158 <CDC_Control_FS+0x174>)
 800a0e6:	719a      	strb	r2, [r3, #6]
      LineCoding.paritytype    = (uint8_t)pbuf[6];
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	3306      	adds	r3, #6
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	4b1a      	ldr	r3, [pc, #104]	; (800a158 <CDC_Control_FS+0x174>)
 800a0f0:	715a      	strb	r2, [r3, #5]
    break;
 800a0f2:	e02a      	b.n	800a14a <CDC_Control_FS+0x166>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a0f4:	4b18      	ldr	r3, [pc, #96]	; (800a158 <CDC_Control_FS+0x174>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800a0fe:	4b16      	ldr	r3, [pc, #88]	; (800a158 <CDC_Control_FS+0x174>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	0a1a      	lsrs	r2, r3, #8
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800a10c:	4b12      	ldr	r3, [pc, #72]	; (800a158 <CDC_Control_FS+0x174>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	0c1a      	lsrs	r2, r3, #16
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3302      	adds	r3, #2
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800a11a:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <CDC_Control_FS+0x174>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	0e1a      	lsrs	r2, r3, #24
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3303      	adds	r3, #3
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]
      pbuf[4] = (uint8_t)LineCoding.format;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4a0a      	ldr	r2, [pc, #40]	; (800a158 <CDC_Control_FS+0x174>)
 800a12e:	7912      	ldrb	r2, [r2, #4]
 800a130:	701a      	strb	r2, [r3, #0]
      pbuf[5] = (uint8_t)LineCoding.datatype;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3305      	adds	r3, #5
 800a136:	4a08      	ldr	r2, [pc, #32]	; (800a158 <CDC_Control_FS+0x174>)
 800a138:	7992      	ldrb	r2, [r2, #6]
 800a13a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = (uint8_t)LineCoding.paritytype;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	3306      	adds	r3, #6
 800a140:	4a05      	ldr	r2, [pc, #20]	; (800a158 <CDC_Control_FS+0x174>)
 800a142:	7952      	ldrb	r2, [r2, #5]
 800a144:	701a      	strb	r2, [r3, #0]
    break;
 800a146:	e000      	b.n	800a14a <CDC_Control_FS+0x166>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a148:	bf00      	nop
  }

  return (USBD_OK);
 800a14a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	200001a0 	.word	0x200001a0

0800a15c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a15c:	b590      	push	{r4, r7, lr}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  //먼저 usb로 받은 데이트를 버퍼에 write
  for(int i=0;i<*Len;i++)
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	e009      	b.n	800a180 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	4413      	add	r3, r2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fec7 	bl	8009f08 <cdcDataIn>
  for(int i=0;i<*Len;i++)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	429a      	cmp	r2, r3
 800a188:	d8f0      	bhi.n	800a16c <CDC_Receive_FS+0x10>
  }

  //남아 있는 공간을 확인
  uint32_t buf_len;
  //수신 버퍼에 비어있는 데이터량
  buf_len = (rx_len - cdcAvailable()) - 1;
 800a18a:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <CDC_Receive_FS+0x64>)
 800a18c:	681c      	ldr	r4, [r3, #0]
 800a18e:	f7ff fe53 	bl	8009e38 <cdcAvailable>
 800a192:	4603      	mov	r3, r0
 800a194:	1ae3      	subs	r3, r4, r3
 800a196:	3b01      	subs	r3, #1
 800a198:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b3f      	cmp	r3, #63	; 0x3f
 800a19e:	d907      	bls.n	800a1b0 <CDC_Receive_FS+0x54>
  {
    //데이터를 받을 공간이 있다라고 PC쪽에 알려준다.
    //PC는 아래 함수를 통해 신호를 받아야 다음 데이터를 보낸다.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	4808      	ldr	r0, [pc, #32]	; (800a1c4 <CDC_Receive_FS+0x68>)
 800a1a4:	f7fe fcd9 	bl	8008b5a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1a8:	4806      	ldr	r0, [pc, #24]	; (800a1c4 <CDC_Receive_FS+0x68>)
 800a1aa:	f7fe fd18 	bl	8008bde <USBD_CDC_ReceivePacket>
 800a1ae:	e002      	b.n	800a1b6 <CDC_Receive_FS+0x5a>
  }
  else
  {
    //buffer 용량 부족
    //PC에서는 다음 데이터 보내지 않고 대기한다.
    rx_full = true;
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <CDC_Receive_FS+0x6c>)
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	701a      	strb	r2, [r3, #0]
  }
  return (USBD_OK);
 800a1b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd90      	pop	{r4, r7, pc}
 800a1c0:	200001a8 	.word	0x200001a8
 800a1c4:	20000994 	.word	0x20000994
 800a1c8:	20000e60 	.word	0x20000e60

0800a1cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1dc:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <CDC_Transmit_FS+0x48>)
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e00b      	b.n	800a20a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	4806      	ldr	r0, [pc, #24]	; (800a214 <CDC_Transmit_FS+0x48>)
 800a1fa:	f7fe fc95 	bl	8008b28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1fe:	4805      	ldr	r0, [pc, #20]	; (800a214 <CDC_Transmit_FS+0x48>)
 800a200:	f7fe fcbe 	bl	8008b80 <USBD_CDC_TransmitPacket>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000994 	.word	0x20000994

0800a218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2212      	movs	r2, #18
 800a228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	200001d8 	.word	0x200001d8

0800a23c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2204      	movs	r2, #4
 800a24c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	bc80      	pop	{r7}
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	200001ec 	.word	0x200001ec

0800a260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d105      	bne.n	800a27e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	4907      	ldr	r1, [pc, #28]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a276:	4808      	ldr	r0, [pc, #32]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a278:	f7ff fcd0 	bl	8009c1c <USBD_GetString>
 800a27c:	e004      	b.n	800a288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a282:	4805      	ldr	r0, [pc, #20]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a284:	f7ff fcca 	bl	8009c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001664 	.word	0x20001664
 800a298:	0800f84c 	.word	0x0800f84c

0800a29c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	4904      	ldr	r1, [pc, #16]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2ac:	4804      	ldr	r0, [pc, #16]	; (800a2c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2ae:	f7ff fcb5 	bl	8009c1c <USBD_GetString>
  return USBD_StrDesc;
 800a2b2:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20001664 	.word	0x20001664
 800a2c0:	0800f864 	.word	0x0800f864

0800a2c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	221a      	movs	r2, #26
 800a2d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2d6:	f000 f843 	bl	800a360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2da:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	200001f0 	.word	0x200001f0

0800a2e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	4907      	ldr	r1, [pc, #28]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2fe:	4808      	ldr	r0, [pc, #32]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a300:	f7ff fc8c 	bl	8009c1c <USBD_GetString>
 800a304:	e004      	b.n	800a310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4904      	ldr	r1, [pc, #16]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a30a:	4805      	ldr	r0, [pc, #20]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a30c:	f7ff fc86 	bl	8009c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a310:	4b02      	ldr	r3, [pc, #8]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20001664 	.word	0x20001664
 800a320:	0800f878 	.word	0x0800f878

0800a324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	6039      	str	r1, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	4907      	ldr	r1, [pc, #28]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a33a:	4808      	ldr	r0, [pc, #32]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a33c:	f7ff fc6e 	bl	8009c1c <USBD_GetString>
 800a340:	e004      	b.n	800a34c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4904      	ldr	r1, [pc, #16]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a346:	4805      	ldr	r0, [pc, #20]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a348:	f7ff fc68 	bl	8009c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001664 	.word	0x20001664
 800a35c:	0800f884 	.word	0x0800f884

0800a360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <Get_SerialNum+0x44>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a36c:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <Get_SerialNum+0x48>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a372:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <Get_SerialNum+0x4c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a386:	2208      	movs	r2, #8
 800a388:	4909      	ldr	r1, [pc, #36]	; (800a3b0 <Get_SerialNum+0x50>)
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f814 	bl	800a3b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a390:	2204      	movs	r2, #4
 800a392:	4908      	ldr	r1, [pc, #32]	; (800a3b4 <Get_SerialNum+0x54>)
 800a394:	68b8      	ldr	r0, [r7, #8]
 800a396:	f000 f80f 	bl	800a3b8 <IntToUnicode>
  }
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	1fff7a10 	.word	0x1fff7a10
 800a3a8:	1fff7a14 	.word	0x1fff7a14
 800a3ac:	1fff7a18 	.word	0x1fff7a18
 800a3b0:	200001f2 	.word	0x200001f2
 800a3b4:	20000202 	.word	0x20000202

0800a3b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
 800a3ce:	e027      	b.n	800a420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	0f1b      	lsrs	r3, r3, #28
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d80b      	bhi.n	800a3f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	0f1b      	lsrs	r3, r3, #28
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	440b      	add	r3, r1
 800a3e8:	3230      	adds	r2, #48	; 0x30
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e00a      	b.n	800a406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	0f1b      	lsrs	r3, r3, #28
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	440b      	add	r3, r1
 800a400:	3237      	adds	r2, #55	; 0x37
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	3301      	adds	r3, #1
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	4413      	add	r3, r2
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	3301      	adds	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
 800a420:	7dfa      	ldrb	r2, [r7, #23]
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	429a      	cmp	r2, r3
 800a426:	d3d3      	bcc.n	800a3d0 <IntToUnicode+0x18>
  }
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bc80      	pop	{r7}
 800a432:	4770      	bx	lr

0800a434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	; 0x28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	609a      	str	r2, [r3, #8]
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a454:	d13a      	bne.n	800a4cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a456:	2300      	movs	r3, #0
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45e:	4a1d      	ldr	r2, [pc, #116]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a460:	f043 0301 	orr.w	r3, r3, #1
 800a464:	6313      	str	r3, [r2, #48]	; 0x30
 800a466:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	613b      	str	r3, [r7, #16]
 800a470:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA8     ------> USB_OTG_FS_SOF
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 800a472:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a478:	2302      	movs	r3, #2
 800a47a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a47c:	2300      	movs	r3, #0
 800a47e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a480:	2303      	movs	r3, #3
 800a482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a484:	230a      	movs	r3, #10
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	4619      	mov	r1, r3
 800a48e:	4812      	ldr	r0, [pc, #72]	; (800a4d8 <HAL_PCD_MspInit+0xa4>)
 800a490:	f7f9 fe7a 	bl	8004188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a498:	4a0e      	ldr	r2, [pc, #56]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49e:	6353      	str	r3, [r2, #52]	; 0x34
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a8:	4a0a      	ldr	r2, [pc, #40]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a4aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4ae:	6453      	str	r3, [r2, #68]	; 0x44
 800a4b0:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <HAL_PCD_MspInit+0xa0>)
 800a4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	2043      	movs	r0, #67	; 0x43
 800a4c2:	f7f8 fee6 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4c6:	2043      	movs	r0, #67	; 0x43
 800a4c8:	f7f8 feff 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4cc:	bf00      	nop
 800a4ce:	3728      	adds	r7, #40	; 0x28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	40020000 	.word	0x40020000

0800a4dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe fc29 	bl	8008d4a <USBD_LL_SetupStage>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	1a9b      	subs	r3, r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	4619      	mov	r1, r3
 800a52a:	f7fe fc5b 	bl	8008de4 <USBD_LL_DataOutStage>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4613      	mov	r3, r2
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	1a9b      	subs	r3, r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	440b      	add	r3, r1
 800a556:	3348      	adds	r3, #72	; 0x48
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	4619      	mov	r1, r3
 800a55e:	f7fe fcb2 	bl	8008ec6 <USBD_LL_DataInStage>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fdc2 	bl	8009102 <USBD_LL_SOF>
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
 800a59e:	e008      	b.n	800a5b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d102      	bne.n	800a5ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	e001      	b.n	800a5b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5ae:	f7f6 fe6a 	bl	8001286 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a5b8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fd68 	bl	8009092 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fd21 	bl	8009010 <USBD_LL_Reset>
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fd62 	bl	80090b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6812      	ldr	r2, [r2, #0]
 800a5fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5fe:	f043 0301 	orr.w	r3, r3, #1
 800a602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a1b      	ldr	r3, [r3, #32]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <HAL_PCD_SuspendCallback+0x48>)
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	4a03      	ldr	r2, [pc, #12]	; (800a620 <HAL_PCD_SuspendCallback+0x48>)
 800a612:	f043 0306 	orr.w	r3, r3, #6
 800a616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	e000ed00 	.word	0xe000ed00

0800a624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fd50 	bl	80090d8 <USBD_LL_Resume>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd79 	bl	800914e <USBD_LL_IsoOUTIncomplete>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fd5b 	bl	8009136 <USBD_LL_IsoINIncomplete>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fd65 	bl	8009166 <USBD_LL_DevConnected>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fd61 	bl	800917a <USBD_LL_DevDisconnected>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d139      	bne.n	800a744 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6d0:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <USBD_LL_Init+0x90>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a1d      	ldr	r2, [pc, #116]	; (800a750 <USBD_LL_Init+0x90>)
 800a6dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6e0:	4b1b      	ldr	r3, [pc, #108]	; (800a750 <USBD_LL_Init+0x90>)
 800a6e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a6e8:	4b19      	ldr	r3, [pc, #100]	; (800a750 <USBD_LL_Init+0x90>)
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <USBD_LL_Init+0x90>)
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6f4:	4b16      	ldr	r3, [pc, #88]	; (800a750 <USBD_LL_Init+0x90>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6fa:	4b15      	ldr	r3, [pc, #84]	; (800a750 <USBD_LL_Init+0x90>)
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a700:	4b13      	ldr	r3, [pc, #76]	; (800a750 <USBD_LL_Init+0x90>)
 800a702:	2201      	movs	r2, #1
 800a704:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a706:	4b12      	ldr	r3, [pc, #72]	; (800a750 <USBD_LL_Init+0x90>)
 800a708:	2200      	movs	r2, #0
 800a70a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <USBD_LL_Init+0x90>)
 800a70e:	2200      	movs	r2, #0
 800a710:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a712:	4b0f      	ldr	r3, [pc, #60]	; (800a750 <USBD_LL_Init+0x90>)
 800a714:	2200      	movs	r2, #0
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a718:	480d      	ldr	r0, [pc, #52]	; (800a750 <USBD_LL_Init+0x90>)
 800a71a:	f7fa f802 	bl	8004722 <HAL_PCD_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800a724:	f7f6 fdaf 	bl	8001286 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a728:	2180      	movs	r1, #128	; 0x80
 800a72a:	4809      	ldr	r0, [pc, #36]	; (800a750 <USBD_LL_Init+0x90>)
 800a72c:	f7fb f93e 	bl	80059ac <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a730:	2240      	movs	r2, #64	; 0x40
 800a732:	2100      	movs	r1, #0
 800a734:	4806      	ldr	r0, [pc, #24]	; (800a750 <USBD_LL_Init+0x90>)
 800a736:	f7fb f8f3 	bl	8005920 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a73a:	2280      	movs	r2, #128	; 0x80
 800a73c:	2101      	movs	r1, #1
 800a73e:	4804      	ldr	r0, [pc, #16]	; (800a750 <USBD_LL_Init+0x90>)
 800a740:	f7fb f8ee 	bl	8005920 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20001864 	.word	0x20001864

0800a754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fa f8f6 	bl	800495c <HAL_PCD_Start>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f92e 	bl	800a9d8 <USBD_Get_USB_Status>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	4608      	mov	r0, r1
 800a794:	4611      	mov	r1, r2
 800a796:	461a      	mov	r2, r3
 800a798:	4603      	mov	r3, r0
 800a79a:	70fb      	strb	r3, [r7, #3]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70bb      	strb	r3, [r7, #2]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7b2:	78bb      	ldrb	r3, [r7, #2]
 800a7b4:	883a      	ldrh	r2, [r7, #0]
 800a7b6:	78f9      	ldrb	r1, [r7, #3]
 800a7b8:	f7fa fcbb 	bl	8005132 <HAL_PCD_EP_Open>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f908 	bl	800a9d8 <USBD_Get_USB_Status>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fa fd04 	bl	8005202 <HAL_PCD_EP_Close>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fe:	7bfb      	ldrb	r3, [r7, #15]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f8e9 	bl	800a9d8 <USBD_Get_USB_Status>
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fa fddb 	bl	80053ee <HAL_PCD_EP_SetStall>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f8ca 	bl	800a9d8 <USBD_Get_USB_Status>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a848:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa fe20 	bl	80054b6 <HAL_PCD_EP_ClrStall>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 f8ab 	bl	800a9d8 <USBD_Get_USB_Status>
 800a882:	4603      	mov	r3, r0
 800a884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a886:	7bbb      	ldrb	r3, [r7, #14]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da0b      	bge.n	800a8c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8b2:	68f9      	ldr	r1, [r7, #12]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	333e      	adds	r3, #62	; 0x3e
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	e00b      	b.n	800a8dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ca:	68f9      	ldr	r1, [r7, #12]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	1a9b      	subs	r3, r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr

0800a8e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7fa fbef 	bl	80050e8 <HAL_PCD_SetAddress>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 f861 	bl	800a9d8 <USBD_Get_USB_Status>
 800a916:	4603      	mov	r3, r0
 800a918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	461a      	mov	r2, r3
 800a930:	460b      	mov	r3, r1
 800a932:	72fb      	strb	r3, [r7, #11]
 800a934:	4613      	mov	r3, r2
 800a936:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a946:	893b      	ldrh	r3, [r7, #8]
 800a948:	7af9      	ldrb	r1, [r7, #11]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	f7fa fd05 	bl	800535a <HAL_PCD_EP_Transmit>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f83e 	bl	800a9d8 <USBD_Get_USB_Status>
 800a95c:	4603      	mov	r3, r0
 800a95e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a960:	7dbb      	ldrb	r3, [r7, #22]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b086      	sub	sp, #24
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	461a      	mov	r2, r3
 800a976:	460b      	mov	r3, r1
 800a978:	72fb      	strb	r3, [r7, #11]
 800a97a:	4613      	mov	r3, r2
 800a97c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a98c:	893b      	ldrh	r3, [r7, #8]
 800a98e:	7af9      	ldrb	r1, [r7, #11]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	f7fa fc80 	bl	8005296 <HAL_PCD_EP_Receive>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f81b 	bl	800a9d8 <USBD_Get_USB_Status>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fa fcb0 	bl	800532c <HAL_PCD_EP_GetRxCount>
 800a9cc:	4603      	mov	r3, r0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d817      	bhi.n	800aa1c <USBD_Get_USB_Status+0x44>
 800a9ec:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <USBD_Get_USB_Status+0x1c>)
 800a9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f2:	bf00      	nop
 800a9f4:	0800aa05 	.word	0x0800aa05
 800a9f8:	0800aa0b 	.word	0x0800aa0b
 800a9fc:	0800aa11 	.word	0x0800aa11
 800aa00:	0800aa17 	.word	0x0800aa17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
    break;
 800aa08:	e00b      	b.n	800aa22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0e:	e008      	b.n	800aa22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa10:	2301      	movs	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
    break;
 800aa14:	e005      	b.n	800aa22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa16:	2302      	movs	r3, #2
 800aa18:	73fb      	strb	r3, [r7, #15]
    break;
 800aa1a:	e002      	b.n	800aa22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa20:	bf00      	nop
  }
  return usb_status;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop

0800aa30 <main>:

#include "main.h"


int main(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  hwInit();
 800aa34:	f7f8 fa90 	bl	8002f58 <hwInit>
  apInit();
 800aa38:	f7f6 fb24 	bl	8001084 <apInit>
  apMain();
 800aa3c:	f7f6 fb3a 	bl	80010b4 <apMain>

  return 0;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <__errno>:
 800aa48:	4b01      	ldr	r3, [pc, #4]	; (800aa50 <__errno+0x8>)
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	2000020c 	.word	0x2000020c

0800aa54 <__libc_init_array>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	2600      	movs	r6, #0
 800aa58:	4d0c      	ldr	r5, [pc, #48]	; (800aa8c <__libc_init_array+0x38>)
 800aa5a:	4c0d      	ldr	r4, [pc, #52]	; (800aa90 <__libc_init_array+0x3c>)
 800aa5c:	1b64      	subs	r4, r4, r5
 800aa5e:	10a4      	asrs	r4, r4, #2
 800aa60:	42a6      	cmp	r6, r4
 800aa62:	d109      	bne.n	800aa78 <__libc_init_array+0x24>
 800aa64:	f004 fd96 	bl	800f594 <_init>
 800aa68:	2600      	movs	r6, #0
 800aa6a:	4d0a      	ldr	r5, [pc, #40]	; (800aa94 <__libc_init_array+0x40>)
 800aa6c:	4c0a      	ldr	r4, [pc, #40]	; (800aa98 <__libc_init_array+0x44>)
 800aa6e:	1b64      	subs	r4, r4, r5
 800aa70:	10a4      	asrs	r4, r4, #2
 800aa72:	42a6      	cmp	r6, r4
 800aa74:	d105      	bne.n	800aa82 <__libc_init_array+0x2e>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa7c:	4798      	blx	r3
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7ee      	b.n	800aa60 <__libc_init_array+0xc>
 800aa82:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa86:	4798      	blx	r3
 800aa88:	3601      	adds	r6, #1
 800aa8a:	e7f2      	b.n	800aa72 <__libc_init_array+0x1e>
 800aa8c:	0800fd64 	.word	0x0800fd64
 800aa90:	0800fd64 	.word	0x0800fd64
 800aa94:	0800fd64 	.word	0x0800fd64
 800aa98:	0800fd68 	.word	0x0800fd68

0800aa9c <malloc>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <malloc+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 b87b 	b.w	800ab9c <_malloc_r>
 800aaa6:	bf00      	nop
 800aaa8:	2000020c 	.word	0x2000020c

0800aaac <free>:
 800aaac:	4b02      	ldr	r3, [pc, #8]	; (800aab8 <free+0xc>)
 800aaae:	4601      	mov	r1, r0
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	f000 b80b 	b.w	800aacc <_free_r>
 800aab6:	bf00      	nop
 800aab8:	2000020c 	.word	0x2000020c

0800aabc <memset>:
 800aabc:	4603      	mov	r3, r0
 800aabe:	4402      	add	r2, r0
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d100      	bne.n	800aac6 <memset+0xa>
 800aac4:	4770      	bx	lr
 800aac6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaca:	e7f9      	b.n	800aac0 <memset+0x4>

0800aacc <_free_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4605      	mov	r5, r0
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d040      	beq.n	800ab56 <_free_r+0x8a>
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f0c      	subs	r4, r1, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfb8      	it	lt
 800aade:	18e4      	addlt	r4, r4, r3
 800aae0:	f003 f950 	bl	800dd84 <__malloc_lock>
 800aae4:	4a1c      	ldr	r2, [pc, #112]	; (800ab58 <_free_r+0x8c>)
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	b933      	cbnz	r3, 800aaf8 <_free_r+0x2c>
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	6014      	str	r4, [r2, #0]
 800aaee:	4628      	mov	r0, r5
 800aaf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf4:	f003 b94c 	b.w	800dd90 <__malloc_unlock>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d908      	bls.n	800ab0e <_free_r+0x42>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	1821      	adds	r1, r4, r0
 800ab00:	428b      	cmp	r3, r1
 800ab02:	bf01      	itttt	eq
 800ab04:	6819      	ldreq	r1, [r3, #0]
 800ab06:	685b      	ldreq	r3, [r3, #4]
 800ab08:	1809      	addeq	r1, r1, r0
 800ab0a:	6021      	streq	r1, [r4, #0]
 800ab0c:	e7ed      	b.n	800aaea <_free_r+0x1e>
 800ab0e:	461a      	mov	r2, r3
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	b10b      	cbz	r3, 800ab18 <_free_r+0x4c>
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d9fa      	bls.n	800ab0e <_free_r+0x42>
 800ab18:	6811      	ldr	r1, [r2, #0]
 800ab1a:	1850      	adds	r0, r2, r1
 800ab1c:	42a0      	cmp	r0, r4
 800ab1e:	d10b      	bne.n	800ab38 <_free_r+0x6c>
 800ab20:	6820      	ldr	r0, [r4, #0]
 800ab22:	4401      	add	r1, r0
 800ab24:	1850      	adds	r0, r2, r1
 800ab26:	4283      	cmp	r3, r0
 800ab28:	6011      	str	r1, [r2, #0]
 800ab2a:	d1e0      	bne.n	800aaee <_free_r+0x22>
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	4401      	add	r1, r0
 800ab32:	6011      	str	r1, [r2, #0]
 800ab34:	6053      	str	r3, [r2, #4]
 800ab36:	e7da      	b.n	800aaee <_free_r+0x22>
 800ab38:	d902      	bls.n	800ab40 <_free_r+0x74>
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	602b      	str	r3, [r5, #0]
 800ab3e:	e7d6      	b.n	800aaee <_free_r+0x22>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	1821      	adds	r1, r4, r0
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf01      	itttt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	1809      	addeq	r1, r1, r0
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	6063      	str	r3, [r4, #4]
 800ab52:	6054      	str	r4, [r2, #4]
 800ab54:	e7cb      	b.n	800aaee <_free_r+0x22>
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	20001c64 	.word	0x20001c64

0800ab5c <sbrk_aligned>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4e0e      	ldr	r6, [pc, #56]	; (800ab98 <sbrk_aligned+0x3c>)
 800ab60:	460c      	mov	r4, r1
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	4605      	mov	r5, r0
 800ab66:	b911      	cbnz	r1, 800ab6e <sbrk_aligned+0x12>
 800ab68:	f000 fefa 	bl	800b960 <_sbrk_r>
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f000 fef5 	bl	800b960 <_sbrk_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d00a      	beq.n	800ab90 <sbrk_aligned+0x34>
 800ab7a:	1cc4      	adds	r4, r0, #3
 800ab7c:	f024 0403 	bic.w	r4, r4, #3
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d007      	beq.n	800ab94 <sbrk_aligned+0x38>
 800ab84:	1a21      	subs	r1, r4, r0
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 feea 	bl	800b960 <_sbrk_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d101      	bne.n	800ab94 <sbrk_aligned+0x38>
 800ab90:	f04f 34ff 	mov.w	r4, #4294967295
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	20001c68 	.word	0x20001c68

0800ab9c <_malloc_r>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	1ccd      	adds	r5, r1, #3
 800aba2:	f025 0503 	bic.w	r5, r5, #3
 800aba6:	3508      	adds	r5, #8
 800aba8:	2d0c      	cmp	r5, #12
 800abaa:	bf38      	it	cc
 800abac:	250c      	movcc	r5, #12
 800abae:	2d00      	cmp	r5, #0
 800abb0:	4607      	mov	r7, r0
 800abb2:	db01      	blt.n	800abb8 <_malloc_r+0x1c>
 800abb4:	42a9      	cmp	r1, r5
 800abb6:	d905      	bls.n	800abc4 <_malloc_r+0x28>
 800abb8:	230c      	movs	r3, #12
 800abba:	2600      	movs	r6, #0
 800abbc:	603b      	str	r3, [r7, #0]
 800abbe:	4630      	mov	r0, r6
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	4e2e      	ldr	r6, [pc, #184]	; (800ac80 <_malloc_r+0xe4>)
 800abc6:	f003 f8dd 	bl	800dd84 <__malloc_lock>
 800abca:	6833      	ldr	r3, [r6, #0]
 800abcc:	461c      	mov	r4, r3
 800abce:	bb34      	cbnz	r4, 800ac1e <_malloc_r+0x82>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4638      	mov	r0, r7
 800abd4:	f7ff ffc2 	bl	800ab5c <sbrk_aligned>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	4604      	mov	r4, r0
 800abdc:	d14d      	bne.n	800ac7a <_malloc_r+0xde>
 800abde:	6834      	ldr	r4, [r6, #0]
 800abe0:	4626      	mov	r6, r4
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d140      	bne.n	800ac68 <_malloc_r+0xcc>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	4631      	mov	r1, r6
 800abea:	4638      	mov	r0, r7
 800abec:	eb04 0803 	add.w	r8, r4, r3
 800abf0:	f000 feb6 	bl	800b960 <_sbrk_r>
 800abf4:	4580      	cmp	r8, r0
 800abf6:	d13a      	bne.n	800ac6e <_malloc_r+0xd2>
 800abf8:	6821      	ldr	r1, [r4, #0]
 800abfa:	3503      	adds	r5, #3
 800abfc:	1a6d      	subs	r5, r5, r1
 800abfe:	f025 0503 	bic.w	r5, r5, #3
 800ac02:	3508      	adds	r5, #8
 800ac04:	2d0c      	cmp	r5, #12
 800ac06:	bf38      	it	cc
 800ac08:	250c      	movcc	r5, #12
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7ff ffa5 	bl	800ab5c <sbrk_aligned>
 800ac12:	3001      	adds	r0, #1
 800ac14:	d02b      	beq.n	800ac6e <_malloc_r+0xd2>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	442b      	add	r3, r5
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	e00e      	b.n	800ac3c <_malloc_r+0xa0>
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	1b52      	subs	r2, r2, r5
 800ac22:	d41e      	bmi.n	800ac62 <_malloc_r+0xc6>
 800ac24:	2a0b      	cmp	r2, #11
 800ac26:	d916      	bls.n	800ac56 <_malloc_r+0xba>
 800ac28:	1961      	adds	r1, r4, r5
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	6025      	str	r5, [r4, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	6059      	strne	r1, [r3, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	bf08      	it	eq
 800ac36:	6031      	streq	r1, [r6, #0]
 800ac38:	5162      	str	r2, [r4, r5]
 800ac3a:	604b      	str	r3, [r1, #4]
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f104 060b 	add.w	r6, r4, #11
 800ac42:	f003 f8a5 	bl	800dd90 <__malloc_unlock>
 800ac46:	f026 0607 	bic.w	r6, r6, #7
 800ac4a:	1d23      	adds	r3, r4, #4
 800ac4c:	1af2      	subs	r2, r6, r3
 800ac4e:	d0b6      	beq.n	800abbe <_malloc_r+0x22>
 800ac50:	1b9b      	subs	r3, r3, r6
 800ac52:	50a3      	str	r3, [r4, r2]
 800ac54:	e7b3      	b.n	800abbe <_malloc_r+0x22>
 800ac56:	6862      	ldr	r2, [r4, #4]
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	bf0c      	ite	eq
 800ac5c:	6032      	streq	r2, [r6, #0]
 800ac5e:	605a      	strne	r2, [r3, #4]
 800ac60:	e7ec      	b.n	800ac3c <_malloc_r+0xa0>
 800ac62:	4623      	mov	r3, r4
 800ac64:	6864      	ldr	r4, [r4, #4]
 800ac66:	e7b2      	b.n	800abce <_malloc_r+0x32>
 800ac68:	4634      	mov	r4, r6
 800ac6a:	6876      	ldr	r6, [r6, #4]
 800ac6c:	e7b9      	b.n	800abe2 <_malloc_r+0x46>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	4638      	mov	r0, r7
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	f003 f88c 	bl	800dd90 <__malloc_unlock>
 800ac78:	e7a1      	b.n	800abbe <_malloc_r+0x22>
 800ac7a:	6025      	str	r5, [r4, #0]
 800ac7c:	e7de      	b.n	800ac3c <_malloc_r+0xa0>
 800ac7e:	bf00      	nop
 800ac80:	20001c64 	.word	0x20001c64

0800ac84 <__cvt>:
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8a:	461f      	mov	r7, r3
 800ac8c:	bfbb      	ittet	lt
 800ac8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ac92:	461f      	movlt	r7, r3
 800ac94:	2300      	movge	r3, #0
 800ac96:	232d      	movlt	r3, #45	; 0x2d
 800ac98:	b088      	sub	sp, #32
 800ac9a:	4614      	mov	r4, r2
 800ac9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aca0:	7013      	strb	r3, [r2, #0]
 800aca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aca4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800aca8:	f023 0820 	bic.w	r8, r3, #32
 800acac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acb0:	d005      	beq.n	800acbe <__cvt+0x3a>
 800acb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acb6:	d100      	bne.n	800acba <__cvt+0x36>
 800acb8:	3501      	adds	r5, #1
 800acba:	2302      	movs	r3, #2
 800acbc:	e000      	b.n	800acc0 <__cvt+0x3c>
 800acbe:	2303      	movs	r3, #3
 800acc0:	aa07      	add	r2, sp, #28
 800acc2:	9204      	str	r2, [sp, #16]
 800acc4:	aa06      	add	r2, sp, #24
 800acc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800acca:	e9cd 3500 	strd	r3, r5, [sp]
 800acce:	4622      	mov	r2, r4
 800acd0:	463b      	mov	r3, r7
 800acd2:	f001 fed1 	bl	800ca78 <_dtoa_r>
 800acd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800acda:	4606      	mov	r6, r0
 800acdc:	d102      	bne.n	800ace4 <__cvt+0x60>
 800acde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ace0:	07db      	lsls	r3, r3, #31
 800ace2:	d522      	bpl.n	800ad2a <__cvt+0xa6>
 800ace4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ace8:	eb06 0905 	add.w	r9, r6, r5
 800acec:	d110      	bne.n	800ad10 <__cvt+0x8c>
 800acee:	7833      	ldrb	r3, [r6, #0]
 800acf0:	2b30      	cmp	r3, #48	; 0x30
 800acf2:	d10a      	bne.n	800ad0a <__cvt+0x86>
 800acf4:	2200      	movs	r2, #0
 800acf6:	2300      	movs	r3, #0
 800acf8:	4620      	mov	r0, r4
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 fe9a 	bl	8000a34 <__aeabi_dcmpeq>
 800ad00:	b918      	cbnz	r0, 800ad0a <__cvt+0x86>
 800ad02:	f1c5 0501 	rsb	r5, r5, #1
 800ad06:	f8ca 5000 	str.w	r5, [sl]
 800ad0a:	f8da 3000 	ldr.w	r3, [sl]
 800ad0e:	4499      	add	r9, r3
 800ad10:	2200      	movs	r2, #0
 800ad12:	2300      	movs	r3, #0
 800ad14:	4620      	mov	r0, r4
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 fe8c 	bl	8000a34 <__aeabi_dcmpeq>
 800ad1c:	b108      	cbz	r0, 800ad22 <__cvt+0x9e>
 800ad1e:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad22:	2230      	movs	r2, #48	; 0x30
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	454b      	cmp	r3, r9
 800ad28:	d307      	bcc.n	800ad3a <__cvt+0xb6>
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	9b07      	ldr	r3, [sp, #28]
 800ad2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad30:	1b9b      	subs	r3, r3, r6
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	b008      	add	sp, #32
 800ad36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3a:	1c59      	adds	r1, r3, #1
 800ad3c:	9107      	str	r1, [sp, #28]
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e7f0      	b.n	800ad24 <__cvt+0xa0>

0800ad42 <__exponent>:
 800ad42:	4603      	mov	r3, r0
 800ad44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad46:	2900      	cmp	r1, #0
 800ad48:	f803 2b02 	strb.w	r2, [r3], #2
 800ad4c:	bfb6      	itet	lt
 800ad4e:	222d      	movlt	r2, #45	; 0x2d
 800ad50:	222b      	movge	r2, #43	; 0x2b
 800ad52:	4249      	neglt	r1, r1
 800ad54:	2909      	cmp	r1, #9
 800ad56:	7042      	strb	r2, [r0, #1]
 800ad58:	dd2b      	ble.n	800adb2 <__exponent+0x70>
 800ad5a:	f10d 0407 	add.w	r4, sp, #7
 800ad5e:	46a4      	mov	ip, r4
 800ad60:	270a      	movs	r7, #10
 800ad62:	fb91 f6f7 	sdiv	r6, r1, r7
 800ad66:	460a      	mov	r2, r1
 800ad68:	46a6      	mov	lr, r4
 800ad6a:	fb07 1516 	mls	r5, r7, r6, r1
 800ad6e:	2a63      	cmp	r2, #99	; 0x63
 800ad70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ad74:	4631      	mov	r1, r6
 800ad76:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad7e:	dcf0      	bgt.n	800ad62 <__exponent+0x20>
 800ad80:	3130      	adds	r1, #48	; 0x30
 800ad82:	f1ae 0502 	sub.w	r5, lr, #2
 800ad86:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	1c44      	adds	r4, r0, #1
 800ad8e:	4561      	cmp	r1, ip
 800ad90:	d30a      	bcc.n	800ada8 <__exponent+0x66>
 800ad92:	f10d 0209 	add.w	r2, sp, #9
 800ad96:	eba2 020e 	sub.w	r2, r2, lr
 800ad9a:	4565      	cmp	r5, ip
 800ad9c:	bf88      	it	hi
 800ad9e:	2200      	movhi	r2, #0
 800ada0:	4413      	add	r3, r2
 800ada2:	1a18      	subs	r0, r3, r0
 800ada4:	b003      	add	sp, #12
 800ada6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adac:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adb0:	e7ed      	b.n	800ad8e <__exponent+0x4c>
 800adb2:	2330      	movs	r3, #48	; 0x30
 800adb4:	3130      	adds	r1, #48	; 0x30
 800adb6:	7083      	strb	r3, [r0, #2]
 800adb8:	70c1      	strb	r1, [r0, #3]
 800adba:	1d03      	adds	r3, r0, #4
 800adbc:	e7f1      	b.n	800ada2 <__exponent+0x60>
	...

0800adc0 <_printf_float>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	b091      	sub	sp, #68	; 0x44
 800adc6:	460c      	mov	r4, r1
 800adc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800adcc:	4616      	mov	r6, r2
 800adce:	461f      	mov	r7, r3
 800add0:	4605      	mov	r5, r0
 800add2:	f002 ffa5 	bl	800dd20 <_localeconv_r>
 800add6:	6803      	ldr	r3, [r0, #0]
 800add8:	4618      	mov	r0, r3
 800adda:	9309      	str	r3, [sp, #36]	; 0x24
 800addc:	f7f5 f9fe 	bl	80001dc <strlen>
 800ade0:	2300      	movs	r3, #0
 800ade2:	930e      	str	r3, [sp, #56]	; 0x38
 800ade4:	f8d8 3000 	ldr.w	r3, [r8]
 800ade8:	900a      	str	r0, [sp, #40]	; 0x28
 800adea:	3307      	adds	r3, #7
 800adec:	f023 0307 	bic.w	r3, r3, #7
 800adf0:	f103 0208 	add.w	r2, r3, #8
 800adf4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800adf8:	f8d4 b000 	ldr.w	fp, [r4]
 800adfc:	f8c8 2000 	str.w	r2, [r8]
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ae0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ae10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295
 800ae16:	4640      	mov	r0, r8
 800ae18:	4b9c      	ldr	r3, [pc, #624]	; (800b08c <_printf_float+0x2cc>)
 800ae1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae1c:	f7f5 fe3c 	bl	8000a98 <__aeabi_dcmpun>
 800ae20:	bb70      	cbnz	r0, 800ae80 <_printf_float+0xc0>
 800ae22:	f04f 32ff 	mov.w	r2, #4294967295
 800ae26:	4640      	mov	r0, r8
 800ae28:	4b98      	ldr	r3, [pc, #608]	; (800b08c <_printf_float+0x2cc>)
 800ae2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae2c:	f7f5 fe16 	bl	8000a5c <__aeabi_dcmple>
 800ae30:	bb30      	cbnz	r0, 800ae80 <_printf_float+0xc0>
 800ae32:	2200      	movs	r2, #0
 800ae34:	2300      	movs	r3, #0
 800ae36:	4640      	mov	r0, r8
 800ae38:	4651      	mov	r1, sl
 800ae3a:	f7f5 fe05 	bl	8000a48 <__aeabi_dcmplt>
 800ae3e:	b110      	cbz	r0, 800ae46 <_printf_float+0x86>
 800ae40:	232d      	movs	r3, #45	; 0x2d
 800ae42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae46:	4b92      	ldr	r3, [pc, #584]	; (800b090 <_printf_float+0x2d0>)
 800ae48:	4892      	ldr	r0, [pc, #584]	; (800b094 <_printf_float+0x2d4>)
 800ae4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ae4e:	bf94      	ite	ls
 800ae50:	4698      	movls	r8, r3
 800ae52:	4680      	movhi	r8, r0
 800ae54:	2303      	movs	r3, #3
 800ae56:	f04f 0a00 	mov.w	sl, #0
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	f02b 0304 	bic.w	r3, fp, #4
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	4633      	mov	r3, r6
 800ae64:	4621      	mov	r1, r4
 800ae66:	4628      	mov	r0, r5
 800ae68:	9700      	str	r7, [sp, #0]
 800ae6a:	aa0f      	add	r2, sp, #60	; 0x3c
 800ae6c:	f000 f9d4 	bl	800b218 <_printf_common>
 800ae70:	3001      	adds	r0, #1
 800ae72:	f040 8090 	bne.w	800af96 <_printf_float+0x1d6>
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	b011      	add	sp, #68	; 0x44
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	4642      	mov	r2, r8
 800ae82:	4653      	mov	r3, sl
 800ae84:	4640      	mov	r0, r8
 800ae86:	4651      	mov	r1, sl
 800ae88:	f7f5 fe06 	bl	8000a98 <__aeabi_dcmpun>
 800ae8c:	b148      	cbz	r0, 800aea2 <_printf_float+0xe2>
 800ae8e:	f1ba 0f00 	cmp.w	sl, #0
 800ae92:	bfb8      	it	lt
 800ae94:	232d      	movlt	r3, #45	; 0x2d
 800ae96:	4880      	ldr	r0, [pc, #512]	; (800b098 <_printf_float+0x2d8>)
 800ae98:	bfb8      	it	lt
 800ae9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae9e:	4b7f      	ldr	r3, [pc, #508]	; (800b09c <_printf_float+0x2dc>)
 800aea0:	e7d3      	b.n	800ae4a <_printf_float+0x8a>
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	d142      	bne.n	800af32 <_printf_float+0x172>
 800aeac:	2306      	movs	r3, #6
 800aeae:	6063      	str	r3, [r4, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	9206      	str	r2, [sp, #24]
 800aeb4:	aa0e      	add	r2, sp, #56	; 0x38
 800aeb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800aeba:	aa0d      	add	r2, sp, #52	; 0x34
 800aebc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800aec0:	9203      	str	r2, [sp, #12]
 800aec2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800aec6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	4642      	mov	r2, r8
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4628      	mov	r0, r5
 800aed4:	4653      	mov	r3, sl
 800aed6:	910b      	str	r1, [sp, #44]	; 0x2c
 800aed8:	f7ff fed4 	bl	800ac84 <__cvt>
 800aedc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aede:	4680      	mov	r8, r0
 800aee0:	2947      	cmp	r1, #71	; 0x47
 800aee2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aee4:	d108      	bne.n	800aef8 <_printf_float+0x138>
 800aee6:	1cc8      	adds	r0, r1, #3
 800aee8:	db02      	blt.n	800aef0 <_printf_float+0x130>
 800aeea:	6863      	ldr	r3, [r4, #4]
 800aeec:	4299      	cmp	r1, r3
 800aeee:	dd40      	ble.n	800af72 <_printf_float+0x1b2>
 800aef0:	f1a9 0902 	sub.w	r9, r9, #2
 800aef4:	fa5f f989 	uxtb.w	r9, r9
 800aef8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aefc:	d81f      	bhi.n	800af3e <_printf_float+0x17e>
 800aefe:	464a      	mov	r2, r9
 800af00:	3901      	subs	r1, #1
 800af02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af06:	910d      	str	r1, [sp, #52]	; 0x34
 800af08:	f7ff ff1b 	bl	800ad42 <__exponent>
 800af0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af0e:	4682      	mov	sl, r0
 800af10:	1813      	adds	r3, r2, r0
 800af12:	2a01      	cmp	r2, #1
 800af14:	6123      	str	r3, [r4, #16]
 800af16:	dc02      	bgt.n	800af1e <_printf_float+0x15e>
 800af18:	6822      	ldr	r2, [r4, #0]
 800af1a:	07d2      	lsls	r2, r2, #31
 800af1c:	d501      	bpl.n	800af22 <_printf_float+0x162>
 800af1e:	3301      	adds	r3, #1
 800af20:	6123      	str	r3, [r4, #16]
 800af22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800af26:	2b00      	cmp	r3, #0
 800af28:	d09b      	beq.n	800ae62 <_printf_float+0xa2>
 800af2a:	232d      	movs	r3, #45	; 0x2d
 800af2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af30:	e797      	b.n	800ae62 <_printf_float+0xa2>
 800af32:	2947      	cmp	r1, #71	; 0x47
 800af34:	d1bc      	bne.n	800aeb0 <_printf_float+0xf0>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1ba      	bne.n	800aeb0 <_printf_float+0xf0>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7b7      	b.n	800aeae <_printf_float+0xee>
 800af3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800af42:	d118      	bne.n	800af76 <_printf_float+0x1b6>
 800af44:	2900      	cmp	r1, #0
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	dd0b      	ble.n	800af62 <_printf_float+0x1a2>
 800af4a:	6121      	str	r1, [r4, #16]
 800af4c:	b913      	cbnz	r3, 800af54 <_printf_float+0x194>
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	07d0      	lsls	r0, r2, #31
 800af52:	d502      	bpl.n	800af5a <_printf_float+0x19a>
 800af54:	3301      	adds	r3, #1
 800af56:	440b      	add	r3, r1
 800af58:	6123      	str	r3, [r4, #16]
 800af5a:	f04f 0a00 	mov.w	sl, #0
 800af5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800af60:	e7df      	b.n	800af22 <_printf_float+0x162>
 800af62:	b913      	cbnz	r3, 800af6a <_printf_float+0x1aa>
 800af64:	6822      	ldr	r2, [r4, #0]
 800af66:	07d2      	lsls	r2, r2, #31
 800af68:	d501      	bpl.n	800af6e <_printf_float+0x1ae>
 800af6a:	3302      	adds	r3, #2
 800af6c:	e7f4      	b.n	800af58 <_printf_float+0x198>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7f2      	b.n	800af58 <_printf_float+0x198>
 800af72:	f04f 0967 	mov.w	r9, #103	; 0x67
 800af76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af78:	4299      	cmp	r1, r3
 800af7a:	db05      	blt.n	800af88 <_printf_float+0x1c8>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	6121      	str	r1, [r4, #16]
 800af80:	07d8      	lsls	r0, r3, #31
 800af82:	d5ea      	bpl.n	800af5a <_printf_float+0x19a>
 800af84:	1c4b      	adds	r3, r1, #1
 800af86:	e7e7      	b.n	800af58 <_printf_float+0x198>
 800af88:	2900      	cmp	r1, #0
 800af8a:	bfcc      	ite	gt
 800af8c:	2201      	movgt	r2, #1
 800af8e:	f1c1 0202 	rsble	r2, r1, #2
 800af92:	4413      	add	r3, r2
 800af94:	e7e0      	b.n	800af58 <_printf_float+0x198>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	055a      	lsls	r2, r3, #21
 800af9a:	d407      	bmi.n	800afac <_printf_float+0x1ec>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	4642      	mov	r2, r8
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	d12b      	bne.n	800b002 <_printf_float+0x242>
 800afaa:	e764      	b.n	800ae76 <_printf_float+0xb6>
 800afac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800afb0:	f240 80dd 	bls.w	800b16e <_printf_float+0x3ae>
 800afb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afb8:	2200      	movs	r2, #0
 800afba:	2300      	movs	r3, #0
 800afbc:	f7f5 fd3a 	bl	8000a34 <__aeabi_dcmpeq>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d033      	beq.n	800b02c <_printf_float+0x26c>
 800afc4:	2301      	movs	r3, #1
 800afc6:	4631      	mov	r1, r6
 800afc8:	4628      	mov	r0, r5
 800afca:	4a35      	ldr	r2, [pc, #212]	; (800b0a0 <_printf_float+0x2e0>)
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	f43f af51 	beq.w	800ae76 <_printf_float+0xb6>
 800afd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800afd8:	429a      	cmp	r2, r3
 800afda:	db02      	blt.n	800afe2 <_printf_float+0x222>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	07d8      	lsls	r0, r3, #31
 800afe0:	d50f      	bpl.n	800b002 <_printf_float+0x242>
 800afe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f af42 	beq.w	800ae76 <_printf_float+0xb6>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 091a 	add.w	r9, r4, #26
 800affa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800affc:	3b01      	subs	r3, #1
 800affe:	4543      	cmp	r3, r8
 800b000:	dc09      	bgt.n	800b016 <_printf_float+0x256>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	079b      	lsls	r3, r3, #30
 800b006:	f100 8102 	bmi.w	800b20e <_printf_float+0x44e>
 800b00a:	68e0      	ldr	r0, [r4, #12]
 800b00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b00e:	4298      	cmp	r0, r3
 800b010:	bfb8      	it	lt
 800b012:	4618      	movlt	r0, r3
 800b014:	e731      	b.n	800ae7a <_printf_float+0xba>
 800b016:	2301      	movs	r3, #1
 800b018:	464a      	mov	r2, r9
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f af28 	beq.w	800ae76 <_printf_float+0xb6>
 800b026:	f108 0801 	add.w	r8, r8, #1
 800b02a:	e7e6      	b.n	800affa <_printf_float+0x23a>
 800b02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dc38      	bgt.n	800b0a4 <_printf_float+0x2e4>
 800b032:	2301      	movs	r3, #1
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	4a19      	ldr	r2, [pc, #100]	; (800b0a0 <_printf_float+0x2e0>)
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f af1a 	beq.w	800ae76 <_printf_float+0xb6>
 800b042:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b046:	4313      	orrs	r3, r2
 800b048:	d102      	bne.n	800b050 <_printf_float+0x290>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	07d9      	lsls	r1, r3, #31
 800b04e:	d5d8      	bpl.n	800b002 <_printf_float+0x242>
 800b050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b054:	4631      	mov	r1, r6
 800b056:	4628      	mov	r0, r5
 800b058:	47b8      	blx	r7
 800b05a:	3001      	adds	r0, #1
 800b05c:	f43f af0b 	beq.w	800ae76 <_printf_float+0xb6>
 800b060:	f04f 0900 	mov.w	r9, #0
 800b064:	f104 0a1a 	add.w	sl, r4, #26
 800b068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b06a:	425b      	negs	r3, r3
 800b06c:	454b      	cmp	r3, r9
 800b06e:	dc01      	bgt.n	800b074 <_printf_float+0x2b4>
 800b070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b072:	e794      	b.n	800af9e <_printf_float+0x1de>
 800b074:	2301      	movs	r3, #1
 800b076:	4652      	mov	r2, sl
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f aef9 	beq.w	800ae76 <_printf_float+0xb6>
 800b084:	f109 0901 	add.w	r9, r9, #1
 800b088:	e7ee      	b.n	800b068 <_printf_float+0x2a8>
 800b08a:	bf00      	nop
 800b08c:	7fefffff 	.word	0x7fefffff
 800b090:	0800f8b8 	.word	0x0800f8b8
 800b094:	0800f8bc 	.word	0x0800f8bc
 800b098:	0800f8c4 	.word	0x0800f8c4
 800b09c:	0800f8c0 	.word	0x0800f8c0
 800b0a0:	0800f8c8 	.word	0x0800f8c8
 800b0a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	bfa8      	it	ge
 800b0ac:	461a      	movge	r2, r3
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	4691      	mov	r9, r2
 800b0b2:	dc37      	bgt.n	800b124 <_printf_float+0x364>
 800b0b4:	f04f 0b00 	mov.w	fp, #0
 800b0b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0bc:	f104 021a 	add.w	r2, r4, #26
 800b0c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b0c4:	ebaa 0309 	sub.w	r3, sl, r9
 800b0c8:	455b      	cmp	r3, fp
 800b0ca:	dc33      	bgt.n	800b134 <_printf_float+0x374>
 800b0cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	db3b      	blt.n	800b14c <_printf_float+0x38c>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	07da      	lsls	r2, r3, #31
 800b0d8:	d438      	bmi.n	800b14c <_printf_float+0x38c>
 800b0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0de:	eba3 020a 	sub.w	r2, r3, sl
 800b0e2:	eba3 0901 	sub.w	r9, r3, r1
 800b0e6:	4591      	cmp	r9, r2
 800b0e8:	bfa8      	it	ge
 800b0ea:	4691      	movge	r9, r2
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	dc34      	bgt.n	800b15c <_printf_float+0x39c>
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fa:	f104 0a1a 	add.w	sl, r4, #26
 800b0fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	eba3 0309 	sub.w	r3, r3, r9
 800b108:	4543      	cmp	r3, r8
 800b10a:	f77f af7a 	ble.w	800b002 <_printf_float+0x242>
 800b10e:	2301      	movs	r3, #1
 800b110:	4652      	mov	r2, sl
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	f43f aeac 	beq.w	800ae76 <_printf_float+0xb6>
 800b11e:	f108 0801 	add.w	r8, r8, #1
 800b122:	e7ec      	b.n	800b0fe <_printf_float+0x33e>
 800b124:	4613      	mov	r3, r2
 800b126:	4631      	mov	r1, r6
 800b128:	4642      	mov	r2, r8
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	d1c0      	bne.n	800b0b4 <_printf_float+0x2f4>
 800b132:	e6a0      	b.n	800ae76 <_printf_float+0xb6>
 800b134:	2301      	movs	r3, #1
 800b136:	4631      	mov	r1, r6
 800b138:	4628      	mov	r0, r5
 800b13a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f ae99 	beq.w	800ae76 <_printf_float+0xb6>
 800b144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b146:	f10b 0b01 	add.w	fp, fp, #1
 800b14a:	e7b9      	b.n	800b0c0 <_printf_float+0x300>
 800b14c:	4631      	mov	r1, r6
 800b14e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b152:	4628      	mov	r0, r5
 800b154:	47b8      	blx	r7
 800b156:	3001      	adds	r0, #1
 800b158:	d1bf      	bne.n	800b0da <_printf_float+0x31a>
 800b15a:	e68c      	b.n	800ae76 <_printf_float+0xb6>
 800b15c:	464b      	mov	r3, r9
 800b15e:	4631      	mov	r1, r6
 800b160:	4628      	mov	r0, r5
 800b162:	eb08 020a 	add.w	r2, r8, sl
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d1c2      	bne.n	800b0f2 <_printf_float+0x332>
 800b16c:	e683      	b.n	800ae76 <_printf_float+0xb6>
 800b16e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b170:	2a01      	cmp	r2, #1
 800b172:	dc01      	bgt.n	800b178 <_printf_float+0x3b8>
 800b174:	07db      	lsls	r3, r3, #31
 800b176:	d537      	bpl.n	800b1e8 <_printf_float+0x428>
 800b178:	2301      	movs	r3, #1
 800b17a:	4642      	mov	r2, r8
 800b17c:	4631      	mov	r1, r6
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	f43f ae77 	beq.w	800ae76 <_printf_float+0xb6>
 800b188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f ae6f 	beq.w	800ae76 <_printf_float+0xb6>
 800b198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f7f5 fc48 	bl	8000a34 <__aeabi_dcmpeq>
 800b1a4:	b9d8      	cbnz	r0, 800b1de <_printf_float+0x41e>
 800b1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a8:	f108 0201 	add.w	r2, r8, #1
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d10e      	bne.n	800b1d6 <_printf_float+0x416>
 800b1b8:	e65d      	b.n	800ae76 <_printf_float+0xb6>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	464a      	mov	r2, r9
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	f43f ae56 	beq.w	800ae76 <_printf_float+0xb6>
 800b1ca:	f108 0801 	add.w	r8, r8, #1
 800b1ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	4543      	cmp	r3, r8
 800b1d4:	dcf1      	bgt.n	800b1ba <_printf_float+0x3fa>
 800b1d6:	4653      	mov	r3, sl
 800b1d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b1dc:	e6e0      	b.n	800afa0 <_printf_float+0x1e0>
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	f104 091a 	add.w	r9, r4, #26
 800b1e6:	e7f2      	b.n	800b1ce <_printf_float+0x40e>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	e7df      	b.n	800b1ae <_printf_float+0x3ee>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	464a      	mov	r2, r9
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f43f ae3c 	beq.w	800ae76 <_printf_float+0xb6>
 800b1fe:	f108 0801 	add.w	r8, r8, #1
 800b202:	68e3      	ldr	r3, [r4, #12]
 800b204:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b206:	1a5b      	subs	r3, r3, r1
 800b208:	4543      	cmp	r3, r8
 800b20a:	dcf0      	bgt.n	800b1ee <_printf_float+0x42e>
 800b20c:	e6fd      	b.n	800b00a <_printf_float+0x24a>
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f104 0919 	add.w	r9, r4, #25
 800b216:	e7f4      	b.n	800b202 <_printf_float+0x442>

0800b218 <_printf_common>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	4616      	mov	r6, r2
 800b21e:	4699      	mov	r9, r3
 800b220:	688a      	ldr	r2, [r1, #8]
 800b222:	690b      	ldr	r3, [r1, #16]
 800b224:	4607      	mov	r7, r0
 800b226:	4293      	cmp	r3, r2
 800b228:	bfb8      	it	lt
 800b22a:	4613      	movlt	r3, r2
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b232:	460c      	mov	r4, r1
 800b234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b238:	b10a      	cbz	r2, 800b23e <_printf_common+0x26>
 800b23a:	3301      	adds	r3, #1
 800b23c:	6033      	str	r3, [r6, #0]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	0699      	lsls	r1, r3, #26
 800b242:	bf42      	ittt	mi
 800b244:	6833      	ldrmi	r3, [r6, #0]
 800b246:	3302      	addmi	r3, #2
 800b248:	6033      	strmi	r3, [r6, #0]
 800b24a:	6825      	ldr	r5, [r4, #0]
 800b24c:	f015 0506 	ands.w	r5, r5, #6
 800b250:	d106      	bne.n	800b260 <_printf_common+0x48>
 800b252:	f104 0a19 	add.w	sl, r4, #25
 800b256:	68e3      	ldr	r3, [r4, #12]
 800b258:	6832      	ldr	r2, [r6, #0]
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	42ab      	cmp	r3, r5
 800b25e:	dc28      	bgt.n	800b2b2 <_printf_common+0x9a>
 800b260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b264:	1e13      	subs	r3, r2, #0
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	bf18      	it	ne
 800b26a:	2301      	movne	r3, #1
 800b26c:	0692      	lsls	r2, r2, #26
 800b26e:	d42d      	bmi.n	800b2cc <_printf_common+0xb4>
 800b270:	4649      	mov	r1, r9
 800b272:	4638      	mov	r0, r7
 800b274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b278:	47c0      	blx	r8
 800b27a:	3001      	adds	r0, #1
 800b27c:	d020      	beq.n	800b2c0 <_printf_common+0xa8>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	68e5      	ldr	r5, [r4, #12]
 800b282:	f003 0306 	and.w	r3, r3, #6
 800b286:	2b04      	cmp	r3, #4
 800b288:	bf18      	it	ne
 800b28a:	2500      	movne	r5, #0
 800b28c:	6832      	ldr	r2, [r6, #0]
 800b28e:	f04f 0600 	mov.w	r6, #0
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	bf08      	it	eq
 800b296:	1aad      	subeq	r5, r5, r2
 800b298:	6922      	ldr	r2, [r4, #16]
 800b29a:	bf08      	it	eq
 800b29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	bfc4      	itt	gt
 800b2a4:	1a9b      	subgt	r3, r3, r2
 800b2a6:	18ed      	addgt	r5, r5, r3
 800b2a8:	341a      	adds	r4, #26
 800b2aa:	42b5      	cmp	r5, r6
 800b2ac:	d11a      	bne.n	800b2e4 <_printf_common+0xcc>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e008      	b.n	800b2c4 <_printf_common+0xac>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	47c0      	blx	r8
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d103      	bne.n	800b2c8 <_printf_common+0xb0>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	e7c4      	b.n	800b256 <_printf_common+0x3e>
 800b2cc:	2030      	movs	r0, #48	; 0x30
 800b2ce:	18e1      	adds	r1, r4, r3
 800b2d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2da:	4422      	add	r2, r4
 800b2dc:	3302      	adds	r3, #2
 800b2de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2e2:	e7c5      	b.n	800b270 <_printf_common+0x58>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c0      	blx	r8
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d0e6      	beq.n	800b2c0 <_printf_common+0xa8>
 800b2f2:	3601      	adds	r6, #1
 800b2f4:	e7d9      	b.n	800b2aa <_printf_common+0x92>
	...

0800b2f8 <_printf_i>:
 800b2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	7e0f      	ldrb	r7, [r1, #24]
 800b2fe:	4691      	mov	r9, r2
 800b300:	2f78      	cmp	r7, #120	; 0x78
 800b302:	4680      	mov	r8, r0
 800b304:	460c      	mov	r4, r1
 800b306:	469a      	mov	sl, r3
 800b308:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b30e:	d807      	bhi.n	800b320 <_printf_i+0x28>
 800b310:	2f62      	cmp	r7, #98	; 0x62
 800b312:	d80a      	bhi.n	800b32a <_printf_i+0x32>
 800b314:	2f00      	cmp	r7, #0
 800b316:	f000 80d9 	beq.w	800b4cc <_printf_i+0x1d4>
 800b31a:	2f58      	cmp	r7, #88	; 0x58
 800b31c:	f000 80a4 	beq.w	800b468 <_printf_i+0x170>
 800b320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b328:	e03a      	b.n	800b3a0 <_printf_i+0xa8>
 800b32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b32e:	2b15      	cmp	r3, #21
 800b330:	d8f6      	bhi.n	800b320 <_printf_i+0x28>
 800b332:	a101      	add	r1, pc, #4	; (adr r1, 800b338 <_printf_i+0x40>)
 800b334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b338:	0800b391 	.word	0x0800b391
 800b33c:	0800b3a5 	.word	0x0800b3a5
 800b340:	0800b321 	.word	0x0800b321
 800b344:	0800b321 	.word	0x0800b321
 800b348:	0800b321 	.word	0x0800b321
 800b34c:	0800b321 	.word	0x0800b321
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b321 	.word	0x0800b321
 800b358:	0800b321 	.word	0x0800b321
 800b35c:	0800b321 	.word	0x0800b321
 800b360:	0800b321 	.word	0x0800b321
 800b364:	0800b4b3 	.word	0x0800b4b3
 800b368:	0800b3d5 	.word	0x0800b3d5
 800b36c:	0800b495 	.word	0x0800b495
 800b370:	0800b321 	.word	0x0800b321
 800b374:	0800b321 	.word	0x0800b321
 800b378:	0800b4d5 	.word	0x0800b4d5
 800b37c:	0800b321 	.word	0x0800b321
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b321 	.word	0x0800b321
 800b388:	0800b321 	.word	0x0800b321
 800b38c:	0800b49d 	.word	0x0800b49d
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	602a      	str	r2, [r5, #0]
 800b398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0a4      	b.n	800b4ee <_printf_i+0x1f6>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	6829      	ldr	r1, [r5, #0]
 800b3a8:	0606      	lsls	r6, r0, #24
 800b3aa:	f101 0304 	add.w	r3, r1, #4
 800b3ae:	d50a      	bpl.n	800b3c6 <_printf_i+0xce>
 800b3b0:	680e      	ldr	r6, [r1, #0]
 800b3b2:	602b      	str	r3, [r5, #0]
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	da03      	bge.n	800b3c0 <_printf_i+0xc8>
 800b3b8:	232d      	movs	r3, #45	; 0x2d
 800b3ba:	4276      	negs	r6, r6
 800b3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c0:	230a      	movs	r3, #10
 800b3c2:	485e      	ldr	r0, [pc, #376]	; (800b53c <_printf_i+0x244>)
 800b3c4:	e019      	b.n	800b3fa <_printf_i+0x102>
 800b3c6:	680e      	ldr	r6, [r1, #0]
 800b3c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	bf18      	it	ne
 800b3d0:	b236      	sxthne	r6, r6
 800b3d2:	e7ef      	b.n	800b3b4 <_printf_i+0xbc>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6029      	str	r1, [r5, #0]
 800b3dc:	0601      	lsls	r1, r0, #24
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0xec>
 800b3e0:	681e      	ldr	r6, [r3, #0]
 800b3e2:	e002      	b.n	800b3ea <_printf_i+0xf2>
 800b3e4:	0646      	lsls	r6, r0, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0xe8>
 800b3e8:	881e      	ldrh	r6, [r3, #0]
 800b3ea:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ec:	bf0c      	ite	eq
 800b3ee:	2308      	moveq	r3, #8
 800b3f0:	230a      	movne	r3, #10
 800b3f2:	4852      	ldr	r0, [pc, #328]	; (800b53c <_printf_i+0x244>)
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3fa:	6865      	ldr	r5, [r4, #4]
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	bfa8      	it	ge
 800b400:	6821      	ldrge	r1, [r4, #0]
 800b402:	60a5      	str	r5, [r4, #8]
 800b404:	bfa4      	itt	ge
 800b406:	f021 0104 	bicge.w	r1, r1, #4
 800b40a:	6021      	strge	r1, [r4, #0]
 800b40c:	b90e      	cbnz	r6, 800b412 <_printf_i+0x11a>
 800b40e:	2d00      	cmp	r5, #0
 800b410:	d04d      	beq.n	800b4ae <_printf_i+0x1b6>
 800b412:	4615      	mov	r5, r2
 800b414:	fbb6 f1f3 	udiv	r1, r6, r3
 800b418:	fb03 6711 	mls	r7, r3, r1, r6
 800b41c:	5dc7      	ldrb	r7, [r0, r7]
 800b41e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b422:	4637      	mov	r7, r6
 800b424:	42bb      	cmp	r3, r7
 800b426:	460e      	mov	r6, r1
 800b428:	d9f4      	bls.n	800b414 <_printf_i+0x11c>
 800b42a:	2b08      	cmp	r3, #8
 800b42c:	d10b      	bne.n	800b446 <_printf_i+0x14e>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	07de      	lsls	r6, r3, #31
 800b432:	d508      	bpl.n	800b446 <_printf_i+0x14e>
 800b434:	6923      	ldr	r3, [r4, #16]
 800b436:	6861      	ldr	r1, [r4, #4]
 800b438:	4299      	cmp	r1, r3
 800b43a:	bfde      	ittt	le
 800b43c:	2330      	movle	r3, #48	; 0x30
 800b43e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b442:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b446:	1b52      	subs	r2, r2, r5
 800b448:	6122      	str	r2, [r4, #16]
 800b44a:	464b      	mov	r3, r9
 800b44c:	4621      	mov	r1, r4
 800b44e:	4640      	mov	r0, r8
 800b450:	f8cd a000 	str.w	sl, [sp]
 800b454:	aa03      	add	r2, sp, #12
 800b456:	f7ff fedf 	bl	800b218 <_printf_common>
 800b45a:	3001      	adds	r0, #1
 800b45c:	d14c      	bne.n	800b4f8 <_printf_i+0x200>
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	b004      	add	sp, #16
 800b464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b468:	4834      	ldr	r0, [pc, #208]	; (800b53c <_printf_i+0x244>)
 800b46a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b46e:	6829      	ldr	r1, [r5, #0]
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	f851 6b04 	ldr.w	r6, [r1], #4
 800b476:	6029      	str	r1, [r5, #0]
 800b478:	061d      	lsls	r5, r3, #24
 800b47a:	d514      	bpl.n	800b4a6 <_printf_i+0x1ae>
 800b47c:	07df      	lsls	r7, r3, #31
 800b47e:	bf44      	itt	mi
 800b480:	f043 0320 	orrmi.w	r3, r3, #32
 800b484:	6023      	strmi	r3, [r4, #0]
 800b486:	b91e      	cbnz	r6, 800b490 <_printf_i+0x198>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	f023 0320 	bic.w	r3, r3, #32
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	2310      	movs	r3, #16
 800b492:	e7af      	b.n	800b3f4 <_printf_i+0xfc>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	f043 0320 	orr.w	r3, r3, #32
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	2378      	movs	r3, #120	; 0x78
 800b49e:	4828      	ldr	r0, [pc, #160]	; (800b540 <_printf_i+0x248>)
 800b4a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4a4:	e7e3      	b.n	800b46e <_printf_i+0x176>
 800b4a6:	0659      	lsls	r1, r3, #25
 800b4a8:	bf48      	it	mi
 800b4aa:	b2b6      	uxthmi	r6, r6
 800b4ac:	e7e6      	b.n	800b47c <_printf_i+0x184>
 800b4ae:	4615      	mov	r5, r2
 800b4b0:	e7bb      	b.n	800b42a <_printf_i+0x132>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	6826      	ldr	r6, [r4, #0]
 800b4b6:	1d18      	adds	r0, r3, #4
 800b4b8:	6961      	ldr	r1, [r4, #20]
 800b4ba:	6028      	str	r0, [r5, #0]
 800b4bc:	0635      	lsls	r5, r6, #24
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	d501      	bpl.n	800b4c6 <_printf_i+0x1ce>
 800b4c2:	6019      	str	r1, [r3, #0]
 800b4c4:	e002      	b.n	800b4cc <_printf_i+0x1d4>
 800b4c6:	0670      	lsls	r0, r6, #25
 800b4c8:	d5fb      	bpl.n	800b4c2 <_printf_i+0x1ca>
 800b4ca:	8019      	strh	r1, [r3, #0]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	4615      	mov	r5, r2
 800b4d0:	6123      	str	r3, [r4, #16]
 800b4d2:	e7ba      	b.n	800b44a <_printf_i+0x152>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	602a      	str	r2, [r5, #0]
 800b4dc:	681d      	ldr	r5, [r3, #0]
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f002 fc33 	bl	800dd4c <memchr>
 800b4e6:	b108      	cbz	r0, 800b4ec <_printf_i+0x1f4>
 800b4e8:	1b40      	subs	r0, r0, r5
 800b4ea:	6060      	str	r0, [r4, #4]
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	6123      	str	r3, [r4, #16]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f6:	e7a8      	b.n	800b44a <_printf_i+0x152>
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	47d0      	blx	sl
 800b502:	3001      	adds	r0, #1
 800b504:	d0ab      	beq.n	800b45e <_printf_i+0x166>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	079b      	lsls	r3, r3, #30
 800b50a:	d413      	bmi.n	800b534 <_printf_i+0x23c>
 800b50c:	68e0      	ldr	r0, [r4, #12]
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	4298      	cmp	r0, r3
 800b512:	bfb8      	it	lt
 800b514:	4618      	movlt	r0, r3
 800b516:	e7a4      	b.n	800b462 <_printf_i+0x16a>
 800b518:	2301      	movs	r3, #1
 800b51a:	4632      	mov	r2, r6
 800b51c:	4649      	mov	r1, r9
 800b51e:	4640      	mov	r0, r8
 800b520:	47d0      	blx	sl
 800b522:	3001      	adds	r0, #1
 800b524:	d09b      	beq.n	800b45e <_printf_i+0x166>
 800b526:	3501      	adds	r5, #1
 800b528:	68e3      	ldr	r3, [r4, #12]
 800b52a:	9903      	ldr	r1, [sp, #12]
 800b52c:	1a5b      	subs	r3, r3, r1
 800b52e:	42ab      	cmp	r3, r5
 800b530:	dcf2      	bgt.n	800b518 <_printf_i+0x220>
 800b532:	e7eb      	b.n	800b50c <_printf_i+0x214>
 800b534:	2500      	movs	r5, #0
 800b536:	f104 0619 	add.w	r6, r4, #25
 800b53a:	e7f5      	b.n	800b528 <_printf_i+0x230>
 800b53c:	0800f8ca 	.word	0x0800f8ca
 800b540:	0800f8db 	.word	0x0800f8db

0800b544 <_scanf_float>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	b087      	sub	sp, #28
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	688b      	ldr	r3, [r1, #8]
 800b54e:	4617      	mov	r7, r2
 800b550:	1e5a      	subs	r2, r3, #1
 800b552:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b556:	bf85      	ittet	hi
 800b558:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b55c:	195b      	addhi	r3, r3, r5
 800b55e:	2300      	movls	r3, #0
 800b560:	9302      	strhi	r3, [sp, #8]
 800b562:	bf88      	it	hi
 800b564:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b568:	468b      	mov	fp, r1
 800b56a:	f04f 0500 	mov.w	r5, #0
 800b56e:	bf8c      	ite	hi
 800b570:	608b      	strhi	r3, [r1, #8]
 800b572:	9302      	strls	r3, [sp, #8]
 800b574:	680b      	ldr	r3, [r1, #0]
 800b576:	4680      	mov	r8, r0
 800b578:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b57c:	f84b 3b1c 	str.w	r3, [fp], #28
 800b580:	460c      	mov	r4, r1
 800b582:	465e      	mov	r6, fp
 800b584:	46aa      	mov	sl, r5
 800b586:	46a9      	mov	r9, r5
 800b588:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b58c:	9501      	str	r5, [sp, #4]
 800b58e:	68a2      	ldr	r2, [r4, #8]
 800b590:	b152      	cbz	r2, 800b5a8 <_scanf_float+0x64>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b4e      	cmp	r3, #78	; 0x4e
 800b598:	d864      	bhi.n	800b664 <_scanf_float+0x120>
 800b59a:	2b40      	cmp	r3, #64	; 0x40
 800b59c:	d83c      	bhi.n	800b618 <_scanf_float+0xd4>
 800b59e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b5a2:	b2c8      	uxtb	r0, r1
 800b5a4:	280e      	cmp	r0, #14
 800b5a6:	d93a      	bls.n	800b61e <_scanf_float+0xda>
 800b5a8:	f1b9 0f00 	cmp.w	r9, #0
 800b5ac:	d003      	beq.n	800b5b6 <_scanf_float+0x72>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5ba:	f1ba 0f01 	cmp.w	sl, #1
 800b5be:	f200 8113 	bhi.w	800b7e8 <_scanf_float+0x2a4>
 800b5c2:	455e      	cmp	r6, fp
 800b5c4:	f200 8105 	bhi.w	800b7d2 <_scanf_float+0x28e>
 800b5c8:	2501      	movs	r5, #1
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	b007      	add	sp, #28
 800b5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b5d6:	2a0d      	cmp	r2, #13
 800b5d8:	d8e6      	bhi.n	800b5a8 <_scanf_float+0x64>
 800b5da:	a101      	add	r1, pc, #4	; (adr r1, 800b5e0 <_scanf_float+0x9c>)
 800b5dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5e0:	0800b71f 	.word	0x0800b71f
 800b5e4:	0800b5a9 	.word	0x0800b5a9
 800b5e8:	0800b5a9 	.word	0x0800b5a9
 800b5ec:	0800b5a9 	.word	0x0800b5a9
 800b5f0:	0800b77f 	.word	0x0800b77f
 800b5f4:	0800b757 	.word	0x0800b757
 800b5f8:	0800b5a9 	.word	0x0800b5a9
 800b5fc:	0800b5a9 	.word	0x0800b5a9
 800b600:	0800b72d 	.word	0x0800b72d
 800b604:	0800b5a9 	.word	0x0800b5a9
 800b608:	0800b5a9 	.word	0x0800b5a9
 800b60c:	0800b5a9 	.word	0x0800b5a9
 800b610:	0800b5a9 	.word	0x0800b5a9
 800b614:	0800b6e5 	.word	0x0800b6e5
 800b618:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b61c:	e7db      	b.n	800b5d6 <_scanf_float+0x92>
 800b61e:	290e      	cmp	r1, #14
 800b620:	d8c2      	bhi.n	800b5a8 <_scanf_float+0x64>
 800b622:	a001      	add	r0, pc, #4	; (adr r0, 800b628 <_scanf_float+0xe4>)
 800b624:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b628:	0800b6d7 	.word	0x0800b6d7
 800b62c:	0800b5a9 	.word	0x0800b5a9
 800b630:	0800b6d7 	.word	0x0800b6d7
 800b634:	0800b76b 	.word	0x0800b76b
 800b638:	0800b5a9 	.word	0x0800b5a9
 800b63c:	0800b685 	.word	0x0800b685
 800b640:	0800b6c1 	.word	0x0800b6c1
 800b644:	0800b6c1 	.word	0x0800b6c1
 800b648:	0800b6c1 	.word	0x0800b6c1
 800b64c:	0800b6c1 	.word	0x0800b6c1
 800b650:	0800b6c1 	.word	0x0800b6c1
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b6c1 	.word	0x0800b6c1
 800b65c:	0800b6c1 	.word	0x0800b6c1
 800b660:	0800b6c1 	.word	0x0800b6c1
 800b664:	2b6e      	cmp	r3, #110	; 0x6e
 800b666:	d809      	bhi.n	800b67c <_scanf_float+0x138>
 800b668:	2b60      	cmp	r3, #96	; 0x60
 800b66a:	d8b2      	bhi.n	800b5d2 <_scanf_float+0x8e>
 800b66c:	2b54      	cmp	r3, #84	; 0x54
 800b66e:	d077      	beq.n	800b760 <_scanf_float+0x21c>
 800b670:	2b59      	cmp	r3, #89	; 0x59
 800b672:	d199      	bne.n	800b5a8 <_scanf_float+0x64>
 800b674:	2d07      	cmp	r5, #7
 800b676:	d197      	bne.n	800b5a8 <_scanf_float+0x64>
 800b678:	2508      	movs	r5, #8
 800b67a:	e029      	b.n	800b6d0 <_scanf_float+0x18c>
 800b67c:	2b74      	cmp	r3, #116	; 0x74
 800b67e:	d06f      	beq.n	800b760 <_scanf_float+0x21c>
 800b680:	2b79      	cmp	r3, #121	; 0x79
 800b682:	e7f6      	b.n	800b672 <_scanf_float+0x12e>
 800b684:	6821      	ldr	r1, [r4, #0]
 800b686:	05c8      	lsls	r0, r1, #23
 800b688:	d51a      	bpl.n	800b6c0 <_scanf_float+0x17c>
 800b68a:	9b02      	ldr	r3, [sp, #8]
 800b68c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b690:	6021      	str	r1, [r4, #0]
 800b692:	f109 0901 	add.w	r9, r9, #1
 800b696:	b11b      	cbz	r3, 800b6a0 <_scanf_float+0x15c>
 800b698:	3b01      	subs	r3, #1
 800b69a:	3201      	adds	r2, #1
 800b69c:	9302      	str	r3, [sp, #8]
 800b69e:	60a2      	str	r2, [r4, #8]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	6123      	str	r3, [r4, #16]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	f340 8084 	ble.w	800b7c0 <_scanf_float+0x27c>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	603b      	str	r3, [r7, #0]
 800b6be:	e766      	b.n	800b58e <_scanf_float+0x4a>
 800b6c0:	eb1a 0f05 	cmn.w	sl, r5
 800b6c4:	f47f af70 	bne.w	800b5a8 <_scanf_float+0x64>
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b6ce:	6022      	str	r2, [r4, #0]
 800b6d0:	f806 3b01 	strb.w	r3, [r6], #1
 800b6d4:	e7e4      	b.n	800b6a0 <_scanf_float+0x15c>
 800b6d6:	6822      	ldr	r2, [r4, #0]
 800b6d8:	0610      	lsls	r0, r2, #24
 800b6da:	f57f af65 	bpl.w	800b5a8 <_scanf_float+0x64>
 800b6de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6e2:	e7f4      	b.n	800b6ce <_scanf_float+0x18a>
 800b6e4:	f1ba 0f00 	cmp.w	sl, #0
 800b6e8:	d10e      	bne.n	800b708 <_scanf_float+0x1c4>
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	d10e      	bne.n	800b70e <_scanf_float+0x1ca>
 800b6f0:	6822      	ldr	r2, [r4, #0]
 800b6f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b6f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b6fa:	d108      	bne.n	800b70e <_scanf_float+0x1ca>
 800b6fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b700:	f04f 0a01 	mov.w	sl, #1
 800b704:	6022      	str	r2, [r4, #0]
 800b706:	e7e3      	b.n	800b6d0 <_scanf_float+0x18c>
 800b708:	f1ba 0f02 	cmp.w	sl, #2
 800b70c:	d055      	beq.n	800b7ba <_scanf_float+0x276>
 800b70e:	2d01      	cmp	r5, #1
 800b710:	d002      	beq.n	800b718 <_scanf_float+0x1d4>
 800b712:	2d04      	cmp	r5, #4
 800b714:	f47f af48 	bne.w	800b5a8 <_scanf_float+0x64>
 800b718:	3501      	adds	r5, #1
 800b71a:	b2ed      	uxtb	r5, r5
 800b71c:	e7d8      	b.n	800b6d0 <_scanf_float+0x18c>
 800b71e:	f1ba 0f01 	cmp.w	sl, #1
 800b722:	f47f af41 	bne.w	800b5a8 <_scanf_float+0x64>
 800b726:	f04f 0a02 	mov.w	sl, #2
 800b72a:	e7d1      	b.n	800b6d0 <_scanf_float+0x18c>
 800b72c:	b97d      	cbnz	r5, 800b74e <_scanf_float+0x20a>
 800b72e:	f1b9 0f00 	cmp.w	r9, #0
 800b732:	f47f af3c 	bne.w	800b5ae <_scanf_float+0x6a>
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b73c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b740:	f47f af39 	bne.w	800b5b6 <_scanf_float+0x72>
 800b744:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b748:	2501      	movs	r5, #1
 800b74a:	6022      	str	r2, [r4, #0]
 800b74c:	e7c0      	b.n	800b6d0 <_scanf_float+0x18c>
 800b74e:	2d03      	cmp	r5, #3
 800b750:	d0e2      	beq.n	800b718 <_scanf_float+0x1d4>
 800b752:	2d05      	cmp	r5, #5
 800b754:	e7de      	b.n	800b714 <_scanf_float+0x1d0>
 800b756:	2d02      	cmp	r5, #2
 800b758:	f47f af26 	bne.w	800b5a8 <_scanf_float+0x64>
 800b75c:	2503      	movs	r5, #3
 800b75e:	e7b7      	b.n	800b6d0 <_scanf_float+0x18c>
 800b760:	2d06      	cmp	r5, #6
 800b762:	f47f af21 	bne.w	800b5a8 <_scanf_float+0x64>
 800b766:	2507      	movs	r5, #7
 800b768:	e7b2      	b.n	800b6d0 <_scanf_float+0x18c>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	0591      	lsls	r1, r2, #22
 800b76e:	f57f af1b 	bpl.w	800b5a8 <_scanf_float+0x64>
 800b772:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b776:	6022      	str	r2, [r4, #0]
 800b778:	f8cd 9004 	str.w	r9, [sp, #4]
 800b77c:	e7a8      	b.n	800b6d0 <_scanf_float+0x18c>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b784:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b788:	d006      	beq.n	800b798 <_scanf_float+0x254>
 800b78a:	0550      	lsls	r0, r2, #21
 800b78c:	f57f af0c 	bpl.w	800b5a8 <_scanf_float+0x64>
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	f43f af0f 	beq.w	800b5b6 <_scanf_float+0x72>
 800b798:	0591      	lsls	r1, r2, #22
 800b79a:	bf58      	it	pl
 800b79c:	9901      	ldrpl	r1, [sp, #4]
 800b79e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7a2:	bf58      	it	pl
 800b7a4:	eba9 0101 	subpl.w	r1, r9, r1
 800b7a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b7ac:	f04f 0900 	mov.w	r9, #0
 800b7b0:	bf58      	it	pl
 800b7b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	e78a      	b.n	800b6d0 <_scanf_float+0x18c>
 800b7ba:	f04f 0a03 	mov.w	sl, #3
 800b7be:	e787      	b.n	800b6d0 <_scanf_float+0x18c>
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7c8:	4798      	blx	r3
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f43f aedf 	beq.w	800b58e <_scanf_float+0x4a>
 800b7d0:	e6ea      	b.n	800b5a8 <_scanf_float+0x64>
 800b7d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7d6:	463a      	mov	r2, r7
 800b7d8:	4640      	mov	r0, r8
 800b7da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7de:	4798      	blx	r3
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	6123      	str	r3, [r4, #16]
 800b7e6:	e6ec      	b.n	800b5c2 <_scanf_float+0x7e>
 800b7e8:	1e6b      	subs	r3, r5, #1
 800b7ea:	2b06      	cmp	r3, #6
 800b7ec:	d825      	bhi.n	800b83a <_scanf_float+0x2f6>
 800b7ee:	2d02      	cmp	r5, #2
 800b7f0:	d836      	bhi.n	800b860 <_scanf_float+0x31c>
 800b7f2:	455e      	cmp	r6, fp
 800b7f4:	f67f aee8 	bls.w	800b5c8 <_scanf_float+0x84>
 800b7f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	4640      	mov	r0, r8
 800b800:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b804:	4798      	blx	r3
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	3b01      	subs	r3, #1
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	e7f1      	b.n	800b7f2 <_scanf_float+0x2ae>
 800b80e:	9802      	ldr	r0, [sp, #8]
 800b810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b814:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b818:	463a      	mov	r2, r7
 800b81a:	9002      	str	r0, [sp, #8]
 800b81c:	4640      	mov	r0, r8
 800b81e:	4798      	blx	r3
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	3b01      	subs	r3, #1
 800b824:	6123      	str	r3, [r4, #16]
 800b826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b82a:	fa5f fa8a 	uxtb.w	sl, sl
 800b82e:	f1ba 0f02 	cmp.w	sl, #2
 800b832:	d1ec      	bne.n	800b80e <_scanf_float+0x2ca>
 800b834:	3d03      	subs	r5, #3
 800b836:	b2ed      	uxtb	r5, r5
 800b838:	1b76      	subs	r6, r6, r5
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	05da      	lsls	r2, r3, #23
 800b83e:	d52f      	bpl.n	800b8a0 <_scanf_float+0x35c>
 800b840:	055b      	lsls	r3, r3, #21
 800b842:	d510      	bpl.n	800b866 <_scanf_float+0x322>
 800b844:	455e      	cmp	r6, fp
 800b846:	f67f aebf 	bls.w	800b5c8 <_scanf_float+0x84>
 800b84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b84e:	463a      	mov	r2, r7
 800b850:	4640      	mov	r0, r8
 800b852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b856:	4798      	blx	r3
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	e7f1      	b.n	800b844 <_scanf_float+0x300>
 800b860:	46aa      	mov	sl, r5
 800b862:	9602      	str	r6, [sp, #8]
 800b864:	e7df      	b.n	800b826 <_scanf_float+0x2e2>
 800b866:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	2965      	cmp	r1, #101	; 0x65
 800b86e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b872:	f106 35ff 	add.w	r5, r6, #4294967295
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	d00c      	beq.n	800b894 <_scanf_float+0x350>
 800b87a:	2945      	cmp	r1, #69	; 0x45
 800b87c:	d00a      	beq.n	800b894 <_scanf_float+0x350>
 800b87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b882:	463a      	mov	r2, r7
 800b884:	4640      	mov	r0, r8
 800b886:	4798      	blx	r3
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b88e:	3b01      	subs	r3, #1
 800b890:	1eb5      	subs	r5, r6, #2
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	463a      	mov	r2, r7
 800b896:	4640      	mov	r0, r8
 800b898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b89c:	4798      	blx	r3
 800b89e:	462e      	mov	r6, r5
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	f015 0510 	ands.w	r5, r5, #16
 800b8a6:	d155      	bne.n	800b954 <_scanf_float+0x410>
 800b8a8:	7035      	strb	r5, [r6, #0]
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b4:	d11b      	bne.n	800b8ee <_scanf_float+0x3aa>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	454b      	cmp	r3, r9
 800b8ba:	eba3 0209 	sub.w	r2, r3, r9
 800b8be:	d123      	bne.n	800b908 <_scanf_float+0x3c4>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	f000 fe93 	bl	800c5f0 <_strtod_r>
 800b8ca:	6822      	ldr	r2, [r4, #0]
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	f012 0f02 	tst.w	r2, #2
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	d021      	beq.n	800b91e <_scanf_float+0x3da>
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	9903      	ldr	r1, [sp, #12]
 800b8de:	600a      	str	r2, [r1, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	e9c3 6700 	strd	r6, r7, [r3]
 800b8e6:	68e3      	ldr	r3, [r4, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60e3      	str	r3, [r4, #12]
 800b8ec:	e66d      	b.n	800b5ca <_scanf_float+0x86>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0e5      	beq.n	800b8c0 <_scanf_float+0x37c>
 800b8f4:	9905      	ldr	r1, [sp, #20]
 800b8f6:	230a      	movs	r3, #10
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	3101      	adds	r1, #1
 800b8fe:	f000 ff77 	bl	800c7f0 <_strtol_r>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	9e05      	ldr	r6, [sp, #20]
 800b906:	1ac2      	subs	r2, r0, r3
 800b908:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b90c:	429e      	cmp	r6, r3
 800b90e:	bf28      	it	cs
 800b910:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b914:	4630      	mov	r0, r6
 800b916:	4910      	ldr	r1, [pc, #64]	; (800b958 <_scanf_float+0x414>)
 800b918:	f000 f836 	bl	800b988 <siprintf>
 800b91c:	e7d0      	b.n	800b8c0 <_scanf_float+0x37c>
 800b91e:	f012 0f04 	tst.w	r2, #4
 800b922:	f103 0204 	add.w	r2, r3, #4
 800b926:	d1d9      	bne.n	800b8dc <_scanf_float+0x398>
 800b928:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b92c:	f8cc 2000 	str.w	r2, [ip]
 800b930:	f8d3 8000 	ldr.w	r8, [r3]
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	f7f5 f8ae 	bl	8000a98 <__aeabi_dcmpun>
 800b93c:	b128      	cbz	r0, 800b94a <_scanf_float+0x406>
 800b93e:	4807      	ldr	r0, [pc, #28]	; (800b95c <_scanf_float+0x418>)
 800b940:	f000 f81e 	bl	800b980 <nanf>
 800b944:	f8c8 0000 	str.w	r0, [r8]
 800b948:	e7cd      	b.n	800b8e6 <_scanf_float+0x3a2>
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f5 f901 	bl	8000b54 <__aeabi_d2f>
 800b952:	e7f7      	b.n	800b944 <_scanf_float+0x400>
 800b954:	2500      	movs	r5, #0
 800b956:	e638      	b.n	800b5ca <_scanf_float+0x86>
 800b958:	0800f8ec 	.word	0x0800f8ec
 800b95c:	0800fcf8 	.word	0x0800fcf8

0800b960 <_sbrk_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	2300      	movs	r3, #0
 800b964:	4d05      	ldr	r5, [pc, #20]	; (800b97c <_sbrk_r+0x1c>)
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	f7f5 fd86 	bl	800147c <_sbrk>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_sbrk_r+0x1a>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_sbrk_r+0x1a>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20001c6c 	.word	0x20001c6c

0800b980 <nanf>:
 800b980:	4800      	ldr	r0, [pc, #0]	; (800b984 <nanf+0x4>)
 800b982:	4770      	bx	lr
 800b984:	7fc00000 	.word	0x7fc00000

0800b988 <siprintf>:
 800b988:	b40e      	push	{r1, r2, r3}
 800b98a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b98e:	b500      	push	{lr}
 800b990:	b09c      	sub	sp, #112	; 0x70
 800b992:	ab1d      	add	r3, sp, #116	; 0x74
 800b994:	9002      	str	r0, [sp, #8]
 800b996:	9006      	str	r0, [sp, #24]
 800b998:	9107      	str	r1, [sp, #28]
 800b99a:	9104      	str	r1, [sp, #16]
 800b99c:	4808      	ldr	r0, [pc, #32]	; (800b9c0 <siprintf+0x38>)
 800b99e:	4909      	ldr	r1, [pc, #36]	; (800b9c4 <siprintf+0x3c>)
 800b9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a4:	9105      	str	r1, [sp, #20]
 800b9a6:	6800      	ldr	r0, [r0, #0]
 800b9a8:	a902      	add	r1, sp, #8
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	f002 ff1e 	bl	800e7ec <_svfiprintf_r>
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	b01c      	add	sp, #112	; 0x70
 800b9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9bc:	b003      	add	sp, #12
 800b9be:	4770      	bx	lr
 800b9c0:	2000020c 	.word	0x2000020c
 800b9c4:	ffff0208 	.word	0xffff0208

0800b9c8 <strcpy>:
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ce:	f803 2b01 	strb.w	r2, [r3], #1
 800b9d2:	2a00      	cmp	r2, #0
 800b9d4:	d1f9      	bne.n	800b9ca <strcpy+0x2>
 800b9d6:	4770      	bx	lr

0800b9d8 <sulp>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	460f      	mov	r7, r1
 800b9de:	4690      	mov	r8, r2
 800b9e0:	f002 fd4c 	bl	800e47c <__ulp>
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	d011      	beq.n	800ba12 <sulp+0x3a>
 800b9ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b9f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd0b      	ble.n	800ba12 <sulp+0x3a>
 800b9fa:	2400      	movs	r4, #0
 800b9fc:	051b      	lsls	r3, r3, #20
 800b9fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba06:	4622      	mov	r2, r4
 800ba08:	462b      	mov	r3, r5
 800ba0a:	f7f4 fdab 	bl	8000564 <__aeabi_dmul>
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1a:	0000      	movs	r0, r0
 800ba1c:	0000      	movs	r0, r0
	...

0800ba20 <_strtod_l>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	469b      	mov	fp, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	b09f      	sub	sp, #124	; 0x7c
 800ba2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba2c:	4b9e      	ldr	r3, [pc, #632]	; (800bca8 <_strtod_l+0x288>)
 800ba2e:	4682      	mov	sl, r0
 800ba30:	681f      	ldr	r7, [r3, #0]
 800ba32:	460e      	mov	r6, r1
 800ba34:	4638      	mov	r0, r7
 800ba36:	9215      	str	r2, [sp, #84]	; 0x54
 800ba38:	f7f4 fbd0 	bl	80001dc <strlen>
 800ba3c:	f04f 0800 	mov.w	r8, #0
 800ba40:	4604      	mov	r4, r0
 800ba42:	f04f 0900 	mov.w	r9, #0
 800ba46:	9619      	str	r6, [sp, #100]	; 0x64
 800ba48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	2a2b      	cmp	r2, #43	; 0x2b
 800ba4e:	d04c      	beq.n	800baea <_strtod_l+0xca>
 800ba50:	d83a      	bhi.n	800bac8 <_strtod_l+0xa8>
 800ba52:	2a0d      	cmp	r2, #13
 800ba54:	d833      	bhi.n	800babe <_strtod_l+0x9e>
 800ba56:	2a08      	cmp	r2, #8
 800ba58:	d833      	bhi.n	800bac2 <_strtod_l+0xa2>
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d03d      	beq.n	800bada <_strtod_l+0xba>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	930a      	str	r3, [sp, #40]	; 0x28
 800ba62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ba64:	782b      	ldrb	r3, [r5, #0]
 800ba66:	2b30      	cmp	r3, #48	; 0x30
 800ba68:	f040 80aa 	bne.w	800bbc0 <_strtod_l+0x1a0>
 800ba6c:	786b      	ldrb	r3, [r5, #1]
 800ba6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba72:	2b58      	cmp	r3, #88	; 0x58
 800ba74:	d166      	bne.n	800bb44 <_strtod_l+0x124>
 800ba76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba78:	4650      	mov	r0, sl
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	ab1a      	add	r3, sp, #104	; 0x68
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	4a8a      	ldr	r2, [pc, #552]	; (800bcac <_strtod_l+0x28c>)
 800ba82:	f8cd b008 	str.w	fp, [sp, #8]
 800ba86:	ab1b      	add	r3, sp, #108	; 0x6c
 800ba88:	a919      	add	r1, sp, #100	; 0x64
 800ba8a:	f001 fe4b 	bl	800d724 <__gethex>
 800ba8e:	f010 0607 	ands.w	r6, r0, #7
 800ba92:	4604      	mov	r4, r0
 800ba94:	d005      	beq.n	800baa2 <_strtod_l+0x82>
 800ba96:	2e06      	cmp	r6, #6
 800ba98:	d129      	bne.n	800baee <_strtod_l+0xce>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	9519      	str	r5, [sp, #100]	; 0x64
 800baa0:	930a      	str	r3, [sp, #40]	; 0x28
 800baa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 858a 	bne.w	800c5be <_strtod_l+0xb9e>
 800baaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baac:	b1d3      	cbz	r3, 800bae4 <_strtod_l+0xc4>
 800baae:	4642      	mov	r2, r8
 800bab0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bab4:	4610      	mov	r0, r2
 800bab6:	4619      	mov	r1, r3
 800bab8:	b01f      	add	sp, #124	; 0x7c
 800baba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babe:	2a20      	cmp	r2, #32
 800bac0:	d1cd      	bne.n	800ba5e <_strtod_l+0x3e>
 800bac2:	3301      	adds	r3, #1
 800bac4:	9319      	str	r3, [sp, #100]	; 0x64
 800bac6:	e7bf      	b.n	800ba48 <_strtod_l+0x28>
 800bac8:	2a2d      	cmp	r2, #45	; 0x2d
 800baca:	d1c8      	bne.n	800ba5e <_strtod_l+0x3e>
 800bacc:	2201      	movs	r2, #1
 800bace:	920a      	str	r2, [sp, #40]	; 0x28
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	9219      	str	r2, [sp, #100]	; 0x64
 800bad4:	785b      	ldrb	r3, [r3, #1]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1c3      	bne.n	800ba62 <_strtod_l+0x42>
 800bada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800badc:	9619      	str	r6, [sp, #100]	; 0x64
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 856b 	bne.w	800c5ba <_strtod_l+0xb9a>
 800bae4:	4642      	mov	r2, r8
 800bae6:	464b      	mov	r3, r9
 800bae8:	e7e4      	b.n	800bab4 <_strtod_l+0x94>
 800baea:	2200      	movs	r2, #0
 800baec:	e7ef      	b.n	800bace <_strtod_l+0xae>
 800baee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800baf0:	b13a      	cbz	r2, 800bb02 <_strtod_l+0xe2>
 800baf2:	2135      	movs	r1, #53	; 0x35
 800baf4:	a81c      	add	r0, sp, #112	; 0x70
 800baf6:	f002 fdc5 	bl	800e684 <__copybits>
 800bafa:	4650      	mov	r0, sl
 800bafc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bafe:	f002 f98d 	bl	800de1c <_Bfree>
 800bb02:	3e01      	subs	r6, #1
 800bb04:	2e04      	cmp	r6, #4
 800bb06:	d806      	bhi.n	800bb16 <_strtod_l+0xf6>
 800bb08:	e8df f006 	tbb	[pc, r6]
 800bb0c:	1714030a 	.word	0x1714030a
 800bb10:	0a          	.byte	0x0a
 800bb11:	00          	.byte	0x00
 800bb12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800bb16:	0721      	lsls	r1, r4, #28
 800bb18:	d5c3      	bpl.n	800baa2 <_strtod_l+0x82>
 800bb1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800bb1e:	e7c0      	b.n	800baa2 <_strtod_l+0x82>
 800bb20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bb22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800bb26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bb32:	e7f0      	b.n	800bb16 <_strtod_l+0xf6>
 800bb34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bcb0 <_strtod_l+0x290>
 800bb38:	e7ed      	b.n	800bb16 <_strtod_l+0xf6>
 800bb3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bb3e:	f04f 38ff 	mov.w	r8, #4294967295
 800bb42:	e7e8      	b.n	800bb16 <_strtod_l+0xf6>
 800bb44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	9219      	str	r2, [sp, #100]	; 0x64
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b30      	cmp	r3, #48	; 0x30
 800bb4e:	d0f9      	beq.n	800bb44 <_strtod_l+0x124>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0a6      	beq.n	800baa2 <_strtod_l+0x82>
 800bb54:	2301      	movs	r3, #1
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	469b      	mov	fp, r3
 800bb62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bb66:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bb68:	7805      	ldrb	r5, [r0, #0]
 800bb6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800bb6e:	b2d9      	uxtb	r1, r3
 800bb70:	2909      	cmp	r1, #9
 800bb72:	d927      	bls.n	800bbc4 <_strtod_l+0x1a4>
 800bb74:	4622      	mov	r2, r4
 800bb76:	4639      	mov	r1, r7
 800bb78:	f002 ff3e 	bl	800e9f8 <strncmp>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d033      	beq.n	800bbe8 <_strtod_l+0x1c8>
 800bb80:	2000      	movs	r0, #0
 800bb82:	462a      	mov	r2, r5
 800bb84:	465c      	mov	r4, fp
 800bb86:	4603      	mov	r3, r0
 800bb88:	9004      	str	r0, [sp, #16]
 800bb8a:	2a65      	cmp	r2, #101	; 0x65
 800bb8c:	d001      	beq.n	800bb92 <_strtod_l+0x172>
 800bb8e:	2a45      	cmp	r2, #69	; 0x45
 800bb90:	d114      	bne.n	800bbbc <_strtod_l+0x19c>
 800bb92:	b91c      	cbnz	r4, 800bb9c <_strtod_l+0x17c>
 800bb94:	9a07      	ldr	r2, [sp, #28]
 800bb96:	4302      	orrs	r2, r0
 800bb98:	d09f      	beq.n	800bada <_strtod_l+0xba>
 800bb9a:	2400      	movs	r4, #0
 800bb9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800bb9e:	1c72      	adds	r2, r6, #1
 800bba0:	9219      	str	r2, [sp, #100]	; 0x64
 800bba2:	7872      	ldrb	r2, [r6, #1]
 800bba4:	2a2b      	cmp	r2, #43	; 0x2b
 800bba6:	d079      	beq.n	800bc9c <_strtod_l+0x27c>
 800bba8:	2a2d      	cmp	r2, #45	; 0x2d
 800bbaa:	f000 8083 	beq.w	800bcb4 <_strtod_l+0x294>
 800bbae:	2700      	movs	r7, #0
 800bbb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbb4:	2909      	cmp	r1, #9
 800bbb6:	f240 8083 	bls.w	800bcc0 <_strtod_l+0x2a0>
 800bbba:	9619      	str	r6, [sp, #100]	; 0x64
 800bbbc:	2500      	movs	r5, #0
 800bbbe:	e09f      	b.n	800bd00 <_strtod_l+0x2e0>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e7c8      	b.n	800bb56 <_strtod_l+0x136>
 800bbc4:	f1bb 0f08 	cmp.w	fp, #8
 800bbc8:	bfd5      	itete	le
 800bbca:	9906      	ldrle	r1, [sp, #24]
 800bbcc:	9905      	ldrgt	r1, [sp, #20]
 800bbce:	fb02 3301 	mlale	r3, r2, r1, r3
 800bbd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bbd6:	f100 0001 	add.w	r0, r0, #1
 800bbda:	bfd4      	ite	le
 800bbdc:	9306      	strle	r3, [sp, #24]
 800bbde:	9305      	strgt	r3, [sp, #20]
 800bbe0:	f10b 0b01 	add.w	fp, fp, #1
 800bbe4:	9019      	str	r0, [sp, #100]	; 0x64
 800bbe6:	e7be      	b.n	800bb66 <_strtod_l+0x146>
 800bbe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbea:	191a      	adds	r2, r3, r4
 800bbec:	9219      	str	r2, [sp, #100]	; 0x64
 800bbee:	5d1a      	ldrb	r2, [r3, r4]
 800bbf0:	f1bb 0f00 	cmp.w	fp, #0
 800bbf4:	d036      	beq.n	800bc64 <_strtod_l+0x244>
 800bbf6:	465c      	mov	r4, fp
 800bbf8:	9004      	str	r0, [sp, #16]
 800bbfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bbfe:	2b09      	cmp	r3, #9
 800bc00:	d912      	bls.n	800bc28 <_strtod_l+0x208>
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7c1      	b.n	800bb8a <_strtod_l+0x16a>
 800bc06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc08:	3001      	adds	r0, #1
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	9219      	str	r2, [sp, #100]	; 0x64
 800bc0e:	785a      	ldrb	r2, [r3, #1]
 800bc10:	2a30      	cmp	r2, #48	; 0x30
 800bc12:	d0f8      	beq.n	800bc06 <_strtod_l+0x1e6>
 800bc14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	f200 84d5 	bhi.w	800c5c8 <_strtod_l+0xba8>
 800bc1e:	9004      	str	r0, [sp, #16]
 800bc20:	2000      	movs	r0, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc26:	9308      	str	r3, [sp, #32]
 800bc28:	3a30      	subs	r2, #48	; 0x30
 800bc2a:	f100 0301 	add.w	r3, r0, #1
 800bc2e:	d013      	beq.n	800bc58 <_strtod_l+0x238>
 800bc30:	9904      	ldr	r1, [sp, #16]
 800bc32:	1905      	adds	r5, r0, r4
 800bc34:	4419      	add	r1, r3
 800bc36:	9104      	str	r1, [sp, #16]
 800bc38:	4623      	mov	r3, r4
 800bc3a:	210a      	movs	r1, #10
 800bc3c:	42ab      	cmp	r3, r5
 800bc3e:	d113      	bne.n	800bc68 <_strtod_l+0x248>
 800bc40:	1823      	adds	r3, r4, r0
 800bc42:	2b08      	cmp	r3, #8
 800bc44:	f104 0401 	add.w	r4, r4, #1
 800bc48:	4404      	add	r4, r0
 800bc4a:	dc1b      	bgt.n	800bc84 <_strtod_l+0x264>
 800bc4c:	230a      	movs	r3, #10
 800bc4e:	9906      	ldr	r1, [sp, #24]
 800bc50:	fb03 2301 	mla	r3, r3, r1, r2
 800bc54:	9306      	str	r3, [sp, #24]
 800bc56:	2300      	movs	r3, #0
 800bc58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	1c51      	adds	r1, r2, #1
 800bc5e:	9119      	str	r1, [sp, #100]	; 0x64
 800bc60:	7852      	ldrb	r2, [r2, #1]
 800bc62:	e7ca      	b.n	800bbfa <_strtod_l+0x1da>
 800bc64:	4658      	mov	r0, fp
 800bc66:	e7d3      	b.n	800bc10 <_strtod_l+0x1f0>
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	dc04      	bgt.n	800bc76 <_strtod_l+0x256>
 800bc6c:	9f06      	ldr	r7, [sp, #24]
 800bc6e:	434f      	muls	r7, r1
 800bc70:	9706      	str	r7, [sp, #24]
 800bc72:	3301      	adds	r3, #1
 800bc74:	e7e2      	b.n	800bc3c <_strtod_l+0x21c>
 800bc76:	1c5f      	adds	r7, r3, #1
 800bc78:	2f10      	cmp	r7, #16
 800bc7a:	bfde      	ittt	le
 800bc7c:	9f05      	ldrle	r7, [sp, #20]
 800bc7e:	434f      	mulle	r7, r1
 800bc80:	9705      	strle	r7, [sp, #20]
 800bc82:	e7f6      	b.n	800bc72 <_strtod_l+0x252>
 800bc84:	2c10      	cmp	r4, #16
 800bc86:	bfdf      	itttt	le
 800bc88:	230a      	movle	r3, #10
 800bc8a:	9905      	ldrle	r1, [sp, #20]
 800bc8c:	fb03 2301 	mlale	r3, r3, r1, r2
 800bc90:	9305      	strle	r3, [sp, #20]
 800bc92:	e7e0      	b.n	800bc56 <_strtod_l+0x236>
 800bc94:	2300      	movs	r3, #0
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e77b      	b.n	800bb94 <_strtod_l+0x174>
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	1cb2      	adds	r2, r6, #2
 800bca0:	9219      	str	r2, [sp, #100]	; 0x64
 800bca2:	78b2      	ldrb	r2, [r6, #2]
 800bca4:	e784      	b.n	800bbb0 <_strtod_l+0x190>
 800bca6:	bf00      	nop
 800bca8:	0800fb40 	.word	0x0800fb40
 800bcac:	0800f8f4 	.word	0x0800f8f4
 800bcb0:	7ff00000 	.word	0x7ff00000
 800bcb4:	2701      	movs	r7, #1
 800bcb6:	e7f2      	b.n	800bc9e <_strtod_l+0x27e>
 800bcb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcba:	1c51      	adds	r1, r2, #1
 800bcbc:	9119      	str	r1, [sp, #100]	; 0x64
 800bcbe:	7852      	ldrb	r2, [r2, #1]
 800bcc0:	2a30      	cmp	r2, #48	; 0x30
 800bcc2:	d0f9      	beq.n	800bcb8 <_strtod_l+0x298>
 800bcc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bcc8:	2908      	cmp	r1, #8
 800bcca:	f63f af77 	bhi.w	800bbbc <_strtod_l+0x19c>
 800bcce:	f04f 0e0a 	mov.w	lr, #10
 800bcd2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bcd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcd8:	9209      	str	r2, [sp, #36]	; 0x24
 800bcda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcdc:	1c51      	adds	r1, r2, #1
 800bcde:	9119      	str	r1, [sp, #100]	; 0x64
 800bce0:	7852      	ldrb	r2, [r2, #1]
 800bce2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bce6:	2d09      	cmp	r5, #9
 800bce8:	d935      	bls.n	800bd56 <_strtod_l+0x336>
 800bcea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bcec:	1b49      	subs	r1, r1, r5
 800bcee:	2908      	cmp	r1, #8
 800bcf0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bcf4:	dc02      	bgt.n	800bcfc <_strtod_l+0x2dc>
 800bcf6:	4565      	cmp	r5, ip
 800bcf8:	bfa8      	it	ge
 800bcfa:	4665      	movge	r5, ip
 800bcfc:	b107      	cbz	r7, 800bd00 <_strtod_l+0x2e0>
 800bcfe:	426d      	negs	r5, r5
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	d14c      	bne.n	800bd9e <_strtod_l+0x37e>
 800bd04:	9907      	ldr	r1, [sp, #28]
 800bd06:	4301      	orrs	r1, r0
 800bd08:	f47f aecb 	bne.w	800baa2 <_strtod_l+0x82>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f47f aee4 	bne.w	800bada <_strtod_l+0xba>
 800bd12:	2a69      	cmp	r2, #105	; 0x69
 800bd14:	d026      	beq.n	800bd64 <_strtod_l+0x344>
 800bd16:	dc23      	bgt.n	800bd60 <_strtod_l+0x340>
 800bd18:	2a49      	cmp	r2, #73	; 0x49
 800bd1a:	d023      	beq.n	800bd64 <_strtod_l+0x344>
 800bd1c:	2a4e      	cmp	r2, #78	; 0x4e
 800bd1e:	f47f aedc 	bne.w	800bada <_strtod_l+0xba>
 800bd22:	499d      	ldr	r1, [pc, #628]	; (800bf98 <_strtod_l+0x578>)
 800bd24:	a819      	add	r0, sp, #100	; 0x64
 800bd26:	f001 ff4b 	bl	800dbc0 <__match>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f43f aed5 	beq.w	800bada <_strtod_l+0xba>
 800bd30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b28      	cmp	r3, #40	; 0x28
 800bd36:	d12c      	bne.n	800bd92 <_strtod_l+0x372>
 800bd38:	4998      	ldr	r1, [pc, #608]	; (800bf9c <_strtod_l+0x57c>)
 800bd3a:	aa1c      	add	r2, sp, #112	; 0x70
 800bd3c:	a819      	add	r0, sp, #100	; 0x64
 800bd3e:	f001 ff53 	bl	800dbe8 <__hexnan>
 800bd42:	2805      	cmp	r0, #5
 800bd44:	d125      	bne.n	800bd92 <_strtod_l+0x372>
 800bd46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800bd4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bd50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bd54:	e6a5      	b.n	800baa2 <_strtod_l+0x82>
 800bd56:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800bd5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800bd5e:	e7bc      	b.n	800bcda <_strtod_l+0x2ba>
 800bd60:	2a6e      	cmp	r2, #110	; 0x6e
 800bd62:	e7dc      	b.n	800bd1e <_strtod_l+0x2fe>
 800bd64:	498e      	ldr	r1, [pc, #568]	; (800bfa0 <_strtod_l+0x580>)
 800bd66:	a819      	add	r0, sp, #100	; 0x64
 800bd68:	f001 ff2a 	bl	800dbc0 <__match>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f43f aeb4 	beq.w	800bada <_strtod_l+0xba>
 800bd72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd74:	498b      	ldr	r1, [pc, #556]	; (800bfa4 <_strtod_l+0x584>)
 800bd76:	3b01      	subs	r3, #1
 800bd78:	a819      	add	r0, sp, #100	; 0x64
 800bd7a:	9319      	str	r3, [sp, #100]	; 0x64
 800bd7c:	f001 ff20 	bl	800dbc0 <__match>
 800bd80:	b910      	cbnz	r0, 800bd88 <_strtod_l+0x368>
 800bd82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd84:	3301      	adds	r3, #1
 800bd86:	9319      	str	r3, [sp, #100]	; 0x64
 800bd88:	f04f 0800 	mov.w	r8, #0
 800bd8c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800bfa8 <_strtod_l+0x588>
 800bd90:	e687      	b.n	800baa2 <_strtod_l+0x82>
 800bd92:	4886      	ldr	r0, [pc, #536]	; (800bfac <_strtod_l+0x58c>)
 800bd94:	f002 fe2a 	bl	800e9ec <nan>
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4689      	mov	r9, r1
 800bd9c:	e681      	b.n	800baa2 <_strtod_l+0x82>
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	f1bb 0f00 	cmp.w	fp, #0
 800bda4:	bf08      	it	eq
 800bda6:	46a3      	moveq	fp, r4
 800bda8:	1aeb      	subs	r3, r5, r3
 800bdaa:	2c10      	cmp	r4, #16
 800bdac:	9806      	ldr	r0, [sp, #24]
 800bdae:	4626      	mov	r6, r4
 800bdb0:	9307      	str	r3, [sp, #28]
 800bdb2:	bfa8      	it	ge
 800bdb4:	2610      	movge	r6, #16
 800bdb6:	f7f4 fb5b 	bl	8000470 <__aeabi_ui2d>
 800bdba:	2c09      	cmp	r4, #9
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	dd13      	ble.n	800bdea <_strtod_l+0x3ca>
 800bdc2:	4b7b      	ldr	r3, [pc, #492]	; (800bfb0 <_strtod_l+0x590>)
 800bdc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdc8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bdcc:	f7f4 fbca 	bl	8000564 <__aeabi_dmul>
 800bdd0:	4680      	mov	r8, r0
 800bdd2:	9805      	ldr	r0, [sp, #20]
 800bdd4:	4689      	mov	r9, r1
 800bdd6:	f7f4 fb4b 	bl	8000470 <__aeabi_ui2d>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4640      	mov	r0, r8
 800bde0:	4649      	mov	r1, r9
 800bde2:	f7f4 fa09 	bl	80001f8 <__adddf3>
 800bde6:	4680      	mov	r8, r0
 800bde8:	4689      	mov	r9, r1
 800bdea:	2c0f      	cmp	r4, #15
 800bdec:	dc36      	bgt.n	800be5c <_strtod_l+0x43c>
 800bdee:	9b07      	ldr	r3, [sp, #28]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f43f ae56 	beq.w	800baa2 <_strtod_l+0x82>
 800bdf6:	dd22      	ble.n	800be3e <_strtod_l+0x41e>
 800bdf8:	2b16      	cmp	r3, #22
 800bdfa:	dc09      	bgt.n	800be10 <_strtod_l+0x3f0>
 800bdfc:	496c      	ldr	r1, [pc, #432]	; (800bfb0 <_strtod_l+0x590>)
 800bdfe:	4642      	mov	r2, r8
 800be00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be04:	464b      	mov	r3, r9
 800be06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be0a:	f7f4 fbab 	bl	8000564 <__aeabi_dmul>
 800be0e:	e7c3      	b.n	800bd98 <_strtod_l+0x378>
 800be10:	9a07      	ldr	r2, [sp, #28]
 800be12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800be16:	4293      	cmp	r3, r2
 800be18:	db20      	blt.n	800be5c <_strtod_l+0x43c>
 800be1a:	4d65      	ldr	r5, [pc, #404]	; (800bfb0 <_strtod_l+0x590>)
 800be1c:	f1c4 040f 	rsb	r4, r4, #15
 800be20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800be24:	4642      	mov	r2, r8
 800be26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be2a:	464b      	mov	r3, r9
 800be2c:	f7f4 fb9a 	bl	8000564 <__aeabi_dmul>
 800be30:	9b07      	ldr	r3, [sp, #28]
 800be32:	1b1c      	subs	r4, r3, r4
 800be34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800be38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be3c:	e7e5      	b.n	800be0a <_strtod_l+0x3ea>
 800be3e:	9b07      	ldr	r3, [sp, #28]
 800be40:	3316      	adds	r3, #22
 800be42:	db0b      	blt.n	800be5c <_strtod_l+0x43c>
 800be44:	9b04      	ldr	r3, [sp, #16]
 800be46:	4640      	mov	r0, r8
 800be48:	1b5d      	subs	r5, r3, r5
 800be4a:	4b59      	ldr	r3, [pc, #356]	; (800bfb0 <_strtod_l+0x590>)
 800be4c:	4649      	mov	r1, r9
 800be4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be56:	f7f4 fcaf 	bl	80007b8 <__aeabi_ddiv>
 800be5a:	e79d      	b.n	800bd98 <_strtod_l+0x378>
 800be5c:	9b07      	ldr	r3, [sp, #28]
 800be5e:	1ba6      	subs	r6, r4, r6
 800be60:	441e      	add	r6, r3
 800be62:	2e00      	cmp	r6, #0
 800be64:	dd74      	ble.n	800bf50 <_strtod_l+0x530>
 800be66:	f016 030f 	ands.w	r3, r6, #15
 800be6a:	d00a      	beq.n	800be82 <_strtod_l+0x462>
 800be6c:	4950      	ldr	r1, [pc, #320]	; (800bfb0 <_strtod_l+0x590>)
 800be6e:	4642      	mov	r2, r8
 800be70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be78:	464b      	mov	r3, r9
 800be7a:	f7f4 fb73 	bl	8000564 <__aeabi_dmul>
 800be7e:	4680      	mov	r8, r0
 800be80:	4689      	mov	r9, r1
 800be82:	f036 060f 	bics.w	r6, r6, #15
 800be86:	d052      	beq.n	800bf2e <_strtod_l+0x50e>
 800be88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800be8c:	dd27      	ble.n	800bede <_strtod_l+0x4be>
 800be8e:	f04f 0b00 	mov.w	fp, #0
 800be92:	f8cd b010 	str.w	fp, [sp, #16]
 800be96:	f8cd b020 	str.w	fp, [sp, #32]
 800be9a:	f8cd b018 	str.w	fp, [sp, #24]
 800be9e:	2322      	movs	r3, #34	; 0x22
 800bea0:	f04f 0800 	mov.w	r8, #0
 800bea4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800bfa8 <_strtod_l+0x588>
 800bea8:	f8ca 3000 	str.w	r3, [sl]
 800beac:	9b08      	ldr	r3, [sp, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f43f adf7 	beq.w	800baa2 <_strtod_l+0x82>
 800beb4:	4650      	mov	r0, sl
 800beb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800beb8:	f001 ffb0 	bl	800de1c <_Bfree>
 800bebc:	4650      	mov	r0, sl
 800bebe:	9906      	ldr	r1, [sp, #24]
 800bec0:	f001 ffac 	bl	800de1c <_Bfree>
 800bec4:	4650      	mov	r0, sl
 800bec6:	9904      	ldr	r1, [sp, #16]
 800bec8:	f001 ffa8 	bl	800de1c <_Bfree>
 800becc:	4650      	mov	r0, sl
 800bece:	9908      	ldr	r1, [sp, #32]
 800bed0:	f001 ffa4 	bl	800de1c <_Bfree>
 800bed4:	4659      	mov	r1, fp
 800bed6:	4650      	mov	r0, sl
 800bed8:	f001 ffa0 	bl	800de1c <_Bfree>
 800bedc:	e5e1      	b.n	800baa2 <_strtod_l+0x82>
 800bede:	4b35      	ldr	r3, [pc, #212]	; (800bfb4 <_strtod_l+0x594>)
 800bee0:	4640      	mov	r0, r8
 800bee2:	9305      	str	r3, [sp, #20]
 800bee4:	2300      	movs	r3, #0
 800bee6:	4649      	mov	r1, r9
 800bee8:	461f      	mov	r7, r3
 800beea:	1136      	asrs	r6, r6, #4
 800beec:	2e01      	cmp	r6, #1
 800beee:	dc21      	bgt.n	800bf34 <_strtod_l+0x514>
 800bef0:	b10b      	cbz	r3, 800bef6 <_strtod_l+0x4d6>
 800bef2:	4680      	mov	r8, r0
 800bef4:	4689      	mov	r9, r1
 800bef6:	4b2f      	ldr	r3, [pc, #188]	; (800bfb4 <_strtod_l+0x594>)
 800bef8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800befc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bf00:	4642      	mov	r2, r8
 800bf02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf06:	464b      	mov	r3, r9
 800bf08:	f7f4 fb2c 	bl	8000564 <__aeabi_dmul>
 800bf0c:	4b26      	ldr	r3, [pc, #152]	; (800bfa8 <_strtod_l+0x588>)
 800bf0e:	460a      	mov	r2, r1
 800bf10:	400b      	ands	r3, r1
 800bf12:	4929      	ldr	r1, [pc, #164]	; (800bfb8 <_strtod_l+0x598>)
 800bf14:	4680      	mov	r8, r0
 800bf16:	428b      	cmp	r3, r1
 800bf18:	d8b9      	bhi.n	800be8e <_strtod_l+0x46e>
 800bf1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf1e:	428b      	cmp	r3, r1
 800bf20:	bf86      	itte	hi
 800bf22:	f04f 38ff 	movhi.w	r8, #4294967295
 800bf26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800bfbc <_strtod_l+0x59c>
 800bf2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9305      	str	r3, [sp, #20]
 800bf32:	e07f      	b.n	800c034 <_strtod_l+0x614>
 800bf34:	07f2      	lsls	r2, r6, #31
 800bf36:	d505      	bpl.n	800bf44 <_strtod_l+0x524>
 800bf38:	9b05      	ldr	r3, [sp, #20]
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 fb11 	bl	8000564 <__aeabi_dmul>
 800bf42:	2301      	movs	r3, #1
 800bf44:	9a05      	ldr	r2, [sp, #20]
 800bf46:	3701      	adds	r7, #1
 800bf48:	3208      	adds	r2, #8
 800bf4a:	1076      	asrs	r6, r6, #1
 800bf4c:	9205      	str	r2, [sp, #20]
 800bf4e:	e7cd      	b.n	800beec <_strtod_l+0x4cc>
 800bf50:	d0ed      	beq.n	800bf2e <_strtod_l+0x50e>
 800bf52:	4276      	negs	r6, r6
 800bf54:	f016 020f 	ands.w	r2, r6, #15
 800bf58:	d00a      	beq.n	800bf70 <_strtod_l+0x550>
 800bf5a:	4b15      	ldr	r3, [pc, #84]	; (800bfb0 <_strtod_l+0x590>)
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf62:	4649      	mov	r1, r9
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	f7f4 fc26 	bl	80007b8 <__aeabi_ddiv>
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	4689      	mov	r9, r1
 800bf70:	1136      	asrs	r6, r6, #4
 800bf72:	d0dc      	beq.n	800bf2e <_strtod_l+0x50e>
 800bf74:	2e1f      	cmp	r6, #31
 800bf76:	dd23      	ble.n	800bfc0 <_strtod_l+0x5a0>
 800bf78:	f04f 0b00 	mov.w	fp, #0
 800bf7c:	f8cd b010 	str.w	fp, [sp, #16]
 800bf80:	f8cd b020 	str.w	fp, [sp, #32]
 800bf84:	f8cd b018 	str.w	fp, [sp, #24]
 800bf88:	2322      	movs	r3, #34	; 0x22
 800bf8a:	f04f 0800 	mov.w	r8, #0
 800bf8e:	f04f 0900 	mov.w	r9, #0
 800bf92:	f8ca 3000 	str.w	r3, [sl]
 800bf96:	e789      	b.n	800beac <_strtod_l+0x48c>
 800bf98:	0800f8c5 	.word	0x0800f8c5
 800bf9c:	0800f908 	.word	0x0800f908
 800bfa0:	0800f8bd 	.word	0x0800f8bd
 800bfa4:	0800fa4c 	.word	0x0800fa4c
 800bfa8:	7ff00000 	.word	0x7ff00000
 800bfac:	0800fcf8 	.word	0x0800fcf8
 800bfb0:	0800fbd8 	.word	0x0800fbd8
 800bfb4:	0800fbb0 	.word	0x0800fbb0
 800bfb8:	7ca00000 	.word	0x7ca00000
 800bfbc:	7fefffff 	.word	0x7fefffff
 800bfc0:	f016 0310 	ands.w	r3, r6, #16
 800bfc4:	bf18      	it	ne
 800bfc6:	236a      	movne	r3, #106	; 0x6a
 800bfc8:	4640      	mov	r0, r8
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	4649      	mov	r1, r9
 800bfce:	2300      	movs	r3, #0
 800bfd0:	4fb0      	ldr	r7, [pc, #704]	; (800c294 <_strtod_l+0x874>)
 800bfd2:	07f2      	lsls	r2, r6, #31
 800bfd4:	d504      	bpl.n	800bfe0 <_strtod_l+0x5c0>
 800bfd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfda:	f7f4 fac3 	bl	8000564 <__aeabi_dmul>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	1076      	asrs	r6, r6, #1
 800bfe2:	f107 0708 	add.w	r7, r7, #8
 800bfe6:	d1f4      	bne.n	800bfd2 <_strtod_l+0x5b2>
 800bfe8:	b10b      	cbz	r3, 800bfee <_strtod_l+0x5ce>
 800bfea:	4680      	mov	r8, r0
 800bfec:	4689      	mov	r9, r1
 800bfee:	9b05      	ldr	r3, [sp, #20]
 800bff0:	b1c3      	cbz	r3, 800c024 <_strtod_l+0x604>
 800bff2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bff6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	4649      	mov	r1, r9
 800bffe:	dd11      	ble.n	800c024 <_strtod_l+0x604>
 800c000:	2b1f      	cmp	r3, #31
 800c002:	f340 8127 	ble.w	800c254 <_strtod_l+0x834>
 800c006:	2b34      	cmp	r3, #52	; 0x34
 800c008:	bfd8      	it	le
 800c00a:	f04f 33ff 	movle.w	r3, #4294967295
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	bfcf      	iteee	gt
 800c014:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c01c:	fa03 f202 	lslle.w	r2, r3, r2
 800c020:	ea02 0901 	andle.w	r9, r2, r1
 800c024:	2200      	movs	r2, #0
 800c026:	2300      	movs	r3, #0
 800c028:	4640      	mov	r0, r8
 800c02a:	4649      	mov	r1, r9
 800c02c:	f7f4 fd02 	bl	8000a34 <__aeabi_dcmpeq>
 800c030:	2800      	cmp	r0, #0
 800c032:	d1a1      	bne.n	800bf78 <_strtod_l+0x558>
 800c034:	9b06      	ldr	r3, [sp, #24]
 800c036:	465a      	mov	r2, fp
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	4650      	mov	r0, sl
 800c03c:	4623      	mov	r3, r4
 800c03e:	9908      	ldr	r1, [sp, #32]
 800c040:	f001 ff54 	bl	800deec <__s2b>
 800c044:	9008      	str	r0, [sp, #32]
 800c046:	2800      	cmp	r0, #0
 800c048:	f43f af21 	beq.w	800be8e <_strtod_l+0x46e>
 800c04c:	9b04      	ldr	r3, [sp, #16]
 800c04e:	f04f 0b00 	mov.w	fp, #0
 800c052:	1b5d      	subs	r5, r3, r5
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	f8cd b010 	str.w	fp, [sp, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	bfb4      	ite	lt
 800c05e:	462b      	movlt	r3, r5
 800c060:	2300      	movge	r3, #0
 800c062:	930e      	str	r3, [sp, #56]	; 0x38
 800c064:	9b07      	ldr	r3, [sp, #28]
 800c066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c06a:	9314      	str	r3, [sp, #80]	; 0x50
 800c06c:	9b08      	ldr	r3, [sp, #32]
 800c06e:	4650      	mov	r0, sl
 800c070:	6859      	ldr	r1, [r3, #4]
 800c072:	f001 fe93 	bl	800dd9c <_Balloc>
 800c076:	9006      	str	r0, [sp, #24]
 800c078:	2800      	cmp	r0, #0
 800c07a:	f43f af10 	beq.w	800be9e <_strtod_l+0x47e>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	300c      	adds	r0, #12
 800c082:	691a      	ldr	r2, [r3, #16]
 800c084:	f103 010c 	add.w	r1, r3, #12
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f001 fe6c 	bl	800dd68 <memcpy>
 800c090:	ab1c      	add	r3, sp, #112	; 0x70
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	ab1b      	add	r3, sp, #108	; 0x6c
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	4642      	mov	r2, r8
 800c09a:	464b      	mov	r3, r9
 800c09c:	4650      	mov	r0, sl
 800c09e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800c0a2:	f002 fa65 	bl	800e570 <__d2b>
 800c0a6:	901a      	str	r0, [sp, #104]	; 0x68
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	f43f aef8 	beq.w	800be9e <_strtod_l+0x47e>
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	f001 ffb3 	bl	800e01c <__i2b>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	9004      	str	r0, [sp, #16]
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	f43f aeef 	beq.w	800be9e <_strtod_l+0x47e>
 800c0c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c0c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c0c4:	2d00      	cmp	r5, #0
 800c0c6:	bfab      	itete	ge
 800c0c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c0ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800c0cc:	18ee      	addge	r6, r5, r3
 800c0ce:	1b5c      	sublt	r4, r3, r5
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	bfa8      	it	ge
 800c0d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800c0d6:	eba5 0503 	sub.w	r5, r5, r3
 800c0da:	4415      	add	r5, r2
 800c0dc:	4b6e      	ldr	r3, [pc, #440]	; (800c298 <_strtod_l+0x878>)
 800c0de:	f105 35ff 	add.w	r5, r5, #4294967295
 800c0e2:	bfb8      	it	lt
 800c0e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c0e6:	429d      	cmp	r5, r3
 800c0e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c0ec:	f280 80c4 	bge.w	800c278 <_strtod_l+0x858>
 800c0f0:	1b5b      	subs	r3, r3, r5
 800c0f2:	2b1f      	cmp	r3, #31
 800c0f4:	f04f 0701 	mov.w	r7, #1
 800c0f8:	eba2 0203 	sub.w	r2, r2, r3
 800c0fc:	f300 80b1 	bgt.w	800c262 <_strtod_l+0x842>
 800c100:	2500      	movs	r5, #0
 800c102:	fa07 f303 	lsl.w	r3, r7, r3
 800c106:	930f      	str	r3, [sp, #60]	; 0x3c
 800c108:	18b7      	adds	r7, r6, r2
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	42be      	cmp	r6, r7
 800c10e:	4414      	add	r4, r2
 800c110:	441c      	add	r4, r3
 800c112:	4633      	mov	r3, r6
 800c114:	bfa8      	it	ge
 800c116:	463b      	movge	r3, r7
 800c118:	42a3      	cmp	r3, r4
 800c11a:	bfa8      	it	ge
 800c11c:	4623      	movge	r3, r4
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bfc2      	ittt	gt
 800c122:	1aff      	subgt	r7, r7, r3
 800c124:	1ae4      	subgt	r4, r4, r3
 800c126:	1af6      	subgt	r6, r6, r3
 800c128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd17      	ble.n	800c15e <_strtod_l+0x73e>
 800c12e:	461a      	mov	r2, r3
 800c130:	4650      	mov	r0, sl
 800c132:	9904      	ldr	r1, [sp, #16]
 800c134:	f002 f830 	bl	800e198 <__pow5mult>
 800c138:	9004      	str	r0, [sp, #16]
 800c13a:	2800      	cmp	r0, #0
 800c13c:	f43f aeaf 	beq.w	800be9e <_strtod_l+0x47e>
 800c140:	4601      	mov	r1, r0
 800c142:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c144:	4650      	mov	r0, sl
 800c146:	f001 ff7f 	bl	800e048 <__multiply>
 800c14a:	9009      	str	r0, [sp, #36]	; 0x24
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f43f aea6 	beq.w	800be9e <_strtod_l+0x47e>
 800c152:	4650      	mov	r0, sl
 800c154:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c156:	f001 fe61 	bl	800de1c <_Bfree>
 800c15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15c:	931a      	str	r3, [sp, #104]	; 0x68
 800c15e:	2f00      	cmp	r7, #0
 800c160:	f300 808e 	bgt.w	800c280 <_strtod_l+0x860>
 800c164:	9b07      	ldr	r3, [sp, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dd08      	ble.n	800c17c <_strtod_l+0x75c>
 800c16a:	4650      	mov	r0, sl
 800c16c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c16e:	9906      	ldr	r1, [sp, #24]
 800c170:	f002 f812 	bl	800e198 <__pow5mult>
 800c174:	9006      	str	r0, [sp, #24]
 800c176:	2800      	cmp	r0, #0
 800c178:	f43f ae91 	beq.w	800be9e <_strtod_l+0x47e>
 800c17c:	2c00      	cmp	r4, #0
 800c17e:	dd08      	ble.n	800c192 <_strtod_l+0x772>
 800c180:	4622      	mov	r2, r4
 800c182:	4650      	mov	r0, sl
 800c184:	9906      	ldr	r1, [sp, #24]
 800c186:	f002 f861 	bl	800e24c <__lshift>
 800c18a:	9006      	str	r0, [sp, #24]
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f43f ae86 	beq.w	800be9e <_strtod_l+0x47e>
 800c192:	2e00      	cmp	r6, #0
 800c194:	dd08      	ble.n	800c1a8 <_strtod_l+0x788>
 800c196:	4632      	mov	r2, r6
 800c198:	4650      	mov	r0, sl
 800c19a:	9904      	ldr	r1, [sp, #16]
 800c19c:	f002 f856 	bl	800e24c <__lshift>
 800c1a0:	9004      	str	r0, [sp, #16]
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f43f ae7b 	beq.w	800be9e <_strtod_l+0x47e>
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c1ae:	f002 f8d9 	bl	800e364 <__mdiff>
 800c1b2:	4683      	mov	fp, r0
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f43f ae72 	beq.w	800be9e <_strtod_l+0x47e>
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	68c3      	ldr	r3, [r0, #12]
 800c1be:	9904      	ldr	r1, [sp, #16]
 800c1c0:	60c4      	str	r4, [r0, #12]
 800c1c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1c4:	f002 f8b2 	bl	800e32c <__mcmp>
 800c1c8:	42a0      	cmp	r0, r4
 800c1ca:	da6b      	bge.n	800c2a4 <_strtod_l+0x884>
 800c1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ce:	ea53 0308 	orrs.w	r3, r3, r8
 800c1d2:	f040 8091 	bne.w	800c2f8 <_strtod_l+0x8d8>
 800c1d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f040 808c 	bne.w	800c2f8 <_strtod_l+0x8d8>
 800c1e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1e4:	0d1b      	lsrs	r3, r3, #20
 800c1e6:	051b      	lsls	r3, r3, #20
 800c1e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c1ec:	f240 8084 	bls.w	800c2f8 <_strtod_l+0x8d8>
 800c1f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800c1f4:	b91b      	cbnz	r3, 800c1fe <_strtod_l+0x7de>
 800c1f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	dd7c      	ble.n	800c2f8 <_strtod_l+0x8d8>
 800c1fe:	4659      	mov	r1, fp
 800c200:	2201      	movs	r2, #1
 800c202:	4650      	mov	r0, sl
 800c204:	f002 f822 	bl	800e24c <__lshift>
 800c208:	9904      	ldr	r1, [sp, #16]
 800c20a:	4683      	mov	fp, r0
 800c20c:	f002 f88e 	bl	800e32c <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	dd71      	ble.n	800c2f8 <_strtod_l+0x8d8>
 800c214:	9905      	ldr	r1, [sp, #20]
 800c216:	464b      	mov	r3, r9
 800c218:	4a20      	ldr	r2, [pc, #128]	; (800c29c <_strtod_l+0x87c>)
 800c21a:	2900      	cmp	r1, #0
 800c21c:	f000 808c 	beq.w	800c338 <_strtod_l+0x918>
 800c220:	ea02 0109 	and.w	r1, r2, r9
 800c224:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c228:	f300 8086 	bgt.w	800c338 <_strtod_l+0x918>
 800c22c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c230:	f77f aeaa 	ble.w	800bf88 <_strtod_l+0x568>
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	4b19      	ldr	r3, [pc, #100]	; (800c2a0 <_strtod_l+0x880>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	f7f4 f992 	bl	8000564 <__aeabi_dmul>
 800c240:	460b      	mov	r3, r1
 800c242:	4303      	orrs	r3, r0
 800c244:	bf08      	it	eq
 800c246:	2322      	moveq	r3, #34	; 0x22
 800c248:	4680      	mov	r8, r0
 800c24a:	4689      	mov	r9, r1
 800c24c:	bf08      	it	eq
 800c24e:	f8ca 3000 	streq.w	r3, [sl]
 800c252:	e62f      	b.n	800beb4 <_strtod_l+0x494>
 800c254:	f04f 32ff 	mov.w	r2, #4294967295
 800c258:	fa02 f303 	lsl.w	r3, r2, r3
 800c25c:	ea03 0808 	and.w	r8, r3, r8
 800c260:	e6e0      	b.n	800c024 <_strtod_l+0x604>
 800c262:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c266:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c26a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c26e:	35e2      	adds	r5, #226	; 0xe2
 800c270:	fa07 f505 	lsl.w	r5, r7, r5
 800c274:	970f      	str	r7, [sp, #60]	; 0x3c
 800c276:	e747      	b.n	800c108 <_strtod_l+0x6e8>
 800c278:	2301      	movs	r3, #1
 800c27a:	2500      	movs	r5, #0
 800c27c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c27e:	e743      	b.n	800c108 <_strtod_l+0x6e8>
 800c280:	463a      	mov	r2, r7
 800c282:	4650      	mov	r0, sl
 800c284:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c286:	f001 ffe1 	bl	800e24c <__lshift>
 800c28a:	901a      	str	r0, [sp, #104]	; 0x68
 800c28c:	2800      	cmp	r0, #0
 800c28e:	f47f af69 	bne.w	800c164 <_strtod_l+0x744>
 800c292:	e604      	b.n	800be9e <_strtod_l+0x47e>
 800c294:	0800f920 	.word	0x0800f920
 800c298:	fffffc02 	.word	0xfffffc02
 800c29c:	7ff00000 	.word	0x7ff00000
 800c2a0:	39500000 	.word	0x39500000
 800c2a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c2a8:	d165      	bne.n	800c376 <_strtod_l+0x956>
 800c2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2b0:	b35a      	cbz	r2, 800c30a <_strtod_l+0x8ea>
 800c2b2:	4a99      	ldr	r2, [pc, #612]	; (800c518 <_strtod_l+0xaf8>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d12b      	bne.n	800c310 <_strtod_l+0x8f0>
 800c2b8:	9b05      	ldr	r3, [sp, #20]
 800c2ba:	4641      	mov	r1, r8
 800c2bc:	b303      	cbz	r3, 800c300 <_strtod_l+0x8e0>
 800c2be:	464a      	mov	r2, r9
 800c2c0:	4b96      	ldr	r3, [pc, #600]	; (800c51c <_strtod_l+0xafc>)
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2cc:	d81b      	bhi.n	800c306 <_strtod_l+0x8e6>
 800c2ce:	0d1b      	lsrs	r3, r3, #20
 800c2d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	d119      	bne.n	800c310 <_strtod_l+0x8f0>
 800c2dc:	4b90      	ldr	r3, [pc, #576]	; (800c520 <_strtod_l+0xb00>)
 800c2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d102      	bne.n	800c2ea <_strtod_l+0x8ca>
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	f43f adda 	beq.w	800be9e <_strtod_l+0x47e>
 800c2ea:	f04f 0800 	mov.w	r8, #0
 800c2ee:	4b8b      	ldr	r3, [pc, #556]	; (800c51c <_strtod_l+0xafc>)
 800c2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f2:	401a      	ands	r2, r3
 800c2f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d19a      	bne.n	800c234 <_strtod_l+0x814>
 800c2fe:	e5d9      	b.n	800beb4 <_strtod_l+0x494>
 800c300:	f04f 33ff 	mov.w	r3, #4294967295
 800c304:	e7e8      	b.n	800c2d8 <_strtod_l+0x8b8>
 800c306:	4613      	mov	r3, r2
 800c308:	e7e6      	b.n	800c2d8 <_strtod_l+0x8b8>
 800c30a:	ea53 0308 	orrs.w	r3, r3, r8
 800c30e:	d081      	beq.n	800c214 <_strtod_l+0x7f4>
 800c310:	b1e5      	cbz	r5, 800c34c <_strtod_l+0x92c>
 800c312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c314:	421d      	tst	r5, r3
 800c316:	d0ef      	beq.n	800c2f8 <_strtod_l+0x8d8>
 800c318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c31a:	4640      	mov	r0, r8
 800c31c:	4649      	mov	r1, r9
 800c31e:	9a05      	ldr	r2, [sp, #20]
 800c320:	b1c3      	cbz	r3, 800c354 <_strtod_l+0x934>
 800c322:	f7ff fb59 	bl	800b9d8 <sulp>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c32e:	f7f3 ff63 	bl	80001f8 <__adddf3>
 800c332:	4680      	mov	r8, r0
 800c334:	4689      	mov	r9, r1
 800c336:	e7df      	b.n	800c2f8 <_strtod_l+0x8d8>
 800c338:	4013      	ands	r3, r2
 800c33a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c33e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c342:	f04f 38ff 	mov.w	r8, #4294967295
 800c346:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c34a:	e7d5      	b.n	800c2f8 <_strtod_l+0x8d8>
 800c34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c34e:	ea13 0f08 	tst.w	r3, r8
 800c352:	e7e0      	b.n	800c316 <_strtod_l+0x8f6>
 800c354:	f7ff fb40 	bl	800b9d8 <sulp>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c360:	f7f3 ff48 	bl	80001f4 <__aeabi_dsub>
 800c364:	2200      	movs	r2, #0
 800c366:	2300      	movs	r3, #0
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	f7f4 fb62 	bl	8000a34 <__aeabi_dcmpeq>
 800c370:	2800      	cmp	r0, #0
 800c372:	d0c1      	beq.n	800c2f8 <_strtod_l+0x8d8>
 800c374:	e608      	b.n	800bf88 <_strtod_l+0x568>
 800c376:	4658      	mov	r0, fp
 800c378:	9904      	ldr	r1, [sp, #16]
 800c37a:	f002 f955 	bl	800e628 <__ratio>
 800c37e:	2200      	movs	r2, #0
 800c380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	f7f4 fb68 	bl	8000a5c <__aeabi_dcmple>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d070      	beq.n	800c472 <_strtod_l+0xa52>
 800c390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d042      	beq.n	800c41c <_strtod_l+0x9fc>
 800c396:	2600      	movs	r6, #0
 800c398:	4f62      	ldr	r7, [pc, #392]	; (800c524 <_strtod_l+0xb04>)
 800c39a:	4d62      	ldr	r5, [pc, #392]	; (800c524 <_strtod_l+0xb04>)
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3a2:	0d1b      	lsrs	r3, r3, #20
 800c3a4:	051b      	lsls	r3, r3, #20
 800c3a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3aa:	4b5f      	ldr	r3, [pc, #380]	; (800c528 <_strtod_l+0xb08>)
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	f040 80c3 	bne.w	800c538 <_strtod_l+0xb18>
 800c3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f002 f85e 	bl	800e47c <__ulp>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	f7f4 f8cc 	bl	8000564 <__aeabi_dmul>
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	f7f3 ff12 	bl	80001f8 <__adddf3>
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4951      	ldr	r1, [pc, #324]	; (800c51c <_strtod_l+0xafc>)
 800c3d8:	4a54      	ldr	r2, [pc, #336]	; (800c52c <_strtod_l+0xb0c>)
 800c3da:	4019      	ands	r1, r3
 800c3dc:	4291      	cmp	r1, r2
 800c3de:	4680      	mov	r8, r0
 800c3e0:	d95d      	bls.n	800c49e <_strtod_l+0xa7e>
 800c3e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e4:	4b4e      	ldr	r3, [pc, #312]	; (800c520 <_strtod_l+0xb00>)
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d103      	bne.n	800c3f2 <_strtod_l+0x9d2>
 800c3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	f43f ad56 	beq.w	800be9e <_strtod_l+0x47e>
 800c3f2:	f04f 38ff 	mov.w	r8, #4294967295
 800c3f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800c520 <_strtod_l+0xb00>
 800c3fa:	4650      	mov	r0, sl
 800c3fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c3fe:	f001 fd0d 	bl	800de1c <_Bfree>
 800c402:	4650      	mov	r0, sl
 800c404:	9906      	ldr	r1, [sp, #24]
 800c406:	f001 fd09 	bl	800de1c <_Bfree>
 800c40a:	4650      	mov	r0, sl
 800c40c:	9904      	ldr	r1, [sp, #16]
 800c40e:	f001 fd05 	bl	800de1c <_Bfree>
 800c412:	4659      	mov	r1, fp
 800c414:	4650      	mov	r0, sl
 800c416:	f001 fd01 	bl	800de1c <_Bfree>
 800c41a:	e627      	b.n	800c06c <_strtod_l+0x64c>
 800c41c:	f1b8 0f00 	cmp.w	r8, #0
 800c420:	d119      	bne.n	800c456 <_strtod_l+0xa36>
 800c422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c428:	b9e3      	cbnz	r3, 800c464 <_strtod_l+0xa44>
 800c42a:	2200      	movs	r2, #0
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	4b3c      	ldr	r3, [pc, #240]	; (800c524 <_strtod_l+0xb04>)
 800c432:	f7f4 fb09 	bl	8000a48 <__aeabi_dcmplt>
 800c436:	b9c8      	cbnz	r0, 800c46c <_strtod_l+0xa4c>
 800c438:	2200      	movs	r2, #0
 800c43a:	4630      	mov	r0, r6
 800c43c:	4639      	mov	r1, r7
 800c43e:	4b3c      	ldr	r3, [pc, #240]	; (800c530 <_strtod_l+0xb10>)
 800c440:	f7f4 f890 	bl	8000564 <__aeabi_dmul>
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c44c:	9416      	str	r4, [sp, #88]	; 0x58
 800c44e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c450:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800c454:	e7a2      	b.n	800c39c <_strtod_l+0x97c>
 800c456:	f1b8 0f01 	cmp.w	r8, #1
 800c45a:	d103      	bne.n	800c464 <_strtod_l+0xa44>
 800c45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f43f ad92 	beq.w	800bf88 <_strtod_l+0x568>
 800c464:	2600      	movs	r6, #0
 800c466:	2400      	movs	r4, #0
 800c468:	4f32      	ldr	r7, [pc, #200]	; (800c534 <_strtod_l+0xb14>)
 800c46a:	e796      	b.n	800c39a <_strtod_l+0x97a>
 800c46c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c46e:	4d30      	ldr	r5, [pc, #192]	; (800c530 <_strtod_l+0xb10>)
 800c470:	e7ea      	b.n	800c448 <_strtod_l+0xa28>
 800c472:	4b2f      	ldr	r3, [pc, #188]	; (800c530 <_strtod_l+0xb10>)
 800c474:	2200      	movs	r2, #0
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 f873 	bl	8000564 <__aeabi_dmul>
 800c47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c480:	4604      	mov	r4, r0
 800c482:	460d      	mov	r5, r1
 800c484:	b933      	cbnz	r3, 800c494 <_strtod_l+0xa74>
 800c486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c48a:	9010      	str	r0, [sp, #64]	; 0x40
 800c48c:	9311      	str	r3, [sp, #68]	; 0x44
 800c48e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c492:	e783      	b.n	800c39c <_strtod_l+0x97c>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c49c:	e7f7      	b.n	800c48e <_strtod_l+0xa6e>
 800c49e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c4a2:	9b05      	ldr	r3, [sp, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1a8      	bne.n	800c3fa <_strtod_l+0x9da>
 800c4a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4ae:	0d1b      	lsrs	r3, r3, #20
 800c4b0:	051b      	lsls	r3, r3, #20
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1a1      	bne.n	800c3fa <_strtod_l+0x9da>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7f4 fc3f 	bl	8000d3c <__aeabi_d2lz>
 800c4be:	f7f4 f823 	bl	8000508 <__aeabi_l2d>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f3 fe93 	bl	80001f4 <__aeabi_dsub>
 800c4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4d4:	ea43 0308 	orr.w	r3, r3, r8
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	4604      	mov	r4, r0
 800c4dc:	460d      	mov	r5, r1
 800c4de:	d066      	beq.n	800c5ae <_strtod_l+0xb8e>
 800c4e0:	a309      	add	r3, pc, #36	; (adr r3, 800c508 <_strtod_l+0xae8>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f7f4 faaf 	bl	8000a48 <__aeabi_dcmplt>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f47f ace2 	bne.w	800beb4 <_strtod_l+0x494>
 800c4f0:	a307      	add	r3, pc, #28	; (adr r3, 800c510 <_strtod_l+0xaf0>)
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f4 fac3 	bl	8000a84 <__aeabi_dcmpgt>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f43f af7b 	beq.w	800c3fa <_strtod_l+0x9da>
 800c504:	e4d6      	b.n	800beb4 <_strtod_l+0x494>
 800c506:	bf00      	nop
 800c508:	94a03595 	.word	0x94a03595
 800c50c:	3fdfffff 	.word	0x3fdfffff
 800c510:	35afe535 	.word	0x35afe535
 800c514:	3fe00000 	.word	0x3fe00000
 800c518:	000fffff 	.word	0x000fffff
 800c51c:	7ff00000 	.word	0x7ff00000
 800c520:	7fefffff 	.word	0x7fefffff
 800c524:	3ff00000 	.word	0x3ff00000
 800c528:	7fe00000 	.word	0x7fe00000
 800c52c:	7c9fffff 	.word	0x7c9fffff
 800c530:	3fe00000 	.word	0x3fe00000
 800c534:	bff00000 	.word	0xbff00000
 800c538:	9b05      	ldr	r3, [sp, #20]
 800c53a:	b313      	cbz	r3, 800c582 <_strtod_l+0xb62>
 800c53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c53e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c542:	d81e      	bhi.n	800c582 <_strtod_l+0xb62>
 800c544:	a326      	add	r3, pc, #152	; (adr r3, 800c5e0 <_strtod_l+0xbc0>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	f7f4 fa85 	bl	8000a5c <__aeabi_dcmple>
 800c552:	b190      	cbz	r0, 800c57a <_strtod_l+0xb5a>
 800c554:	4629      	mov	r1, r5
 800c556:	4620      	mov	r0, r4
 800c558:	f7f4 fadc 	bl	8000b14 <__aeabi_d2uiz>
 800c55c:	2801      	cmp	r0, #1
 800c55e:	bf38      	it	cc
 800c560:	2001      	movcc	r0, #1
 800c562:	f7f3 ff85 	bl	8000470 <__aeabi_ui2d>
 800c566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	b9d3      	cbnz	r3, 800c5a4 <_strtod_l+0xb84>
 800c56e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c572:	9012      	str	r0, [sp, #72]	; 0x48
 800c574:	9313      	str	r3, [sp, #76]	; 0x4c
 800c576:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c57a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c57c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c580:	1a9f      	subs	r7, r3, r2
 800c582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c586:	f001 ff79 	bl	800e47c <__ulp>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f3 ffe7 	bl	8000564 <__aeabi_dmul>
 800c596:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c59a:	f7f3 fe2d 	bl	80001f8 <__adddf3>
 800c59e:	4680      	mov	r8, r0
 800c5a0:	4689      	mov	r9, r1
 800c5a2:	e77e      	b.n	800c4a2 <_strtod_l+0xa82>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c5ac:	e7e3      	b.n	800c576 <_strtod_l+0xb56>
 800c5ae:	a30e      	add	r3, pc, #56	; (adr r3, 800c5e8 <_strtod_l+0xbc8>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f4 fa48 	bl	8000a48 <__aeabi_dcmplt>
 800c5b8:	e7a1      	b.n	800c4fe <_strtod_l+0xade>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	930a      	str	r3, [sp, #40]	; 0x28
 800c5be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	f7ff ba71 	b.w	800baaa <_strtod_l+0x8a>
 800c5c8:	2a65      	cmp	r2, #101	; 0x65
 800c5ca:	f43f ab63 	beq.w	800bc94 <_strtod_l+0x274>
 800c5ce:	2a45      	cmp	r2, #69	; 0x45
 800c5d0:	f43f ab60 	beq.w	800bc94 <_strtod_l+0x274>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f7ff bb95 	b.w	800bd04 <_strtod_l+0x2e4>
 800c5da:	bf00      	nop
 800c5dc:	f3af 8000 	nop.w
 800c5e0:	ffc00000 	.word	0xffc00000
 800c5e4:	41dfffff 	.word	0x41dfffff
 800c5e8:	94a03595 	.word	0x94a03595
 800c5ec:	3fcfffff 	.word	0x3fcfffff

0800c5f0 <_strtod_r>:
 800c5f0:	4b01      	ldr	r3, [pc, #4]	; (800c5f8 <_strtod_r+0x8>)
 800c5f2:	f7ff ba15 	b.w	800ba20 <_strtod_l>
 800c5f6:	bf00      	nop
 800c5f8:	20000274 	.word	0x20000274

0800c5fc <strtof>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	4f22      	ldr	r7, [pc, #136]	; (800c68c <strtof+0x90>)
 800c602:	460a      	mov	r2, r1
 800c604:	4b22      	ldr	r3, [pc, #136]	; (800c690 <strtof+0x94>)
 800c606:	4601      	mov	r1, r0
 800c608:	6838      	ldr	r0, [r7, #0]
 800c60a:	f7ff fa09 	bl	800ba20 <_strtod_l>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4606      	mov	r6, r0
 800c614:	460c      	mov	r4, r1
 800c616:	f7f4 fa3f 	bl	8000a98 <__aeabi_dcmpun>
 800c61a:	b168      	cbz	r0, 800c638 <strtof+0x3c>
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	481d      	ldr	r0, [pc, #116]	; (800c694 <strtof+0x98>)
 800c620:	da06      	bge.n	800c630 <strtof+0x34>
 800c622:	f7ff f9ad 	bl	800b980 <nanf>
 800c626:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	f7ff b9a4 	b.w	800b980 <nanf>
 800c638:	4621      	mov	r1, r4
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7f4 fa8a 	bl	8000b54 <__aeabi_d2f>
 800c640:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c644:	4605      	mov	r5, r0
 800c646:	4914      	ldr	r1, [pc, #80]	; (800c698 <strtof+0x9c>)
 800c648:	4640      	mov	r0, r8
 800c64a:	f7f4 fb49 	bl	8000ce0 <__aeabi_fcmpun>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d1eb      	bne.n	800c62a <strtof+0x2e>
 800c652:	4640      	mov	r0, r8
 800c654:	4910      	ldr	r1, [pc, #64]	; (800c698 <strtof+0x9c>)
 800c656:	f7f4 fb25 	bl	8000ca4 <__aeabi_fcmple>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1e5      	bne.n	800c62a <strtof+0x2e>
 800c65e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c662:	f04f 32ff 	mov.w	r2, #4294967295
 800c666:	4630      	mov	r0, r6
 800c668:	4621      	mov	r1, r4
 800c66a:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <strtof+0xa0>)
 800c66c:	f7f4 fa14 	bl	8000a98 <__aeabi_dcmpun>
 800c670:	b940      	cbnz	r0, 800c684 <strtof+0x88>
 800c672:	f04f 32ff 	mov.w	r2, #4294967295
 800c676:	4630      	mov	r0, r6
 800c678:	4621      	mov	r1, r4
 800c67a:	4b08      	ldr	r3, [pc, #32]	; (800c69c <strtof+0xa0>)
 800c67c:	f7f4 f9ee 	bl	8000a5c <__aeabi_dcmple>
 800c680:	2800      	cmp	r0, #0
 800c682:	d0d2      	beq.n	800c62a <strtof+0x2e>
 800c684:	2222      	movs	r2, #34	; 0x22
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	e7ce      	b.n	800c62a <strtof+0x2e>
 800c68c:	2000020c 	.word	0x2000020c
 800c690:	20000274 	.word	0x20000274
 800c694:	0800fcf8 	.word	0x0800fcf8
 800c698:	7f7fffff 	.word	0x7f7fffff
 800c69c:	7fefffff 	.word	0x7fefffff

0800c6a0 <__strtok_r>:
 800c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a2:	b908      	cbnz	r0, 800c6a8 <__strtok_r+0x8>
 800c6a4:	6810      	ldr	r0, [r2, #0]
 800c6a6:	b188      	cbz	r0, 800c6cc <__strtok_r+0x2c>
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	460f      	mov	r7, r1
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6b6:	b91e      	cbnz	r6, 800c6c0 <__strtok_r+0x20>
 800c6b8:	b965      	cbnz	r5, 800c6d4 <__strtok_r+0x34>
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	6015      	str	r5, [r2, #0]
 800c6be:	e005      	b.n	800c6cc <__strtok_r+0x2c>
 800c6c0:	42b5      	cmp	r5, r6
 800c6c2:	d1f6      	bne.n	800c6b2 <__strtok_r+0x12>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f0      	bne.n	800c6aa <__strtok_r+0xa>
 800c6c8:	6014      	str	r4, [r2, #0]
 800c6ca:	7003      	strb	r3, [r0, #0]
 800c6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ce:	461c      	mov	r4, r3
 800c6d0:	e00c      	b.n	800c6ec <__strtok_r+0x4c>
 800c6d2:	b915      	cbnz	r5, 800c6da <__strtok_r+0x3a>
 800c6d4:	460e      	mov	r6, r1
 800c6d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6da:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c6de:	42ab      	cmp	r3, r5
 800c6e0:	d1f7      	bne.n	800c6d2 <__strtok_r+0x32>
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0f3      	beq.n	800c6ce <__strtok_r+0x2e>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c6ec:	6014      	str	r4, [r2, #0]
 800c6ee:	e7ed      	b.n	800c6cc <__strtok_r+0x2c>

0800c6f0 <strtok_r>:
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f7ff bfd5 	b.w	800c6a0 <__strtok_r>
	...

0800c6f8 <_strtol_l.constprop.0>:
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fe:	4680      	mov	r8, r0
 800c700:	d001      	beq.n	800c706 <_strtol_l.constprop.0+0xe>
 800c702:	2b24      	cmp	r3, #36	; 0x24
 800c704:	d906      	bls.n	800c714 <_strtol_l.constprop.0+0x1c>
 800c706:	f7fe f99f 	bl	800aa48 <__errno>
 800c70a:	2316      	movs	r3, #22
 800c70c:	6003      	str	r3, [r0, #0]
 800c70e:	2000      	movs	r0, #0
 800c710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c714:	460d      	mov	r5, r1
 800c716:	4f35      	ldr	r7, [pc, #212]	; (800c7ec <_strtol_l.constprop.0+0xf4>)
 800c718:	4628      	mov	r0, r5
 800c71a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c71e:	5de6      	ldrb	r6, [r4, r7]
 800c720:	f016 0608 	ands.w	r6, r6, #8
 800c724:	d1f8      	bne.n	800c718 <_strtol_l.constprop.0+0x20>
 800c726:	2c2d      	cmp	r4, #45	; 0x2d
 800c728:	d12f      	bne.n	800c78a <_strtol_l.constprop.0+0x92>
 800c72a:	2601      	movs	r6, #1
 800c72c:	782c      	ldrb	r4, [r5, #0]
 800c72e:	1c85      	adds	r5, r0, #2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d057      	beq.n	800c7e4 <_strtol_l.constprop.0+0xec>
 800c734:	2b10      	cmp	r3, #16
 800c736:	d109      	bne.n	800c74c <_strtol_l.constprop.0+0x54>
 800c738:	2c30      	cmp	r4, #48	; 0x30
 800c73a:	d107      	bne.n	800c74c <_strtol_l.constprop.0+0x54>
 800c73c:	7828      	ldrb	r0, [r5, #0]
 800c73e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c742:	2858      	cmp	r0, #88	; 0x58
 800c744:	d149      	bne.n	800c7da <_strtol_l.constprop.0+0xe2>
 800c746:	2310      	movs	r3, #16
 800c748:	786c      	ldrb	r4, [r5, #1]
 800c74a:	3502      	adds	r5, #2
 800c74c:	2700      	movs	r7, #0
 800c74e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c752:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c756:	fbbe f9f3 	udiv	r9, lr, r3
 800c75a:	4638      	mov	r0, r7
 800c75c:	fb03 ea19 	mls	sl, r3, r9, lr
 800c760:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c764:	f1bc 0f09 	cmp.w	ip, #9
 800c768:	d814      	bhi.n	800c794 <_strtol_l.constprop.0+0x9c>
 800c76a:	4664      	mov	r4, ip
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	dd22      	ble.n	800c7b6 <_strtol_l.constprop.0+0xbe>
 800c770:	2f00      	cmp	r7, #0
 800c772:	db1d      	blt.n	800c7b0 <_strtol_l.constprop.0+0xb8>
 800c774:	4581      	cmp	r9, r0
 800c776:	d31b      	bcc.n	800c7b0 <_strtol_l.constprop.0+0xb8>
 800c778:	d101      	bne.n	800c77e <_strtol_l.constprop.0+0x86>
 800c77a:	45a2      	cmp	sl, r4
 800c77c:	db18      	blt.n	800c7b0 <_strtol_l.constprop.0+0xb8>
 800c77e:	2701      	movs	r7, #1
 800c780:	fb00 4003 	mla	r0, r0, r3, r4
 800c784:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c788:	e7ea      	b.n	800c760 <_strtol_l.constprop.0+0x68>
 800c78a:	2c2b      	cmp	r4, #43	; 0x2b
 800c78c:	bf04      	itt	eq
 800c78e:	782c      	ldrbeq	r4, [r5, #0]
 800c790:	1c85      	addeq	r5, r0, #2
 800c792:	e7cd      	b.n	800c730 <_strtol_l.constprop.0+0x38>
 800c794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c798:	f1bc 0f19 	cmp.w	ip, #25
 800c79c:	d801      	bhi.n	800c7a2 <_strtol_l.constprop.0+0xaa>
 800c79e:	3c37      	subs	r4, #55	; 0x37
 800c7a0:	e7e4      	b.n	800c76c <_strtol_l.constprop.0+0x74>
 800c7a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c7a6:	f1bc 0f19 	cmp.w	ip, #25
 800c7aa:	d804      	bhi.n	800c7b6 <_strtol_l.constprop.0+0xbe>
 800c7ac:	3c57      	subs	r4, #87	; 0x57
 800c7ae:	e7dd      	b.n	800c76c <_strtol_l.constprop.0+0x74>
 800c7b0:	f04f 37ff 	mov.w	r7, #4294967295
 800c7b4:	e7e6      	b.n	800c784 <_strtol_l.constprop.0+0x8c>
 800c7b6:	2f00      	cmp	r7, #0
 800c7b8:	da07      	bge.n	800c7ca <_strtol_l.constprop.0+0xd2>
 800c7ba:	2322      	movs	r3, #34	; 0x22
 800c7bc:	4670      	mov	r0, lr
 800c7be:	f8c8 3000 	str.w	r3, [r8]
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	d0a4      	beq.n	800c710 <_strtol_l.constprop.0+0x18>
 800c7c6:	1e69      	subs	r1, r5, #1
 800c7c8:	e005      	b.n	800c7d6 <_strtol_l.constprop.0+0xde>
 800c7ca:	b106      	cbz	r6, 800c7ce <_strtol_l.constprop.0+0xd6>
 800c7cc:	4240      	negs	r0, r0
 800c7ce:	2a00      	cmp	r2, #0
 800c7d0:	d09e      	beq.n	800c710 <_strtol_l.constprop.0+0x18>
 800c7d2:	2f00      	cmp	r7, #0
 800c7d4:	d1f7      	bne.n	800c7c6 <_strtol_l.constprop.0+0xce>
 800c7d6:	6011      	str	r1, [r2, #0]
 800c7d8:	e79a      	b.n	800c710 <_strtol_l.constprop.0+0x18>
 800c7da:	2430      	movs	r4, #48	; 0x30
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1b5      	bne.n	800c74c <_strtol_l.constprop.0+0x54>
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	e7b3      	b.n	800c74c <_strtol_l.constprop.0+0x54>
 800c7e4:	2c30      	cmp	r4, #48	; 0x30
 800c7e6:	d0a9      	beq.n	800c73c <_strtol_l.constprop.0+0x44>
 800c7e8:	230a      	movs	r3, #10
 800c7ea:	e7af      	b.n	800c74c <_strtol_l.constprop.0+0x54>
 800c7ec:	0800f949 	.word	0x0800f949

0800c7f0 <_strtol_r>:
 800c7f0:	f7ff bf82 	b.w	800c6f8 <_strtol_l.constprop.0>

0800c7f4 <_strtoul_l.constprop.0>:
 800c7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	4686      	mov	lr, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	4f35      	ldr	r7, [pc, #212]	; (800c8d4 <_strtoul_l.constprop.0+0xe0>)
 800c7fe:	4628      	mov	r0, r5
 800c800:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c804:	5de6      	ldrb	r6, [r4, r7]
 800c806:	f016 0608 	ands.w	r6, r6, #8
 800c80a:	d1f8      	bne.n	800c7fe <_strtoul_l.constprop.0+0xa>
 800c80c:	2c2d      	cmp	r4, #45	; 0x2d
 800c80e:	d12f      	bne.n	800c870 <_strtoul_l.constprop.0+0x7c>
 800c810:	2601      	movs	r6, #1
 800c812:	782c      	ldrb	r4, [r5, #0]
 800c814:	1c85      	adds	r5, r0, #2
 800c816:	2b00      	cmp	r3, #0
 800c818:	d057      	beq.n	800c8ca <_strtoul_l.constprop.0+0xd6>
 800c81a:	2b10      	cmp	r3, #16
 800c81c:	d109      	bne.n	800c832 <_strtoul_l.constprop.0+0x3e>
 800c81e:	2c30      	cmp	r4, #48	; 0x30
 800c820:	d107      	bne.n	800c832 <_strtoul_l.constprop.0+0x3e>
 800c822:	7828      	ldrb	r0, [r5, #0]
 800c824:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c828:	2858      	cmp	r0, #88	; 0x58
 800c82a:	d149      	bne.n	800c8c0 <_strtoul_l.constprop.0+0xcc>
 800c82c:	2310      	movs	r3, #16
 800c82e:	786c      	ldrb	r4, [r5, #1]
 800c830:	3502      	adds	r5, #2
 800c832:	f04f 38ff 	mov.w	r8, #4294967295
 800c836:	fbb8 f8f3 	udiv	r8, r8, r3
 800c83a:	2700      	movs	r7, #0
 800c83c:	fb03 f908 	mul.w	r9, r3, r8
 800c840:	4638      	mov	r0, r7
 800c842:	ea6f 0909 	mvn.w	r9, r9
 800c846:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c84a:	f1bc 0f09 	cmp.w	ip, #9
 800c84e:	d814      	bhi.n	800c87a <_strtoul_l.constprop.0+0x86>
 800c850:	4664      	mov	r4, ip
 800c852:	42a3      	cmp	r3, r4
 800c854:	dd22      	ble.n	800c89c <_strtoul_l.constprop.0+0xa8>
 800c856:	2f00      	cmp	r7, #0
 800c858:	db1d      	blt.n	800c896 <_strtoul_l.constprop.0+0xa2>
 800c85a:	4580      	cmp	r8, r0
 800c85c:	d31b      	bcc.n	800c896 <_strtoul_l.constprop.0+0xa2>
 800c85e:	d101      	bne.n	800c864 <_strtoul_l.constprop.0+0x70>
 800c860:	45a1      	cmp	r9, r4
 800c862:	db18      	blt.n	800c896 <_strtoul_l.constprop.0+0xa2>
 800c864:	2701      	movs	r7, #1
 800c866:	fb00 4003 	mla	r0, r0, r3, r4
 800c86a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c86e:	e7ea      	b.n	800c846 <_strtoul_l.constprop.0+0x52>
 800c870:	2c2b      	cmp	r4, #43	; 0x2b
 800c872:	bf04      	itt	eq
 800c874:	782c      	ldrbeq	r4, [r5, #0]
 800c876:	1c85      	addeq	r5, r0, #2
 800c878:	e7cd      	b.n	800c816 <_strtoul_l.constprop.0+0x22>
 800c87a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c87e:	f1bc 0f19 	cmp.w	ip, #25
 800c882:	d801      	bhi.n	800c888 <_strtoul_l.constprop.0+0x94>
 800c884:	3c37      	subs	r4, #55	; 0x37
 800c886:	e7e4      	b.n	800c852 <_strtoul_l.constprop.0+0x5e>
 800c888:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c88c:	f1bc 0f19 	cmp.w	ip, #25
 800c890:	d804      	bhi.n	800c89c <_strtoul_l.constprop.0+0xa8>
 800c892:	3c57      	subs	r4, #87	; 0x57
 800c894:	e7dd      	b.n	800c852 <_strtoul_l.constprop.0+0x5e>
 800c896:	f04f 37ff 	mov.w	r7, #4294967295
 800c89a:	e7e6      	b.n	800c86a <_strtoul_l.constprop.0+0x76>
 800c89c:	2f00      	cmp	r7, #0
 800c89e:	da07      	bge.n	800c8b0 <_strtoul_l.constprop.0+0xbc>
 800c8a0:	2322      	movs	r3, #34	; 0x22
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a6:	f8ce 3000 	str.w	r3, [lr]
 800c8aa:	b932      	cbnz	r2, 800c8ba <_strtoul_l.constprop.0+0xc6>
 800c8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b0:	b106      	cbz	r6, 800c8b4 <_strtoul_l.constprop.0+0xc0>
 800c8b2:	4240      	negs	r0, r0
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	d0f9      	beq.n	800c8ac <_strtoul_l.constprop.0+0xb8>
 800c8b8:	b107      	cbz	r7, 800c8bc <_strtoul_l.constprop.0+0xc8>
 800c8ba:	1e69      	subs	r1, r5, #1
 800c8bc:	6011      	str	r1, [r2, #0]
 800c8be:	e7f5      	b.n	800c8ac <_strtoul_l.constprop.0+0xb8>
 800c8c0:	2430      	movs	r4, #48	; 0x30
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1b5      	bne.n	800c832 <_strtoul_l.constprop.0+0x3e>
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	e7b3      	b.n	800c832 <_strtoul_l.constprop.0+0x3e>
 800c8ca:	2c30      	cmp	r4, #48	; 0x30
 800c8cc:	d0a9      	beq.n	800c822 <_strtoul_l.constprop.0+0x2e>
 800c8ce:	230a      	movs	r3, #10
 800c8d0:	e7af      	b.n	800c832 <_strtoul_l.constprop.0+0x3e>
 800c8d2:	bf00      	nop
 800c8d4:	0800f949 	.word	0x0800f949

0800c8d8 <strtoul>:
 800c8d8:	4613      	mov	r3, r2
 800c8da:	460a      	mov	r2, r1
 800c8dc:	4601      	mov	r1, r0
 800c8de:	4802      	ldr	r0, [pc, #8]	; (800c8e8 <strtoul+0x10>)
 800c8e0:	6800      	ldr	r0, [r0, #0]
 800c8e2:	f7ff bf87 	b.w	800c7f4 <_strtoul_l.constprop.0>
 800c8e6:	bf00      	nop
 800c8e8:	2000020c 	.word	0x2000020c

0800c8ec <_vsniprintf_r>:
 800c8ec:	b530      	push	{r4, r5, lr}
 800c8ee:	4614      	mov	r4, r2
 800c8f0:	2c00      	cmp	r4, #0
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	b09b      	sub	sp, #108	; 0x6c
 800c8f8:	da05      	bge.n	800c906 <_vsniprintf_r+0x1a>
 800c8fa:	238b      	movs	r3, #139	; 0x8b
 800c8fc:	6003      	str	r3, [r0, #0]
 800c8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c902:	b01b      	add	sp, #108	; 0x6c
 800c904:	bd30      	pop	{r4, r5, pc}
 800c906:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c90a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c90e:	bf0c      	ite	eq
 800c910:	4623      	moveq	r3, r4
 800c912:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c91e:	9100      	str	r1, [sp, #0]
 800c920:	9104      	str	r1, [sp, #16]
 800c922:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c926:	4669      	mov	r1, sp
 800c928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c92a:	f001 ff5f 	bl	800e7ec <_svfiprintf_r>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	bfbc      	itt	lt
 800c932:	238b      	movlt	r3, #139	; 0x8b
 800c934:	602b      	strlt	r3, [r5, #0]
 800c936:	2c00      	cmp	r4, #0
 800c938:	d0e3      	beq.n	800c902 <_vsniprintf_r+0x16>
 800c93a:	2200      	movs	r2, #0
 800c93c:	9b00      	ldr	r3, [sp, #0]
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	e7df      	b.n	800c902 <_vsniprintf_r+0x16>
	...

0800c944 <vsniprintf>:
 800c944:	b507      	push	{r0, r1, r2, lr}
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	4613      	mov	r3, r2
 800c94a:	460a      	mov	r2, r1
 800c94c:	4601      	mov	r1, r0
 800c94e:	4803      	ldr	r0, [pc, #12]	; (800c95c <vsniprintf+0x18>)
 800c950:	6800      	ldr	r0, [r0, #0]
 800c952:	f7ff ffcb 	bl	800c8ec <_vsniprintf_r>
 800c956:	b003      	add	sp, #12
 800c958:	f85d fb04 	ldr.w	pc, [sp], #4
 800c95c:	2000020c 	.word	0x2000020c

0800c960 <quorem>:
 800c960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	6903      	ldr	r3, [r0, #16]
 800c966:	690c      	ldr	r4, [r1, #16]
 800c968:	4607      	mov	r7, r0
 800c96a:	42a3      	cmp	r3, r4
 800c96c:	f2c0 8082 	blt.w	800ca74 <quorem+0x114>
 800c970:	3c01      	subs	r4, #1
 800c972:	f100 0514 	add.w	r5, r0, #20
 800c976:	f101 0814 	add.w	r8, r1, #20
 800c97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c988:	3301      	adds	r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c998:	d331      	bcc.n	800c9fe <quorem+0x9e>
 800c99a:	f04f 0e00 	mov.w	lr, #0
 800c99e:	4640      	mov	r0, r8
 800c9a0:	46ac      	mov	ip, r5
 800c9a2:	46f2      	mov	sl, lr
 800c9a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9a8:	b293      	uxth	r3, r2
 800c9aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c9ae:	0c12      	lsrs	r2, r2, #16
 800c9b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	fb06 e202 	mla	r2, r6, r2, lr
 800c9ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c9be:	f8dc a000 	ldr.w	sl, [ip]
 800c9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9c6:	fa1f fa8a 	uxth.w	sl, sl
 800c9ca:	4453      	add	r3, sl
 800c9cc:	f8dc a000 	ldr.w	sl, [ip]
 800c9d0:	b292      	uxth	r2, r2
 800c9d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9e0:	4581      	cmp	r9, r0
 800c9e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9e6:	f84c 3b04 	str.w	r3, [ip], #4
 800c9ea:	d2db      	bcs.n	800c9a4 <quorem+0x44>
 800c9ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9f0:	b92b      	cbnz	r3, 800c9fe <quorem+0x9e>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	3b04      	subs	r3, #4
 800c9f6:	429d      	cmp	r5, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	d32f      	bcc.n	800ca5c <quorem+0xfc>
 800c9fc:	613c      	str	r4, [r7, #16]
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f001 fc94 	bl	800e32c <__mcmp>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	db25      	blt.n	800ca54 <quorem+0xf4>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f04f 0c00 	mov.w	ip, #0
 800ca0e:	3601      	adds	r6, #1
 800ca10:	f858 1b04 	ldr.w	r1, [r8], #4
 800ca14:	f8d0 e000 	ldr.w	lr, [r0]
 800ca18:	b28b      	uxth	r3, r1
 800ca1a:	ebac 0303 	sub.w	r3, ip, r3
 800ca1e:	fa1f f28e 	uxth.w	r2, lr
 800ca22:	4413      	add	r3, r2
 800ca24:	0c0a      	lsrs	r2, r1, #16
 800ca26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca34:	45c1      	cmp	r9, r8
 800ca36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca3a:	f840 3b04 	str.w	r3, [r0], #4
 800ca3e:	d2e7      	bcs.n	800ca10 <quorem+0xb0>
 800ca40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca48:	b922      	cbnz	r2, 800ca54 <quorem+0xf4>
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	429d      	cmp	r5, r3
 800ca4e:	461a      	mov	r2, r3
 800ca50:	d30a      	bcc.n	800ca68 <quorem+0x108>
 800ca52:	613c      	str	r4, [r7, #16]
 800ca54:	4630      	mov	r0, r6
 800ca56:	b003      	add	sp, #12
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	3b04      	subs	r3, #4
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d1cb      	bne.n	800c9fc <quorem+0x9c>
 800ca64:	3c01      	subs	r4, #1
 800ca66:	e7c6      	b.n	800c9f6 <quorem+0x96>
 800ca68:	6812      	ldr	r2, [r2, #0]
 800ca6a:	3b04      	subs	r3, #4
 800ca6c:	2a00      	cmp	r2, #0
 800ca6e:	d1f0      	bne.n	800ca52 <quorem+0xf2>
 800ca70:	3c01      	subs	r4, #1
 800ca72:	e7eb      	b.n	800ca4c <quorem+0xec>
 800ca74:	2000      	movs	r0, #0
 800ca76:	e7ee      	b.n	800ca56 <quorem+0xf6>

0800ca78 <_dtoa_r>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	4616      	mov	r6, r2
 800ca7e:	461f      	mov	r7, r3
 800ca80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ca82:	b099      	sub	sp, #100	; 0x64
 800ca84:	4605      	mov	r5, r0
 800ca86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ca8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ca8e:	b974      	cbnz	r4, 800caae <_dtoa_r+0x36>
 800ca90:	2010      	movs	r0, #16
 800ca92:	f7fe f803 	bl	800aa9c <malloc>
 800ca96:	4602      	mov	r2, r0
 800ca98:	6268      	str	r0, [r5, #36]	; 0x24
 800ca9a:	b920      	cbnz	r0, 800caa6 <_dtoa_r+0x2e>
 800ca9c:	21ea      	movs	r1, #234	; 0xea
 800ca9e:	4ba8      	ldr	r3, [pc, #672]	; (800cd40 <_dtoa_r+0x2c8>)
 800caa0:	48a8      	ldr	r0, [pc, #672]	; (800cd44 <_dtoa_r+0x2cc>)
 800caa2:	f001 ffcb 	bl	800ea3c <__assert_func>
 800caa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caaa:	6004      	str	r4, [r0, #0]
 800caac:	60c4      	str	r4, [r0, #12]
 800caae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cab0:	6819      	ldr	r1, [r3, #0]
 800cab2:	b151      	cbz	r1, 800caca <_dtoa_r+0x52>
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	2301      	movs	r3, #1
 800cab8:	4093      	lsls	r3, r2
 800caba:	604a      	str	r2, [r1, #4]
 800cabc:	608b      	str	r3, [r1, #8]
 800cabe:	4628      	mov	r0, r5
 800cac0:	f001 f9ac 	bl	800de1c <_Bfree>
 800cac4:	2200      	movs	r2, #0
 800cac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	1e3b      	subs	r3, r7, #0
 800cacc:	bfaf      	iteee	ge
 800cace:	2300      	movge	r3, #0
 800cad0:	2201      	movlt	r2, #1
 800cad2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cad6:	9305      	strlt	r3, [sp, #20]
 800cad8:	bfa8      	it	ge
 800cada:	f8c8 3000 	strge.w	r3, [r8]
 800cade:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800cae2:	4b99      	ldr	r3, [pc, #612]	; (800cd48 <_dtoa_r+0x2d0>)
 800cae4:	bfb8      	it	lt
 800cae6:	f8c8 2000 	strlt.w	r2, [r8]
 800caea:	ea33 0309 	bics.w	r3, r3, r9
 800caee:	d119      	bne.n	800cb24 <_dtoa_r+0xac>
 800caf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800caf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cafc:	4333      	orrs	r3, r6
 800cafe:	f000 857f 	beq.w	800d600 <_dtoa_r+0xb88>
 800cb02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb04:	b953      	cbnz	r3, 800cb1c <_dtoa_r+0xa4>
 800cb06:	4b91      	ldr	r3, [pc, #580]	; (800cd4c <_dtoa_r+0x2d4>)
 800cb08:	e022      	b.n	800cb50 <_dtoa_r+0xd8>
 800cb0a:	4b91      	ldr	r3, [pc, #580]	; (800cd50 <_dtoa_r+0x2d8>)
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	3308      	adds	r3, #8
 800cb10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	9803      	ldr	r0, [sp, #12]
 800cb16:	b019      	add	sp, #100	; 0x64
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1c:	4b8b      	ldr	r3, [pc, #556]	; (800cd4c <_dtoa_r+0x2d4>)
 800cb1e:	9303      	str	r3, [sp, #12]
 800cb20:	3303      	adds	r3, #3
 800cb22:	e7f5      	b.n	800cb10 <_dtoa_r+0x98>
 800cb24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cb2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb30:	2200      	movs	r2, #0
 800cb32:	2300      	movs	r3, #0
 800cb34:	f7f3 ff7e 	bl	8000a34 <__aeabi_dcmpeq>
 800cb38:	4680      	mov	r8, r0
 800cb3a:	b158      	cbz	r0, 800cb54 <_dtoa_r+0xdc>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb40:	6013      	str	r3, [r2, #0]
 800cb42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 8558 	beq.w	800d5fa <_dtoa_r+0xb82>
 800cb4a:	4882      	ldr	r0, [pc, #520]	; (800cd54 <_dtoa_r+0x2dc>)
 800cb4c:	6018      	str	r0, [r3, #0]
 800cb4e:	1e43      	subs	r3, r0, #1
 800cb50:	9303      	str	r3, [sp, #12]
 800cb52:	e7df      	b.n	800cb14 <_dtoa_r+0x9c>
 800cb54:	ab16      	add	r3, sp, #88	; 0x58
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	ab17      	add	r3, sp, #92	; 0x5c
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb62:	f001 fd05 	bl	800e570 <__d2b>
 800cb66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cb6a:	4683      	mov	fp, r0
 800cb6c:	2c00      	cmp	r4, #0
 800cb6e:	d07f      	beq.n	800cc70 <_dtoa_r+0x1f8>
 800cb70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cb7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cb82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4b72      	ldr	r3, [pc, #456]	; (800cd58 <_dtoa_r+0x2e0>)
 800cb8e:	f7f3 fb31 	bl	80001f4 <__aeabi_dsub>
 800cb92:	a365      	add	r3, pc, #404	; (adr r3, 800cd28 <_dtoa_r+0x2b0>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f7f3 fce4 	bl	8000564 <__aeabi_dmul>
 800cb9c:	a364      	add	r3, pc, #400	; (adr r3, 800cd30 <_dtoa_r+0x2b8>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f7f3 fb29 	bl	80001f8 <__adddf3>
 800cba6:	4606      	mov	r6, r0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	460f      	mov	r7, r1
 800cbac:	f7f3 fc70 	bl	8000490 <__aeabi_i2d>
 800cbb0:	a361      	add	r3, pc, #388	; (adr r3, 800cd38 <_dtoa_r+0x2c0>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fcd5 	bl	8000564 <__aeabi_dmul>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	4639      	mov	r1, r7
 800cbc2:	f7f3 fb19 	bl	80001f8 <__adddf3>
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460f      	mov	r7, r1
 800cbca:	f7f3 ff7b 	bl	8000ac4 <__aeabi_d2iz>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	4682      	mov	sl, r0
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 ff36 	bl	8000a48 <__aeabi_dcmplt>
 800cbdc:	b148      	cbz	r0, 800cbf2 <_dtoa_r+0x17a>
 800cbde:	4650      	mov	r0, sl
 800cbe0:	f7f3 fc56 	bl	8000490 <__aeabi_i2d>
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	463b      	mov	r3, r7
 800cbe8:	f7f3 ff24 	bl	8000a34 <__aeabi_dcmpeq>
 800cbec:	b908      	cbnz	r0, 800cbf2 <_dtoa_r+0x17a>
 800cbee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbf2:	f1ba 0f16 	cmp.w	sl, #22
 800cbf6:	d858      	bhi.n	800ccaa <_dtoa_r+0x232>
 800cbf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbfc:	4b57      	ldr	r3, [pc, #348]	; (800cd5c <_dtoa_r+0x2e4>)
 800cbfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	f7f3 ff1f 	bl	8000a48 <__aeabi_dcmplt>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d04f      	beq.n	800ccae <_dtoa_r+0x236>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc14:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc18:	1b1c      	subs	r4, r3, r4
 800cc1a:	1e63      	subs	r3, r4, #1
 800cc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1e:	bf49      	itett	mi
 800cc20:	f1c4 0301 	rsbmi	r3, r4, #1
 800cc24:	2300      	movpl	r3, #0
 800cc26:	9306      	strmi	r3, [sp, #24]
 800cc28:	2300      	movmi	r3, #0
 800cc2a:	bf54      	ite	pl
 800cc2c:	9306      	strpl	r3, [sp, #24]
 800cc2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cc30:	f1ba 0f00 	cmp.w	sl, #0
 800cc34:	db3d      	blt.n	800ccb2 <_dtoa_r+0x23a>
 800cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc3c:	4453      	add	r3, sl
 800cc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc40:	2300      	movs	r3, #0
 800cc42:	930a      	str	r3, [sp, #40]	; 0x28
 800cc44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc46:	2b09      	cmp	r3, #9
 800cc48:	f200 808c 	bhi.w	800cd64 <_dtoa_r+0x2ec>
 800cc4c:	2b05      	cmp	r3, #5
 800cc4e:	bfc4      	itt	gt
 800cc50:	3b04      	subgt	r3, #4
 800cc52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800cc54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc56:	bfc8      	it	gt
 800cc58:	2400      	movgt	r4, #0
 800cc5a:	f1a3 0302 	sub.w	r3, r3, #2
 800cc5e:	bfd8      	it	le
 800cc60:	2401      	movle	r4, #1
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	f200 808a 	bhi.w	800cd7c <_dtoa_r+0x304>
 800cc68:	e8df f003 	tbb	[pc, r3]
 800cc6c:	5b4d4f2d 	.word	0x5b4d4f2d
 800cc70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800cc74:	441c      	add	r4, r3
 800cc76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	bfc3      	ittte	gt
 800cc7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800cc86:	fa09 f303 	lslgt.w	r3, r9, r3
 800cc8a:	f1c3 0320 	rsble	r3, r3, #32
 800cc8e:	bfc6      	itte	gt
 800cc90:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc94:	4318      	orrgt	r0, r3
 800cc96:	fa06 f003 	lslle.w	r0, r6, r3
 800cc9a:	f7f3 fbe9 	bl	8000470 <__aeabi_ui2d>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cca4:	3c01      	subs	r4, #1
 800cca6:	9313      	str	r3, [sp, #76]	; 0x4c
 800cca8:	e76f      	b.n	800cb8a <_dtoa_r+0x112>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e7b2      	b.n	800cc14 <_dtoa_r+0x19c>
 800ccae:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccb0:	e7b1      	b.n	800cc16 <_dtoa_r+0x19e>
 800ccb2:	9b06      	ldr	r3, [sp, #24]
 800ccb4:	eba3 030a 	sub.w	r3, r3, sl
 800ccb8:	9306      	str	r3, [sp, #24]
 800ccba:	f1ca 0300 	rsb	r3, sl, #0
 800ccbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	930e      	str	r3, [sp, #56]	; 0x38
 800ccc4:	e7be      	b.n	800cc44 <_dtoa_r+0x1cc>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	dc58      	bgt.n	800cd82 <_dtoa_r+0x30a>
 800ccd0:	f04f 0901 	mov.w	r9, #1
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	f8cd 9020 	str.w	r9, [sp, #32]
 800ccda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ccde:	2200      	movs	r2, #0
 800cce0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cce2:	6042      	str	r2, [r0, #4]
 800cce4:	2204      	movs	r2, #4
 800cce6:	f102 0614 	add.w	r6, r2, #20
 800ccea:	429e      	cmp	r6, r3
 800ccec:	6841      	ldr	r1, [r0, #4]
 800ccee:	d94e      	bls.n	800cd8e <_dtoa_r+0x316>
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f001 f853 	bl	800dd9c <_Balloc>
 800ccf6:	9003      	str	r0, [sp, #12]
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d14c      	bne.n	800cd96 <_dtoa_r+0x31e>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd02:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <_dtoa_r+0x2e8>)
 800cd04:	e6cc      	b.n	800caa0 <_dtoa_r+0x28>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e7de      	b.n	800ccc8 <_dtoa_r+0x250>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd10:	eb0a 0903 	add.w	r9, sl, r3
 800cd14:	f109 0301 	add.w	r3, r9, #1
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	9308      	str	r3, [sp, #32]
 800cd1c:	bfb8      	it	lt
 800cd1e:	2301      	movlt	r3, #1
 800cd20:	e7dd      	b.n	800ccde <_dtoa_r+0x266>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e7f2      	b.n	800cd0c <_dtoa_r+0x294>
 800cd26:	bf00      	nop
 800cd28:	636f4361 	.word	0x636f4361
 800cd2c:	3fd287a7 	.word	0x3fd287a7
 800cd30:	8b60c8b3 	.word	0x8b60c8b3
 800cd34:	3fc68a28 	.word	0x3fc68a28
 800cd38:	509f79fb 	.word	0x509f79fb
 800cd3c:	3fd34413 	.word	0x3fd34413
 800cd40:	0800fa56 	.word	0x0800fa56
 800cd44:	0800fa6d 	.word	0x0800fa6d
 800cd48:	7ff00000 	.word	0x7ff00000
 800cd4c:	0800fa52 	.word	0x0800fa52
 800cd50:	0800fa49 	.word	0x0800fa49
 800cd54:	0800f8c9 	.word	0x0800f8c9
 800cd58:	3ff80000 	.word	0x3ff80000
 800cd5c:	0800fbd8 	.word	0x0800fbd8
 800cd60:	0800fac8 	.word	0x0800fac8
 800cd64:	2401      	movs	r4, #1
 800cd66:	2300      	movs	r3, #0
 800cd68:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd6a:	9322      	str	r3, [sp, #136]	; 0x88
 800cd6c:	f04f 39ff 	mov.w	r9, #4294967295
 800cd70:	2200      	movs	r2, #0
 800cd72:	2312      	movs	r3, #18
 800cd74:	f8cd 9020 	str.w	r9, [sp, #32]
 800cd78:	9223      	str	r2, [sp, #140]	; 0x8c
 800cd7a:	e7b0      	b.n	800ccde <_dtoa_r+0x266>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd80:	e7f4      	b.n	800cd6c <_dtoa_r+0x2f4>
 800cd82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800cd86:	464b      	mov	r3, r9
 800cd88:	f8cd 9020 	str.w	r9, [sp, #32]
 800cd8c:	e7a7      	b.n	800ccde <_dtoa_r+0x266>
 800cd8e:	3101      	adds	r1, #1
 800cd90:	6041      	str	r1, [r0, #4]
 800cd92:	0052      	lsls	r2, r2, #1
 800cd94:	e7a7      	b.n	800cce6 <_dtoa_r+0x26e>
 800cd96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd98:	9a03      	ldr	r2, [sp, #12]
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	9b08      	ldr	r3, [sp, #32]
 800cd9e:	2b0e      	cmp	r3, #14
 800cda0:	f200 80a8 	bhi.w	800cef4 <_dtoa_r+0x47c>
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	f000 80a5 	beq.w	800cef4 <_dtoa_r+0x47c>
 800cdaa:	f1ba 0f00 	cmp.w	sl, #0
 800cdae:	dd34      	ble.n	800ce1a <_dtoa_r+0x3a2>
 800cdb0:	4a9a      	ldr	r2, [pc, #616]	; (800d01c <_dtoa_r+0x5a4>)
 800cdb2:	f00a 030f 	and.w	r3, sl, #15
 800cdb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cdbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cdc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cdc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800cdca:	d016      	beq.n	800cdfa <_dtoa_r+0x382>
 800cdcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdd0:	4b93      	ldr	r3, [pc, #588]	; (800d020 <_dtoa_r+0x5a8>)
 800cdd2:	2703      	movs	r7, #3
 800cdd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdd8:	f7f3 fcee 	bl	80007b8 <__aeabi_ddiv>
 800cddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cde0:	f004 040f 	and.w	r4, r4, #15
 800cde4:	4e8e      	ldr	r6, [pc, #568]	; (800d020 <_dtoa_r+0x5a8>)
 800cde6:	b954      	cbnz	r4, 800cdfe <_dtoa_r+0x386>
 800cde8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdf0:	f7f3 fce2 	bl	80007b8 <__aeabi_ddiv>
 800cdf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdf8:	e029      	b.n	800ce4e <_dtoa_r+0x3d6>
 800cdfa:	2702      	movs	r7, #2
 800cdfc:	e7f2      	b.n	800cde4 <_dtoa_r+0x36c>
 800cdfe:	07e1      	lsls	r1, r4, #31
 800ce00:	d508      	bpl.n	800ce14 <_dtoa_r+0x39c>
 800ce02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce0a:	f7f3 fbab 	bl	8000564 <__aeabi_dmul>
 800ce0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce12:	3701      	adds	r7, #1
 800ce14:	1064      	asrs	r4, r4, #1
 800ce16:	3608      	adds	r6, #8
 800ce18:	e7e5      	b.n	800cde6 <_dtoa_r+0x36e>
 800ce1a:	f000 80a5 	beq.w	800cf68 <_dtoa_r+0x4f0>
 800ce1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce22:	f1ca 0400 	rsb	r4, sl, #0
 800ce26:	4b7d      	ldr	r3, [pc, #500]	; (800d01c <_dtoa_r+0x5a4>)
 800ce28:	f004 020f 	and.w	r2, r4, #15
 800ce2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f7f3 fb96 	bl	8000564 <__aeabi_dmul>
 800ce38:	2702      	movs	r7, #2
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce40:	4e77      	ldr	r6, [pc, #476]	; (800d020 <_dtoa_r+0x5a8>)
 800ce42:	1124      	asrs	r4, r4, #4
 800ce44:	2c00      	cmp	r4, #0
 800ce46:	f040 8084 	bne.w	800cf52 <_dtoa_r+0x4da>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1d2      	bne.n	800cdf4 <_dtoa_r+0x37c>
 800ce4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 808b 	beq.w	800cf6c <_dtoa_r+0x4f4>
 800ce56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ce5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ce5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce62:	2200      	movs	r2, #0
 800ce64:	4b6f      	ldr	r3, [pc, #444]	; (800d024 <_dtoa_r+0x5ac>)
 800ce66:	f7f3 fdef 	bl	8000a48 <__aeabi_dcmplt>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d07e      	beq.n	800cf6c <_dtoa_r+0x4f4>
 800ce6e:	9b08      	ldr	r3, [sp, #32]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d07b      	beq.n	800cf6c <_dtoa_r+0x4f4>
 800ce74:	f1b9 0f00 	cmp.w	r9, #0
 800ce78:	dd38      	ble.n	800ceec <_dtoa_r+0x474>
 800ce7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4b69      	ldr	r3, [pc, #420]	; (800d028 <_dtoa_r+0x5b0>)
 800ce82:	f7f3 fb6f 	bl	8000564 <__aeabi_dmul>
 800ce86:	464c      	mov	r4, r9
 800ce88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ce90:	3701      	adds	r7, #1
 800ce92:	4638      	mov	r0, r7
 800ce94:	f7f3 fafc 	bl	8000490 <__aeabi_i2d>
 800ce98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce9c:	f7f3 fb62 	bl	8000564 <__aeabi_dmul>
 800cea0:	2200      	movs	r2, #0
 800cea2:	4b62      	ldr	r3, [pc, #392]	; (800d02c <_dtoa_r+0x5b4>)
 800cea4:	f7f3 f9a8 	bl	80001f8 <__adddf3>
 800cea8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ceac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ceb0:	9611      	str	r6, [sp, #68]	; 0x44
 800ceb2:	2c00      	cmp	r4, #0
 800ceb4:	d15d      	bne.n	800cf72 <_dtoa_r+0x4fa>
 800ceb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ceba:	2200      	movs	r2, #0
 800cebc:	4b5c      	ldr	r3, [pc, #368]	; (800d030 <_dtoa_r+0x5b8>)
 800cebe:	f7f3 f999 	bl	80001f4 <__aeabi_dsub>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ceca:	4633      	mov	r3, r6
 800cecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cece:	f7f3 fdd9 	bl	8000a84 <__aeabi_dcmpgt>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f040 829c 	bne.w	800d410 <_dtoa_r+0x998>
 800ced8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cedc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cede:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cee2:	f7f3 fdb1 	bl	8000a48 <__aeabi_dcmplt>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f040 8290 	bne.w	800d40c <_dtoa_r+0x994>
 800ceec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f2c0 8152 	blt.w	800d1a0 <_dtoa_r+0x728>
 800cefc:	f1ba 0f0e 	cmp.w	sl, #14
 800cf00:	f300 814e 	bgt.w	800d1a0 <_dtoa_r+0x728>
 800cf04:	4b45      	ldr	r3, [pc, #276]	; (800d01c <_dtoa_r+0x5a4>)
 800cf06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cf12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f280 80db 	bge.w	800d0d0 <_dtoa_r+0x658>
 800cf1a:	9b08      	ldr	r3, [sp, #32]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f300 80d7 	bgt.w	800d0d0 <_dtoa_r+0x658>
 800cf22:	f040 8272 	bne.w	800d40a <_dtoa_r+0x992>
 800cf26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	4b40      	ldr	r3, [pc, #256]	; (800d030 <_dtoa_r+0x5b8>)
 800cf2e:	f7f3 fb19 	bl	8000564 <__aeabi_dmul>
 800cf32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf36:	f7f3 fd9b 	bl	8000a70 <__aeabi_dcmpge>
 800cf3a:	9c08      	ldr	r4, [sp, #32]
 800cf3c:	4626      	mov	r6, r4
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f040 8248 	bne.w	800d3d4 <_dtoa_r+0x95c>
 800cf44:	2331      	movs	r3, #49	; 0x31
 800cf46:	9f03      	ldr	r7, [sp, #12]
 800cf48:	f10a 0a01 	add.w	sl, sl, #1
 800cf4c:	f807 3b01 	strb.w	r3, [r7], #1
 800cf50:	e244      	b.n	800d3dc <_dtoa_r+0x964>
 800cf52:	07e2      	lsls	r2, r4, #31
 800cf54:	d505      	bpl.n	800cf62 <_dtoa_r+0x4ea>
 800cf56:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf5a:	f7f3 fb03 	bl	8000564 <__aeabi_dmul>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	3701      	adds	r7, #1
 800cf62:	1064      	asrs	r4, r4, #1
 800cf64:	3608      	adds	r6, #8
 800cf66:	e76d      	b.n	800ce44 <_dtoa_r+0x3cc>
 800cf68:	2702      	movs	r7, #2
 800cf6a:	e770      	b.n	800ce4e <_dtoa_r+0x3d6>
 800cf6c:	46d0      	mov	r8, sl
 800cf6e:	9c08      	ldr	r4, [sp, #32]
 800cf70:	e78f      	b.n	800ce92 <_dtoa_r+0x41a>
 800cf72:	9903      	ldr	r1, [sp, #12]
 800cf74:	4b29      	ldr	r3, [pc, #164]	; (800d01c <_dtoa_r+0x5a4>)
 800cf76:	4421      	add	r1, r4
 800cf78:	9112      	str	r1, [sp, #72]	; 0x48
 800cf7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cf84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	d055      	beq.n	800d038 <_dtoa_r+0x5c0>
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	4929      	ldr	r1, [pc, #164]	; (800d034 <_dtoa_r+0x5bc>)
 800cf90:	f7f3 fc12 	bl	80007b8 <__aeabi_ddiv>
 800cf94:	463b      	mov	r3, r7
 800cf96:	4632      	mov	r2, r6
 800cf98:	f7f3 f92c 	bl	80001f4 <__aeabi_dsub>
 800cf9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cfa0:	9f03      	ldr	r7, [sp, #12]
 800cfa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfa6:	f7f3 fd8d 	bl	8000ac4 <__aeabi_d2iz>
 800cfaa:	4604      	mov	r4, r0
 800cfac:	f7f3 fa70 	bl	8000490 <__aeabi_i2d>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfb8:	f7f3 f91c 	bl	80001f4 <__aeabi_dsub>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	3430      	adds	r4, #48	; 0x30
 800cfc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfca:	f807 4b01 	strb.w	r4, [r7], #1
 800cfce:	f7f3 fd3b 	bl	8000a48 <__aeabi_dcmplt>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d174      	bne.n	800d0c0 <_dtoa_r+0x648>
 800cfd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfda:	2000      	movs	r0, #0
 800cfdc:	4911      	ldr	r1, [pc, #68]	; (800d024 <_dtoa_r+0x5ac>)
 800cfde:	f7f3 f909 	bl	80001f4 <__aeabi_dsub>
 800cfe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfe6:	f7f3 fd2f 	bl	8000a48 <__aeabi_dcmplt>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	f040 80b7 	bne.w	800d15e <_dtoa_r+0x6e6>
 800cff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cff2:	429f      	cmp	r7, r3
 800cff4:	f43f af7a 	beq.w	800ceec <_dtoa_r+0x474>
 800cff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cffc:	2200      	movs	r2, #0
 800cffe:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <_dtoa_r+0x5b0>)
 800d000:	f7f3 fab0 	bl	8000564 <__aeabi_dmul>
 800d004:	2200      	movs	r2, #0
 800d006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d00e:	4b06      	ldr	r3, [pc, #24]	; (800d028 <_dtoa_r+0x5b0>)
 800d010:	f7f3 faa8 	bl	8000564 <__aeabi_dmul>
 800d014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d018:	e7c3      	b.n	800cfa2 <_dtoa_r+0x52a>
 800d01a:	bf00      	nop
 800d01c:	0800fbd8 	.word	0x0800fbd8
 800d020:	0800fbb0 	.word	0x0800fbb0
 800d024:	3ff00000 	.word	0x3ff00000
 800d028:	40240000 	.word	0x40240000
 800d02c:	401c0000 	.word	0x401c0000
 800d030:	40140000 	.word	0x40140000
 800d034:	3fe00000 	.word	0x3fe00000
 800d038:	4630      	mov	r0, r6
 800d03a:	4639      	mov	r1, r7
 800d03c:	f7f3 fa92 	bl	8000564 <__aeabi_dmul>
 800d040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d042:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d046:	9c03      	ldr	r4, [sp, #12]
 800d048:	9314      	str	r3, [sp, #80]	; 0x50
 800d04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d04e:	f7f3 fd39 	bl	8000ac4 <__aeabi_d2iz>
 800d052:	9015      	str	r0, [sp, #84]	; 0x54
 800d054:	f7f3 fa1c 	bl	8000490 <__aeabi_i2d>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d060:	f7f3 f8c8 	bl	80001f4 <__aeabi_dsub>
 800d064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d066:	4606      	mov	r6, r0
 800d068:	3330      	adds	r3, #48	; 0x30
 800d06a:	f804 3b01 	strb.w	r3, [r4], #1
 800d06e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d070:	460f      	mov	r7, r1
 800d072:	429c      	cmp	r4, r3
 800d074:	f04f 0200 	mov.w	r2, #0
 800d078:	d124      	bne.n	800d0c4 <_dtoa_r+0x64c>
 800d07a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d07e:	4bb0      	ldr	r3, [pc, #704]	; (800d340 <_dtoa_r+0x8c8>)
 800d080:	f7f3 f8ba 	bl	80001f8 <__adddf3>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 fcfa 	bl	8000a84 <__aeabi_dcmpgt>
 800d090:	2800      	cmp	r0, #0
 800d092:	d163      	bne.n	800d15c <_dtoa_r+0x6e4>
 800d094:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d098:	2000      	movs	r0, #0
 800d09a:	49a9      	ldr	r1, [pc, #676]	; (800d340 <_dtoa_r+0x8c8>)
 800d09c:	f7f3 f8aa 	bl	80001f4 <__aeabi_dsub>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	f7f3 fcce 	bl	8000a48 <__aeabi_dcmplt>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	f43f af1d 	beq.w	800ceec <_dtoa_r+0x474>
 800d0b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d0b4:	1e7b      	subs	r3, r7, #1
 800d0b6:	9314      	str	r3, [sp, #80]	; 0x50
 800d0b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d0bc:	2b30      	cmp	r3, #48	; 0x30
 800d0be:	d0f8      	beq.n	800d0b2 <_dtoa_r+0x63a>
 800d0c0:	46c2      	mov	sl, r8
 800d0c2:	e03b      	b.n	800d13c <_dtoa_r+0x6c4>
 800d0c4:	4b9f      	ldr	r3, [pc, #636]	; (800d344 <_dtoa_r+0x8cc>)
 800d0c6:	f7f3 fa4d 	bl	8000564 <__aeabi_dmul>
 800d0ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0ce:	e7bc      	b.n	800d04a <_dtoa_r+0x5d2>
 800d0d0:	9f03      	ldr	r7, [sp, #12]
 800d0d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d0d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 fb6b 	bl	80007b8 <__aeabi_ddiv>
 800d0e2:	f7f3 fcef 	bl	8000ac4 <__aeabi_d2iz>
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	f7f3 f9d2 	bl	8000490 <__aeabi_i2d>
 800d0ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0f0:	f7f3 fa38 	bl	8000564 <__aeabi_dmul>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f7f3 f87a 	bl	80001f4 <__aeabi_dsub>
 800d100:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d104:	f807 6b01 	strb.w	r6, [r7], #1
 800d108:	9e03      	ldr	r6, [sp, #12]
 800d10a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d10e:	1bbe      	subs	r6, r7, r6
 800d110:	45b4      	cmp	ip, r6
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	d136      	bne.n	800d186 <_dtoa_r+0x70e>
 800d118:	f7f3 f86e 	bl	80001f8 <__adddf3>
 800d11c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d120:	4680      	mov	r8, r0
 800d122:	4689      	mov	r9, r1
 800d124:	f7f3 fcae 	bl	8000a84 <__aeabi_dcmpgt>
 800d128:	bb58      	cbnz	r0, 800d182 <_dtoa_r+0x70a>
 800d12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d12e:	4640      	mov	r0, r8
 800d130:	4649      	mov	r1, r9
 800d132:	f7f3 fc7f 	bl	8000a34 <__aeabi_dcmpeq>
 800d136:	b108      	cbz	r0, 800d13c <_dtoa_r+0x6c4>
 800d138:	07e1      	lsls	r1, r4, #31
 800d13a:	d422      	bmi.n	800d182 <_dtoa_r+0x70a>
 800d13c:	4628      	mov	r0, r5
 800d13e:	4659      	mov	r1, fp
 800d140:	f000 fe6c 	bl	800de1c <_Bfree>
 800d144:	2300      	movs	r3, #0
 800d146:	703b      	strb	r3, [r7, #0]
 800d148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d14a:	f10a 0001 	add.w	r0, sl, #1
 800d14e:	6018      	str	r0, [r3, #0]
 800d150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d152:	2b00      	cmp	r3, #0
 800d154:	f43f acde 	beq.w	800cb14 <_dtoa_r+0x9c>
 800d158:	601f      	str	r7, [r3, #0]
 800d15a:	e4db      	b.n	800cb14 <_dtoa_r+0x9c>
 800d15c:	4627      	mov	r7, r4
 800d15e:	463b      	mov	r3, r7
 800d160:	461f      	mov	r7, r3
 800d162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d166:	2a39      	cmp	r2, #57	; 0x39
 800d168:	d107      	bne.n	800d17a <_dtoa_r+0x702>
 800d16a:	9a03      	ldr	r2, [sp, #12]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d1f7      	bne.n	800d160 <_dtoa_r+0x6e8>
 800d170:	2230      	movs	r2, #48	; 0x30
 800d172:	9903      	ldr	r1, [sp, #12]
 800d174:	f108 0801 	add.w	r8, r8, #1
 800d178:	700a      	strb	r2, [r1, #0]
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	3201      	adds	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	e79e      	b.n	800d0c0 <_dtoa_r+0x648>
 800d182:	46d0      	mov	r8, sl
 800d184:	e7eb      	b.n	800d15e <_dtoa_r+0x6e6>
 800d186:	2200      	movs	r2, #0
 800d188:	4b6e      	ldr	r3, [pc, #440]	; (800d344 <_dtoa_r+0x8cc>)
 800d18a:	f7f3 f9eb 	bl	8000564 <__aeabi_dmul>
 800d18e:	2200      	movs	r2, #0
 800d190:	2300      	movs	r3, #0
 800d192:	4680      	mov	r8, r0
 800d194:	4689      	mov	r9, r1
 800d196:	f7f3 fc4d 	bl	8000a34 <__aeabi_dcmpeq>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d09b      	beq.n	800d0d6 <_dtoa_r+0x65e>
 800d19e:	e7cd      	b.n	800d13c <_dtoa_r+0x6c4>
 800d1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1a2:	2a00      	cmp	r2, #0
 800d1a4:	f000 80d0 	beq.w	800d348 <_dtoa_r+0x8d0>
 800d1a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d1aa:	2a01      	cmp	r2, #1
 800d1ac:	f300 80ae 	bgt.w	800d30c <_dtoa_r+0x894>
 800d1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1b2:	2a00      	cmp	r2, #0
 800d1b4:	f000 80a6 	beq.w	800d304 <_dtoa_r+0x88c>
 800d1b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d1be:	9f06      	ldr	r7, [sp, #24]
 800d1c0:	9a06      	ldr	r2, [sp, #24]
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	441a      	add	r2, r3
 800d1c6:	9206      	str	r2, [sp, #24]
 800d1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	441a      	add	r2, r3
 800d1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d1d0:	f000 ff24 	bl	800e01c <__i2b>
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	dd0c      	ble.n	800d1f4 <_dtoa_r+0x77c>
 800d1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	dd09      	ble.n	800d1f4 <_dtoa_r+0x77c>
 800d1e0:	42bb      	cmp	r3, r7
 800d1e2:	bfa8      	it	ge
 800d1e4:	463b      	movge	r3, r7
 800d1e6:	9a06      	ldr	r2, [sp, #24]
 800d1e8:	1aff      	subs	r7, r7, r3
 800d1ea:	1ad2      	subs	r2, r2, r3
 800d1ec:	9206      	str	r2, [sp, #24]
 800d1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f6:	b1f3      	cbz	r3, 800d236 <_dtoa_r+0x7be>
 800d1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 80a8 	beq.w	800d350 <_dtoa_r+0x8d8>
 800d200:	2c00      	cmp	r4, #0
 800d202:	dd10      	ble.n	800d226 <_dtoa_r+0x7ae>
 800d204:	4631      	mov	r1, r6
 800d206:	4622      	mov	r2, r4
 800d208:	4628      	mov	r0, r5
 800d20a:	f000 ffc5 	bl	800e198 <__pow5mult>
 800d20e:	465a      	mov	r2, fp
 800d210:	4601      	mov	r1, r0
 800d212:	4606      	mov	r6, r0
 800d214:	4628      	mov	r0, r5
 800d216:	f000 ff17 	bl	800e048 <__multiply>
 800d21a:	4680      	mov	r8, r0
 800d21c:	4659      	mov	r1, fp
 800d21e:	4628      	mov	r0, r5
 800d220:	f000 fdfc 	bl	800de1c <_Bfree>
 800d224:	46c3      	mov	fp, r8
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	1b1a      	subs	r2, r3, r4
 800d22a:	d004      	beq.n	800d236 <_dtoa_r+0x7be>
 800d22c:	4659      	mov	r1, fp
 800d22e:	4628      	mov	r0, r5
 800d230:	f000 ffb2 	bl	800e198 <__pow5mult>
 800d234:	4683      	mov	fp, r0
 800d236:	2101      	movs	r1, #1
 800d238:	4628      	mov	r0, r5
 800d23a:	f000 feef 	bl	800e01c <__i2b>
 800d23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d240:	4604      	mov	r4, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	f340 8086 	ble.w	800d354 <_dtoa_r+0x8dc>
 800d248:	461a      	mov	r2, r3
 800d24a:	4601      	mov	r1, r0
 800d24c:	4628      	mov	r0, r5
 800d24e:	f000 ffa3 	bl	800e198 <__pow5mult>
 800d252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d254:	4604      	mov	r4, r0
 800d256:	2b01      	cmp	r3, #1
 800d258:	dd7f      	ble.n	800d35a <_dtoa_r+0x8e2>
 800d25a:	f04f 0800 	mov.w	r8, #0
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d264:	6918      	ldr	r0, [r3, #16]
 800d266:	f000 fe8b 	bl	800df80 <__hi0bits>
 800d26a:	f1c0 0020 	rsb	r0, r0, #32
 800d26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d270:	4418      	add	r0, r3
 800d272:	f010 001f 	ands.w	r0, r0, #31
 800d276:	f000 8092 	beq.w	800d39e <_dtoa_r+0x926>
 800d27a:	f1c0 0320 	rsb	r3, r0, #32
 800d27e:	2b04      	cmp	r3, #4
 800d280:	f340 808a 	ble.w	800d398 <_dtoa_r+0x920>
 800d284:	f1c0 001c 	rsb	r0, r0, #28
 800d288:	9b06      	ldr	r3, [sp, #24]
 800d28a:	4407      	add	r7, r0
 800d28c:	4403      	add	r3, r0
 800d28e:	9306      	str	r3, [sp, #24]
 800d290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d292:	4403      	add	r3, r0
 800d294:	9309      	str	r3, [sp, #36]	; 0x24
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dd05      	ble.n	800d2a8 <_dtoa_r+0x830>
 800d29c:	4659      	mov	r1, fp
 800d29e:	461a      	mov	r2, r3
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	f000 ffd3 	bl	800e24c <__lshift>
 800d2a6:	4683      	mov	fp, r0
 800d2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	dd05      	ble.n	800d2ba <_dtoa_r+0x842>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f000 ffca 	bl	800e24c <__lshift>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d070      	beq.n	800d3a2 <_dtoa_r+0x92a>
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	4658      	mov	r0, fp
 800d2c4:	f001 f832 	bl	800e32c <__mcmp>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	da6a      	bge.n	800d3a2 <_dtoa_r+0x92a>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4659      	mov	r1, fp
 800d2d0:	220a      	movs	r2, #10
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f000 fdc4 	bl	800de60 <__multadd>
 800d2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2da:	4683      	mov	fp, r0
 800d2dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 8194 	beq.w	800d60e <_dtoa_r+0xb96>
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 fdb7 	bl	800de60 <__multadd>
 800d2f2:	f1b9 0f00 	cmp.w	r9, #0
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	f300 8093 	bgt.w	800d422 <_dtoa_r+0x9aa>
 800d2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	dc57      	bgt.n	800d3b2 <_dtoa_r+0x93a>
 800d302:	e08e      	b.n	800d422 <_dtoa_r+0x9aa>
 800d304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d30a:	e757      	b.n	800d1bc <_dtoa_r+0x744>
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	1e5c      	subs	r4, r3, #1
 800d310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d312:	42a3      	cmp	r3, r4
 800d314:	bfb7      	itett	lt
 800d316:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d318:	1b1c      	subge	r4, r3, r4
 800d31a:	1ae2      	sublt	r2, r4, r3
 800d31c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d31e:	bfbe      	ittt	lt
 800d320:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d322:	189b      	addlt	r3, r3, r2
 800d324:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d326:	9b08      	ldr	r3, [sp, #32]
 800d328:	bfb8      	it	lt
 800d32a:	2400      	movlt	r4, #0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	bfbb      	ittet	lt
 800d330:	9b06      	ldrlt	r3, [sp, #24]
 800d332:	9a08      	ldrlt	r2, [sp, #32]
 800d334:	9f06      	ldrge	r7, [sp, #24]
 800d336:	1a9f      	sublt	r7, r3, r2
 800d338:	bfac      	ite	ge
 800d33a:	9b08      	ldrge	r3, [sp, #32]
 800d33c:	2300      	movlt	r3, #0
 800d33e:	e73f      	b.n	800d1c0 <_dtoa_r+0x748>
 800d340:	3fe00000 	.word	0x3fe00000
 800d344:	40240000 	.word	0x40240000
 800d348:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d34a:	9f06      	ldr	r7, [sp, #24]
 800d34c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d34e:	e742      	b.n	800d1d6 <_dtoa_r+0x75e>
 800d350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d352:	e76b      	b.n	800d22c <_dtoa_r+0x7b4>
 800d354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d356:	2b01      	cmp	r3, #1
 800d358:	dc19      	bgt.n	800d38e <_dtoa_r+0x916>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	b9bb      	cbnz	r3, 800d38e <_dtoa_r+0x916>
 800d35e:	9b05      	ldr	r3, [sp, #20]
 800d360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d364:	b99b      	cbnz	r3, 800d38e <_dtoa_r+0x916>
 800d366:	9b05      	ldr	r3, [sp, #20]
 800d368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d36c:	0d1b      	lsrs	r3, r3, #20
 800d36e:	051b      	lsls	r3, r3, #20
 800d370:	b183      	cbz	r3, 800d394 <_dtoa_r+0x91c>
 800d372:	f04f 0801 	mov.w	r8, #1
 800d376:	9b06      	ldr	r3, [sp, #24]
 800d378:	3301      	adds	r3, #1
 800d37a:	9306      	str	r3, [sp, #24]
 800d37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37e:	3301      	adds	r3, #1
 800d380:	9309      	str	r3, [sp, #36]	; 0x24
 800d382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d384:	2b00      	cmp	r3, #0
 800d386:	f47f af6a 	bne.w	800d25e <_dtoa_r+0x7e6>
 800d38a:	2001      	movs	r0, #1
 800d38c:	e76f      	b.n	800d26e <_dtoa_r+0x7f6>
 800d38e:	f04f 0800 	mov.w	r8, #0
 800d392:	e7f6      	b.n	800d382 <_dtoa_r+0x90a>
 800d394:	4698      	mov	r8, r3
 800d396:	e7f4      	b.n	800d382 <_dtoa_r+0x90a>
 800d398:	f43f af7d 	beq.w	800d296 <_dtoa_r+0x81e>
 800d39c:	4618      	mov	r0, r3
 800d39e:	301c      	adds	r0, #28
 800d3a0:	e772      	b.n	800d288 <_dtoa_r+0x810>
 800d3a2:	9b08      	ldr	r3, [sp, #32]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dc36      	bgt.n	800d416 <_dtoa_r+0x99e>
 800d3a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	dd33      	ble.n	800d416 <_dtoa_r+0x99e>
 800d3ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3b2:	f1b9 0f00 	cmp.w	r9, #0
 800d3b6:	d10d      	bne.n	800d3d4 <_dtoa_r+0x95c>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	464b      	mov	r3, r9
 800d3bc:	2205      	movs	r2, #5
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f000 fd4e 	bl	800de60 <__multadd>
 800d3c4:	4601      	mov	r1, r0
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4658      	mov	r0, fp
 800d3ca:	f000 ffaf 	bl	800e32c <__mcmp>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	f73f adb8 	bgt.w	800cf44 <_dtoa_r+0x4cc>
 800d3d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3d6:	9f03      	ldr	r7, [sp, #12]
 800d3d8:	ea6f 0a03 	mvn.w	sl, r3
 800d3dc:	f04f 0800 	mov.w	r8, #0
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f000 fd1a 	bl	800de1c <_Bfree>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	f43f aea7 	beq.w	800d13c <_dtoa_r+0x6c4>
 800d3ee:	f1b8 0f00 	cmp.w	r8, #0
 800d3f2:	d005      	beq.n	800d400 <_dtoa_r+0x988>
 800d3f4:	45b0      	cmp	r8, r6
 800d3f6:	d003      	beq.n	800d400 <_dtoa_r+0x988>
 800d3f8:	4641      	mov	r1, r8
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f000 fd0e 	bl	800de1c <_Bfree>
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	f000 fd0a 	bl	800de1c <_Bfree>
 800d408:	e698      	b.n	800d13c <_dtoa_r+0x6c4>
 800d40a:	2400      	movs	r4, #0
 800d40c:	4626      	mov	r6, r4
 800d40e:	e7e1      	b.n	800d3d4 <_dtoa_r+0x95c>
 800d410:	46c2      	mov	sl, r8
 800d412:	4626      	mov	r6, r4
 800d414:	e596      	b.n	800cf44 <_dtoa_r+0x4cc>
 800d416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 80fd 	beq.w	800d61c <_dtoa_r+0xba4>
 800d422:	2f00      	cmp	r7, #0
 800d424:	dd05      	ble.n	800d432 <_dtoa_r+0x9ba>
 800d426:	4631      	mov	r1, r6
 800d428:	463a      	mov	r2, r7
 800d42a:	4628      	mov	r0, r5
 800d42c:	f000 ff0e 	bl	800e24c <__lshift>
 800d430:	4606      	mov	r6, r0
 800d432:	f1b8 0f00 	cmp.w	r8, #0
 800d436:	d05c      	beq.n	800d4f2 <_dtoa_r+0xa7a>
 800d438:	4628      	mov	r0, r5
 800d43a:	6871      	ldr	r1, [r6, #4]
 800d43c:	f000 fcae 	bl	800dd9c <_Balloc>
 800d440:	4607      	mov	r7, r0
 800d442:	b928      	cbnz	r0, 800d450 <_dtoa_r+0x9d8>
 800d444:	4602      	mov	r2, r0
 800d446:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d44a:	4b7f      	ldr	r3, [pc, #508]	; (800d648 <_dtoa_r+0xbd0>)
 800d44c:	f7ff bb28 	b.w	800caa0 <_dtoa_r+0x28>
 800d450:	6932      	ldr	r2, [r6, #16]
 800d452:	f106 010c 	add.w	r1, r6, #12
 800d456:	3202      	adds	r2, #2
 800d458:	0092      	lsls	r2, r2, #2
 800d45a:	300c      	adds	r0, #12
 800d45c:	f000 fc84 	bl	800dd68 <memcpy>
 800d460:	2201      	movs	r2, #1
 800d462:	4639      	mov	r1, r7
 800d464:	4628      	mov	r0, r5
 800d466:	f000 fef1 	bl	800e24c <__lshift>
 800d46a:	46b0      	mov	r8, r6
 800d46c:	4606      	mov	r6, r0
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	3301      	adds	r3, #1
 800d472:	9308      	str	r3, [sp, #32]
 800d474:	9b03      	ldr	r3, [sp, #12]
 800d476:	444b      	add	r3, r9
 800d478:	930a      	str	r3, [sp, #40]	; 0x28
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	9309      	str	r3, [sp, #36]	; 0x24
 800d482:	9b08      	ldr	r3, [sp, #32]
 800d484:	4621      	mov	r1, r4
 800d486:	3b01      	subs	r3, #1
 800d488:	4658      	mov	r0, fp
 800d48a:	9304      	str	r3, [sp, #16]
 800d48c:	f7ff fa68 	bl	800c960 <quorem>
 800d490:	4603      	mov	r3, r0
 800d492:	4641      	mov	r1, r8
 800d494:	3330      	adds	r3, #48	; 0x30
 800d496:	9006      	str	r0, [sp, #24]
 800d498:	4658      	mov	r0, fp
 800d49a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d49c:	f000 ff46 	bl	800e32c <__mcmp>
 800d4a0:	4632      	mov	r2, r6
 800d4a2:	4681      	mov	r9, r0
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f000 ff5c 	bl	800e364 <__mdiff>
 800d4ac:	68c2      	ldr	r2, [r0, #12]
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4b2:	bb02      	cbnz	r2, 800d4f6 <_dtoa_r+0xa7e>
 800d4b4:	4601      	mov	r1, r0
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f000 ff38 	bl	800e32c <__mcmp>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d4c8:	f000 fca8 	bl	800de1c <_Bfree>
 800d4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4d0:	9f08      	ldr	r7, [sp, #32]
 800d4d2:	ea43 0102 	orr.w	r1, r3, r2
 800d4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4dc:	d10d      	bne.n	800d4fa <_dtoa_r+0xa82>
 800d4de:	2b39      	cmp	r3, #57	; 0x39
 800d4e0:	d029      	beq.n	800d536 <_dtoa_r+0xabe>
 800d4e2:	f1b9 0f00 	cmp.w	r9, #0
 800d4e6:	dd01      	ble.n	800d4ec <_dtoa_r+0xa74>
 800d4e8:	9b06      	ldr	r3, [sp, #24]
 800d4ea:	3331      	adds	r3, #49	; 0x31
 800d4ec:	9a04      	ldr	r2, [sp, #16]
 800d4ee:	7013      	strb	r3, [r2, #0]
 800d4f0:	e776      	b.n	800d3e0 <_dtoa_r+0x968>
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	e7b9      	b.n	800d46a <_dtoa_r+0x9f2>
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	e7e2      	b.n	800d4c0 <_dtoa_r+0xa48>
 800d4fa:	f1b9 0f00 	cmp.w	r9, #0
 800d4fe:	db06      	blt.n	800d50e <_dtoa_r+0xa96>
 800d500:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d502:	ea41 0909 	orr.w	r9, r1, r9
 800d506:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d508:	ea59 0101 	orrs.w	r1, r9, r1
 800d50c:	d120      	bne.n	800d550 <_dtoa_r+0xad8>
 800d50e:	2a00      	cmp	r2, #0
 800d510:	ddec      	ble.n	800d4ec <_dtoa_r+0xa74>
 800d512:	4659      	mov	r1, fp
 800d514:	2201      	movs	r2, #1
 800d516:	4628      	mov	r0, r5
 800d518:	9308      	str	r3, [sp, #32]
 800d51a:	f000 fe97 	bl	800e24c <__lshift>
 800d51e:	4621      	mov	r1, r4
 800d520:	4683      	mov	fp, r0
 800d522:	f000 ff03 	bl	800e32c <__mcmp>
 800d526:	2800      	cmp	r0, #0
 800d528:	9b08      	ldr	r3, [sp, #32]
 800d52a:	dc02      	bgt.n	800d532 <_dtoa_r+0xaba>
 800d52c:	d1de      	bne.n	800d4ec <_dtoa_r+0xa74>
 800d52e:	07da      	lsls	r2, r3, #31
 800d530:	d5dc      	bpl.n	800d4ec <_dtoa_r+0xa74>
 800d532:	2b39      	cmp	r3, #57	; 0x39
 800d534:	d1d8      	bne.n	800d4e8 <_dtoa_r+0xa70>
 800d536:	2339      	movs	r3, #57	; 0x39
 800d538:	9a04      	ldr	r2, [sp, #16]
 800d53a:	7013      	strb	r3, [r2, #0]
 800d53c:	463b      	mov	r3, r7
 800d53e:	461f      	mov	r7, r3
 800d540:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d544:	3b01      	subs	r3, #1
 800d546:	2a39      	cmp	r2, #57	; 0x39
 800d548:	d050      	beq.n	800d5ec <_dtoa_r+0xb74>
 800d54a:	3201      	adds	r2, #1
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	e747      	b.n	800d3e0 <_dtoa_r+0x968>
 800d550:	2a00      	cmp	r2, #0
 800d552:	dd03      	ble.n	800d55c <_dtoa_r+0xae4>
 800d554:	2b39      	cmp	r3, #57	; 0x39
 800d556:	d0ee      	beq.n	800d536 <_dtoa_r+0xabe>
 800d558:	3301      	adds	r3, #1
 800d55a:	e7c7      	b.n	800d4ec <_dtoa_r+0xa74>
 800d55c:	9a08      	ldr	r2, [sp, #32]
 800d55e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d560:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d564:	428a      	cmp	r2, r1
 800d566:	d02a      	beq.n	800d5be <_dtoa_r+0xb46>
 800d568:	4659      	mov	r1, fp
 800d56a:	2300      	movs	r3, #0
 800d56c:	220a      	movs	r2, #10
 800d56e:	4628      	mov	r0, r5
 800d570:	f000 fc76 	bl	800de60 <__multadd>
 800d574:	45b0      	cmp	r8, r6
 800d576:	4683      	mov	fp, r0
 800d578:	f04f 0300 	mov.w	r3, #0
 800d57c:	f04f 020a 	mov.w	r2, #10
 800d580:	4641      	mov	r1, r8
 800d582:	4628      	mov	r0, r5
 800d584:	d107      	bne.n	800d596 <_dtoa_r+0xb1e>
 800d586:	f000 fc6b 	bl	800de60 <__multadd>
 800d58a:	4680      	mov	r8, r0
 800d58c:	4606      	mov	r6, r0
 800d58e:	9b08      	ldr	r3, [sp, #32]
 800d590:	3301      	adds	r3, #1
 800d592:	9308      	str	r3, [sp, #32]
 800d594:	e775      	b.n	800d482 <_dtoa_r+0xa0a>
 800d596:	f000 fc63 	bl	800de60 <__multadd>
 800d59a:	4631      	mov	r1, r6
 800d59c:	4680      	mov	r8, r0
 800d59e:	2300      	movs	r3, #0
 800d5a0:	220a      	movs	r2, #10
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f000 fc5c 	bl	800de60 <__multadd>
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	e7f0      	b.n	800d58e <_dtoa_r+0xb16>
 800d5ac:	f1b9 0f00 	cmp.w	r9, #0
 800d5b0:	bfcc      	ite	gt
 800d5b2:	464f      	movgt	r7, r9
 800d5b4:	2701      	movle	r7, #1
 800d5b6:	f04f 0800 	mov.w	r8, #0
 800d5ba:	9a03      	ldr	r2, [sp, #12]
 800d5bc:	4417      	add	r7, r2
 800d5be:	4659      	mov	r1, fp
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	9308      	str	r3, [sp, #32]
 800d5c6:	f000 fe41 	bl	800e24c <__lshift>
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4683      	mov	fp, r0
 800d5ce:	f000 fead 	bl	800e32c <__mcmp>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	dcb2      	bgt.n	800d53c <_dtoa_r+0xac4>
 800d5d6:	d102      	bne.n	800d5de <_dtoa_r+0xb66>
 800d5d8:	9b08      	ldr	r3, [sp, #32]
 800d5da:	07db      	lsls	r3, r3, #31
 800d5dc:	d4ae      	bmi.n	800d53c <_dtoa_r+0xac4>
 800d5de:	463b      	mov	r3, r7
 800d5e0:	461f      	mov	r7, r3
 800d5e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5e6:	2a30      	cmp	r2, #48	; 0x30
 800d5e8:	d0fa      	beq.n	800d5e0 <_dtoa_r+0xb68>
 800d5ea:	e6f9      	b.n	800d3e0 <_dtoa_r+0x968>
 800d5ec:	9a03      	ldr	r2, [sp, #12]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d1a5      	bne.n	800d53e <_dtoa_r+0xac6>
 800d5f2:	2331      	movs	r3, #49	; 0x31
 800d5f4:	f10a 0a01 	add.w	sl, sl, #1
 800d5f8:	e779      	b.n	800d4ee <_dtoa_r+0xa76>
 800d5fa:	4b14      	ldr	r3, [pc, #80]	; (800d64c <_dtoa_r+0xbd4>)
 800d5fc:	f7ff baa8 	b.w	800cb50 <_dtoa_r+0xd8>
 800d600:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d602:	2b00      	cmp	r3, #0
 800d604:	f47f aa81 	bne.w	800cb0a <_dtoa_r+0x92>
 800d608:	4b11      	ldr	r3, [pc, #68]	; (800d650 <_dtoa_r+0xbd8>)
 800d60a:	f7ff baa1 	b.w	800cb50 <_dtoa_r+0xd8>
 800d60e:	f1b9 0f00 	cmp.w	r9, #0
 800d612:	dc03      	bgt.n	800d61c <_dtoa_r+0xba4>
 800d614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d616:	2b02      	cmp	r3, #2
 800d618:	f73f aecb 	bgt.w	800d3b2 <_dtoa_r+0x93a>
 800d61c:	9f03      	ldr	r7, [sp, #12]
 800d61e:	4621      	mov	r1, r4
 800d620:	4658      	mov	r0, fp
 800d622:	f7ff f99d 	bl	800c960 <quorem>
 800d626:	9a03      	ldr	r2, [sp, #12]
 800d628:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d62c:	f807 3b01 	strb.w	r3, [r7], #1
 800d630:	1aba      	subs	r2, r7, r2
 800d632:	4591      	cmp	r9, r2
 800d634:	ddba      	ble.n	800d5ac <_dtoa_r+0xb34>
 800d636:	4659      	mov	r1, fp
 800d638:	2300      	movs	r3, #0
 800d63a:	220a      	movs	r2, #10
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 fc0f 	bl	800de60 <__multadd>
 800d642:	4683      	mov	fp, r0
 800d644:	e7eb      	b.n	800d61e <_dtoa_r+0xba6>
 800d646:	bf00      	nop
 800d648:	0800fac8 	.word	0x0800fac8
 800d64c:	0800f8c8 	.word	0x0800f8c8
 800d650:	0800fa49 	.word	0x0800fa49

0800d654 <rshift>:
 800d654:	6903      	ldr	r3, [r0, #16]
 800d656:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d65a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d65e:	f100 0414 	add.w	r4, r0, #20
 800d662:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d666:	dd46      	ble.n	800d6f6 <rshift+0xa2>
 800d668:	f011 011f 	ands.w	r1, r1, #31
 800d66c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d670:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d674:	d10c      	bne.n	800d690 <rshift+0x3c>
 800d676:	4629      	mov	r1, r5
 800d678:	f100 0710 	add.w	r7, r0, #16
 800d67c:	42b1      	cmp	r1, r6
 800d67e:	d335      	bcc.n	800d6ec <rshift+0x98>
 800d680:	1a9b      	subs	r3, r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	1eea      	subs	r2, r5, #3
 800d686:	4296      	cmp	r6, r2
 800d688:	bf38      	it	cc
 800d68a:	2300      	movcc	r3, #0
 800d68c:	4423      	add	r3, r4
 800d68e:	e015      	b.n	800d6bc <rshift+0x68>
 800d690:	46a1      	mov	r9, r4
 800d692:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d696:	f1c1 0820 	rsb	r8, r1, #32
 800d69a:	40cf      	lsrs	r7, r1
 800d69c:	f105 0e04 	add.w	lr, r5, #4
 800d6a0:	4576      	cmp	r6, lr
 800d6a2:	46f4      	mov	ip, lr
 800d6a4:	d816      	bhi.n	800d6d4 <rshift+0x80>
 800d6a6:	1a9a      	subs	r2, r3, r2
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	3a04      	subs	r2, #4
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	42ae      	cmp	r6, r5
 800d6b0:	bf38      	it	cc
 800d6b2:	2200      	movcc	r2, #0
 800d6b4:	18a3      	adds	r3, r4, r2
 800d6b6:	50a7      	str	r7, [r4, r2]
 800d6b8:	b107      	cbz	r7, 800d6bc <rshift+0x68>
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	42a3      	cmp	r3, r4
 800d6be:	eba3 0204 	sub.w	r2, r3, r4
 800d6c2:	bf08      	it	eq
 800d6c4:	2300      	moveq	r3, #0
 800d6c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6ca:	6102      	str	r2, [r0, #16]
 800d6cc:	bf08      	it	eq
 800d6ce:	6143      	streq	r3, [r0, #20]
 800d6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6d4:	f8dc c000 	ldr.w	ip, [ip]
 800d6d8:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6dc:	ea4c 0707 	orr.w	r7, ip, r7
 800d6e0:	f849 7b04 	str.w	r7, [r9], #4
 800d6e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6e8:	40cf      	lsrs	r7, r1
 800d6ea:	e7d9      	b.n	800d6a0 <rshift+0x4c>
 800d6ec:	f851 cb04 	ldr.w	ip, [r1], #4
 800d6f0:	f847 cf04 	str.w	ip, [r7, #4]!
 800d6f4:	e7c2      	b.n	800d67c <rshift+0x28>
 800d6f6:	4623      	mov	r3, r4
 800d6f8:	e7e0      	b.n	800d6bc <rshift+0x68>

0800d6fa <__hexdig_fun>:
 800d6fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d6fe:	2b09      	cmp	r3, #9
 800d700:	d802      	bhi.n	800d708 <__hexdig_fun+0xe>
 800d702:	3820      	subs	r0, #32
 800d704:	b2c0      	uxtb	r0, r0
 800d706:	4770      	bx	lr
 800d708:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d70c:	2b05      	cmp	r3, #5
 800d70e:	d801      	bhi.n	800d714 <__hexdig_fun+0x1a>
 800d710:	3847      	subs	r0, #71	; 0x47
 800d712:	e7f7      	b.n	800d704 <__hexdig_fun+0xa>
 800d714:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d718:	2b05      	cmp	r3, #5
 800d71a:	d801      	bhi.n	800d720 <__hexdig_fun+0x26>
 800d71c:	3827      	subs	r0, #39	; 0x27
 800d71e:	e7f1      	b.n	800d704 <__hexdig_fun+0xa>
 800d720:	2000      	movs	r0, #0
 800d722:	4770      	bx	lr

0800d724 <__gethex>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	b08b      	sub	sp, #44	; 0x2c
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4bb2      	ldr	r3, [pc, #712]	; (800d9f8 <__gethex+0x2d4>)
 800d72e:	9002      	str	r0, [sp, #8]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	468b      	mov	fp, r1
 800d734:	4618      	mov	r0, r3
 800d736:	4690      	mov	r8, r2
 800d738:	9303      	str	r3, [sp, #12]
 800d73a:	f7f2 fd4f 	bl	80001dc <strlen>
 800d73e:	4682      	mov	sl, r0
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	f8db 2000 	ldr.w	r2, [fp]
 800d746:	4403      	add	r3, r0
 800d748:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d74c:	9306      	str	r3, [sp, #24]
 800d74e:	1c93      	adds	r3, r2, #2
 800d750:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d754:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d758:	32fe      	adds	r2, #254	; 0xfe
 800d75a:	18d1      	adds	r1, r2, r3
 800d75c:	461f      	mov	r7, r3
 800d75e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d762:	9101      	str	r1, [sp, #4]
 800d764:	2830      	cmp	r0, #48	; 0x30
 800d766:	d0f8      	beq.n	800d75a <__gethex+0x36>
 800d768:	f7ff ffc7 	bl	800d6fa <__hexdig_fun>
 800d76c:	4604      	mov	r4, r0
 800d76e:	2800      	cmp	r0, #0
 800d770:	d13a      	bne.n	800d7e8 <__gethex+0xc4>
 800d772:	4652      	mov	r2, sl
 800d774:	4638      	mov	r0, r7
 800d776:	9903      	ldr	r1, [sp, #12]
 800d778:	f001 f93e 	bl	800e9f8 <strncmp>
 800d77c:	4605      	mov	r5, r0
 800d77e:	2800      	cmp	r0, #0
 800d780:	d166      	bne.n	800d850 <__gethex+0x12c>
 800d782:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d786:	eb07 060a 	add.w	r6, r7, sl
 800d78a:	f7ff ffb6 	bl	800d6fa <__hexdig_fun>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d060      	beq.n	800d854 <__gethex+0x130>
 800d792:	4633      	mov	r3, r6
 800d794:	7818      	ldrb	r0, [r3, #0]
 800d796:	461f      	mov	r7, r3
 800d798:	2830      	cmp	r0, #48	; 0x30
 800d79a:	f103 0301 	add.w	r3, r3, #1
 800d79e:	d0f9      	beq.n	800d794 <__gethex+0x70>
 800d7a0:	f7ff ffab 	bl	800d6fa <__hexdig_fun>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	fab0 f480 	clz	r4, r0
 800d7aa:	4635      	mov	r5, r6
 800d7ac:	0964      	lsrs	r4, r4, #5
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	463a      	mov	r2, r7
 800d7b2:	4616      	mov	r6, r2
 800d7b4:	7830      	ldrb	r0, [r6, #0]
 800d7b6:	3201      	adds	r2, #1
 800d7b8:	f7ff ff9f 	bl	800d6fa <__hexdig_fun>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d1f8      	bne.n	800d7b2 <__gethex+0x8e>
 800d7c0:	4652      	mov	r2, sl
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	9903      	ldr	r1, [sp, #12]
 800d7c6:	f001 f917 	bl	800e9f8 <strncmp>
 800d7ca:	b980      	cbnz	r0, 800d7ee <__gethex+0xca>
 800d7cc:	b94d      	cbnz	r5, 800d7e2 <__gethex+0xbe>
 800d7ce:	eb06 050a 	add.w	r5, r6, sl
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	4616      	mov	r6, r2
 800d7d6:	7830      	ldrb	r0, [r6, #0]
 800d7d8:	3201      	adds	r2, #1
 800d7da:	f7ff ff8e 	bl	800d6fa <__hexdig_fun>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d1f8      	bne.n	800d7d4 <__gethex+0xb0>
 800d7e2:	1bad      	subs	r5, r5, r6
 800d7e4:	00ad      	lsls	r5, r5, #2
 800d7e6:	e004      	b.n	800d7f2 <__gethex+0xce>
 800d7e8:	2400      	movs	r4, #0
 800d7ea:	4625      	mov	r5, r4
 800d7ec:	e7e0      	b.n	800d7b0 <__gethex+0x8c>
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	d1f7      	bne.n	800d7e2 <__gethex+0xbe>
 800d7f2:	7833      	ldrb	r3, [r6, #0]
 800d7f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d7f8:	2b50      	cmp	r3, #80	; 0x50
 800d7fa:	d139      	bne.n	800d870 <__gethex+0x14c>
 800d7fc:	7873      	ldrb	r3, [r6, #1]
 800d7fe:	2b2b      	cmp	r3, #43	; 0x2b
 800d800:	d02a      	beq.n	800d858 <__gethex+0x134>
 800d802:	2b2d      	cmp	r3, #45	; 0x2d
 800d804:	d02c      	beq.n	800d860 <__gethex+0x13c>
 800d806:	f04f 0900 	mov.w	r9, #0
 800d80a:	1c71      	adds	r1, r6, #1
 800d80c:	7808      	ldrb	r0, [r1, #0]
 800d80e:	f7ff ff74 	bl	800d6fa <__hexdig_fun>
 800d812:	1e43      	subs	r3, r0, #1
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b18      	cmp	r3, #24
 800d818:	d82a      	bhi.n	800d870 <__gethex+0x14c>
 800d81a:	f1a0 0210 	sub.w	r2, r0, #16
 800d81e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d822:	f7ff ff6a 	bl	800d6fa <__hexdig_fun>
 800d826:	1e43      	subs	r3, r0, #1
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b18      	cmp	r3, #24
 800d82c:	d91b      	bls.n	800d866 <__gethex+0x142>
 800d82e:	f1b9 0f00 	cmp.w	r9, #0
 800d832:	d000      	beq.n	800d836 <__gethex+0x112>
 800d834:	4252      	negs	r2, r2
 800d836:	4415      	add	r5, r2
 800d838:	f8cb 1000 	str.w	r1, [fp]
 800d83c:	b1d4      	cbz	r4, 800d874 <__gethex+0x150>
 800d83e:	9b01      	ldr	r3, [sp, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	bf14      	ite	ne
 800d844:	2700      	movne	r7, #0
 800d846:	2706      	moveq	r7, #6
 800d848:	4638      	mov	r0, r7
 800d84a:	b00b      	add	sp, #44	; 0x2c
 800d84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d850:	463e      	mov	r6, r7
 800d852:	4625      	mov	r5, r4
 800d854:	2401      	movs	r4, #1
 800d856:	e7cc      	b.n	800d7f2 <__gethex+0xce>
 800d858:	f04f 0900 	mov.w	r9, #0
 800d85c:	1cb1      	adds	r1, r6, #2
 800d85e:	e7d5      	b.n	800d80c <__gethex+0xe8>
 800d860:	f04f 0901 	mov.w	r9, #1
 800d864:	e7fa      	b.n	800d85c <__gethex+0x138>
 800d866:	230a      	movs	r3, #10
 800d868:	fb03 0202 	mla	r2, r3, r2, r0
 800d86c:	3a10      	subs	r2, #16
 800d86e:	e7d6      	b.n	800d81e <__gethex+0xfa>
 800d870:	4631      	mov	r1, r6
 800d872:	e7e1      	b.n	800d838 <__gethex+0x114>
 800d874:	4621      	mov	r1, r4
 800d876:	1bf3      	subs	r3, r6, r7
 800d878:	3b01      	subs	r3, #1
 800d87a:	2b07      	cmp	r3, #7
 800d87c:	dc0a      	bgt.n	800d894 <__gethex+0x170>
 800d87e:	9802      	ldr	r0, [sp, #8]
 800d880:	f000 fa8c 	bl	800dd9c <_Balloc>
 800d884:	4604      	mov	r4, r0
 800d886:	b940      	cbnz	r0, 800d89a <__gethex+0x176>
 800d888:	4602      	mov	r2, r0
 800d88a:	21de      	movs	r1, #222	; 0xde
 800d88c:	4b5b      	ldr	r3, [pc, #364]	; (800d9fc <__gethex+0x2d8>)
 800d88e:	485c      	ldr	r0, [pc, #368]	; (800da00 <__gethex+0x2dc>)
 800d890:	f001 f8d4 	bl	800ea3c <__assert_func>
 800d894:	3101      	adds	r1, #1
 800d896:	105b      	asrs	r3, r3, #1
 800d898:	e7ef      	b.n	800d87a <__gethex+0x156>
 800d89a:	f04f 0b00 	mov.w	fp, #0
 800d89e:	f100 0914 	add.w	r9, r0, #20
 800d8a2:	f1ca 0301 	rsb	r3, sl, #1
 800d8a6:	f8cd 9010 	str.w	r9, [sp, #16]
 800d8aa:	f8cd b004 	str.w	fp, [sp, #4]
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	42b7      	cmp	r7, r6
 800d8b2:	d33f      	bcc.n	800d934 <__gethex+0x210>
 800d8b4:	9f04      	ldr	r7, [sp, #16]
 800d8b6:	9b01      	ldr	r3, [sp, #4]
 800d8b8:	f847 3b04 	str.w	r3, [r7], #4
 800d8bc:	eba7 0709 	sub.w	r7, r7, r9
 800d8c0:	10bf      	asrs	r7, r7, #2
 800d8c2:	6127      	str	r7, [r4, #16]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fb5b 	bl	800df80 <__hi0bits>
 800d8ca:	017f      	lsls	r7, r7, #5
 800d8cc:	f8d8 6000 	ldr.w	r6, [r8]
 800d8d0:	1a3f      	subs	r7, r7, r0
 800d8d2:	42b7      	cmp	r7, r6
 800d8d4:	dd62      	ble.n	800d99c <__gethex+0x278>
 800d8d6:	1bbf      	subs	r7, r7, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 fef5 	bl	800e6ca <__any_on>
 800d8e0:	4682      	mov	sl, r0
 800d8e2:	b1a8      	cbz	r0, 800d910 <__gethex+0x1ec>
 800d8e4:	f04f 0a01 	mov.w	sl, #1
 800d8e8:	1e7b      	subs	r3, r7, #1
 800d8ea:	1159      	asrs	r1, r3, #5
 800d8ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d8f0:	f003 021f 	and.w	r2, r3, #31
 800d8f4:	fa0a f202 	lsl.w	r2, sl, r2
 800d8f8:	420a      	tst	r2, r1
 800d8fa:	d009      	beq.n	800d910 <__gethex+0x1ec>
 800d8fc:	4553      	cmp	r3, sl
 800d8fe:	dd05      	ble.n	800d90c <__gethex+0x1e8>
 800d900:	4620      	mov	r0, r4
 800d902:	1eb9      	subs	r1, r7, #2
 800d904:	f000 fee1 	bl	800e6ca <__any_on>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d144      	bne.n	800d996 <__gethex+0x272>
 800d90c:	f04f 0a02 	mov.w	sl, #2
 800d910:	4639      	mov	r1, r7
 800d912:	4620      	mov	r0, r4
 800d914:	f7ff fe9e 	bl	800d654 <rshift>
 800d918:	443d      	add	r5, r7
 800d91a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d91e:	42ab      	cmp	r3, r5
 800d920:	da4a      	bge.n	800d9b8 <__gethex+0x294>
 800d922:	4621      	mov	r1, r4
 800d924:	9802      	ldr	r0, [sp, #8]
 800d926:	f000 fa79 	bl	800de1c <_Bfree>
 800d92a:	2300      	movs	r3, #0
 800d92c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d92e:	27a3      	movs	r7, #163	; 0xa3
 800d930:	6013      	str	r3, [r2, #0]
 800d932:	e789      	b.n	800d848 <__gethex+0x124>
 800d934:	1e73      	subs	r3, r6, #1
 800d936:	9a06      	ldr	r2, [sp, #24]
 800d938:	9307      	str	r3, [sp, #28]
 800d93a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d93e:	4293      	cmp	r3, r2
 800d940:	d019      	beq.n	800d976 <__gethex+0x252>
 800d942:	f1bb 0f20 	cmp.w	fp, #32
 800d946:	d107      	bne.n	800d958 <__gethex+0x234>
 800d948:	9b04      	ldr	r3, [sp, #16]
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f843 2b04 	str.w	r2, [r3], #4
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	2300      	movs	r3, #0
 800d954:	469b      	mov	fp, r3
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d95c:	f7ff fecd 	bl	800d6fa <__hexdig_fun>
 800d960:	9b01      	ldr	r3, [sp, #4]
 800d962:	f000 000f 	and.w	r0, r0, #15
 800d966:	fa00 f00b 	lsl.w	r0, r0, fp
 800d96a:	4303      	orrs	r3, r0
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	f10b 0b04 	add.w	fp, fp, #4
 800d972:	9b07      	ldr	r3, [sp, #28]
 800d974:	e00d      	b.n	800d992 <__gethex+0x26e>
 800d976:	9a08      	ldr	r2, [sp, #32]
 800d978:	1e73      	subs	r3, r6, #1
 800d97a:	4413      	add	r3, r2
 800d97c:	42bb      	cmp	r3, r7
 800d97e:	d3e0      	bcc.n	800d942 <__gethex+0x21e>
 800d980:	4618      	mov	r0, r3
 800d982:	4652      	mov	r2, sl
 800d984:	9903      	ldr	r1, [sp, #12]
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	f001 f836 	bl	800e9f8 <strncmp>
 800d98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d98e:	2800      	cmp	r0, #0
 800d990:	d1d7      	bne.n	800d942 <__gethex+0x21e>
 800d992:	461e      	mov	r6, r3
 800d994:	e78c      	b.n	800d8b0 <__gethex+0x18c>
 800d996:	f04f 0a03 	mov.w	sl, #3
 800d99a:	e7b9      	b.n	800d910 <__gethex+0x1ec>
 800d99c:	da09      	bge.n	800d9b2 <__gethex+0x28e>
 800d99e:	1bf7      	subs	r7, r6, r7
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	463a      	mov	r2, r7
 800d9a4:	9802      	ldr	r0, [sp, #8]
 800d9a6:	f000 fc51 	bl	800e24c <__lshift>
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	1bed      	subs	r5, r5, r7
 800d9ae:	f100 0914 	add.w	r9, r0, #20
 800d9b2:	f04f 0a00 	mov.w	sl, #0
 800d9b6:	e7b0      	b.n	800d91a <__gethex+0x1f6>
 800d9b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d9bc:	42a8      	cmp	r0, r5
 800d9be:	dd72      	ble.n	800daa6 <__gethex+0x382>
 800d9c0:	1b45      	subs	r5, r0, r5
 800d9c2:	42ae      	cmp	r6, r5
 800d9c4:	dc35      	bgt.n	800da32 <__gethex+0x30e>
 800d9c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d029      	beq.n	800da22 <__gethex+0x2fe>
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d02b      	beq.n	800da2a <__gethex+0x306>
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d11c      	bne.n	800da10 <__gethex+0x2ec>
 800d9d6:	42ae      	cmp	r6, r5
 800d9d8:	d11a      	bne.n	800da10 <__gethex+0x2ec>
 800d9da:	2e01      	cmp	r6, #1
 800d9dc:	d112      	bne.n	800da04 <__gethex+0x2e0>
 800d9de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9e2:	9a05      	ldr	r2, [sp, #20]
 800d9e4:	2762      	movs	r7, #98	; 0x62
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	6123      	str	r3, [r4, #16]
 800d9ec:	f8c9 3000 	str.w	r3, [r9]
 800d9f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9f2:	601c      	str	r4, [r3, #0]
 800d9f4:	e728      	b.n	800d848 <__gethex+0x124>
 800d9f6:	bf00      	nop
 800d9f8:	0800fb40 	.word	0x0800fb40
 800d9fc:	0800fac8 	.word	0x0800fac8
 800da00:	0800fad9 	.word	0x0800fad9
 800da04:	4620      	mov	r0, r4
 800da06:	1e71      	subs	r1, r6, #1
 800da08:	f000 fe5f 	bl	800e6ca <__any_on>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d1e6      	bne.n	800d9de <__gethex+0x2ba>
 800da10:	4621      	mov	r1, r4
 800da12:	9802      	ldr	r0, [sp, #8]
 800da14:	f000 fa02 	bl	800de1c <_Bfree>
 800da18:	2300      	movs	r3, #0
 800da1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da1c:	2750      	movs	r7, #80	; 0x50
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	e712      	b.n	800d848 <__gethex+0x124>
 800da22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1f3      	bne.n	800da10 <__gethex+0x2ec>
 800da28:	e7d9      	b.n	800d9de <__gethex+0x2ba>
 800da2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1d6      	bne.n	800d9de <__gethex+0x2ba>
 800da30:	e7ee      	b.n	800da10 <__gethex+0x2ec>
 800da32:	1e6f      	subs	r7, r5, #1
 800da34:	f1ba 0f00 	cmp.w	sl, #0
 800da38:	d132      	bne.n	800daa0 <__gethex+0x37c>
 800da3a:	b127      	cbz	r7, 800da46 <__gethex+0x322>
 800da3c:	4639      	mov	r1, r7
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 fe43 	bl	800e6ca <__any_on>
 800da44:	4682      	mov	sl, r0
 800da46:	2101      	movs	r1, #1
 800da48:	117b      	asrs	r3, r7, #5
 800da4a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800da4e:	f007 071f 	and.w	r7, r7, #31
 800da52:	fa01 f707 	lsl.w	r7, r1, r7
 800da56:	421f      	tst	r7, r3
 800da58:	f04f 0702 	mov.w	r7, #2
 800da5c:	4629      	mov	r1, r5
 800da5e:	4620      	mov	r0, r4
 800da60:	bf18      	it	ne
 800da62:	f04a 0a02 	orrne.w	sl, sl, #2
 800da66:	1b76      	subs	r6, r6, r5
 800da68:	f7ff fdf4 	bl	800d654 <rshift>
 800da6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da70:	f1ba 0f00 	cmp.w	sl, #0
 800da74:	d048      	beq.n	800db08 <__gethex+0x3e4>
 800da76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d015      	beq.n	800daaa <__gethex+0x386>
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d017      	beq.n	800dab2 <__gethex+0x38e>
 800da82:	2b01      	cmp	r3, #1
 800da84:	d109      	bne.n	800da9a <__gethex+0x376>
 800da86:	f01a 0f02 	tst.w	sl, #2
 800da8a:	d006      	beq.n	800da9a <__gethex+0x376>
 800da8c:	f8d9 0000 	ldr.w	r0, [r9]
 800da90:	ea4a 0a00 	orr.w	sl, sl, r0
 800da94:	f01a 0f01 	tst.w	sl, #1
 800da98:	d10e      	bne.n	800dab8 <__gethex+0x394>
 800da9a:	f047 0710 	orr.w	r7, r7, #16
 800da9e:	e033      	b.n	800db08 <__gethex+0x3e4>
 800daa0:	f04f 0a01 	mov.w	sl, #1
 800daa4:	e7cf      	b.n	800da46 <__gethex+0x322>
 800daa6:	2701      	movs	r7, #1
 800daa8:	e7e2      	b.n	800da70 <__gethex+0x34c>
 800daaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daac:	f1c3 0301 	rsb	r3, r3, #1
 800dab0:	9315      	str	r3, [sp, #84]	; 0x54
 800dab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0f0      	beq.n	800da9a <__gethex+0x376>
 800dab8:	f04f 0c00 	mov.w	ip, #0
 800dabc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dac0:	f104 0314 	add.w	r3, r4, #20
 800dac4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dac8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dacc:	4618      	mov	r0, r3
 800dace:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dad6:	d01c      	beq.n	800db12 <__gethex+0x3ee>
 800dad8:	3201      	adds	r2, #1
 800dada:	6002      	str	r2, [r0, #0]
 800dadc:	2f02      	cmp	r7, #2
 800dade:	f104 0314 	add.w	r3, r4, #20
 800dae2:	d13d      	bne.n	800db60 <__gethex+0x43c>
 800dae4:	f8d8 2000 	ldr.w	r2, [r8]
 800dae8:	3a01      	subs	r2, #1
 800daea:	42b2      	cmp	r2, r6
 800daec:	d10a      	bne.n	800db04 <__gethex+0x3e0>
 800daee:	2201      	movs	r2, #1
 800daf0:	1171      	asrs	r1, r6, #5
 800daf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf6:	f006 061f 	and.w	r6, r6, #31
 800dafa:	fa02 f606 	lsl.w	r6, r2, r6
 800dafe:	421e      	tst	r6, r3
 800db00:	bf18      	it	ne
 800db02:	4617      	movne	r7, r2
 800db04:	f047 0720 	orr.w	r7, r7, #32
 800db08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db0a:	601c      	str	r4, [r3, #0]
 800db0c:	9b05      	ldr	r3, [sp, #20]
 800db0e:	601d      	str	r5, [r3, #0]
 800db10:	e69a      	b.n	800d848 <__gethex+0x124>
 800db12:	4299      	cmp	r1, r3
 800db14:	f843 cc04 	str.w	ip, [r3, #-4]
 800db18:	d8d8      	bhi.n	800dacc <__gethex+0x3a8>
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	459b      	cmp	fp, r3
 800db1e:	db17      	blt.n	800db50 <__gethex+0x42c>
 800db20:	6861      	ldr	r1, [r4, #4]
 800db22:	9802      	ldr	r0, [sp, #8]
 800db24:	3101      	adds	r1, #1
 800db26:	f000 f939 	bl	800dd9c <_Balloc>
 800db2a:	4681      	mov	r9, r0
 800db2c:	b918      	cbnz	r0, 800db36 <__gethex+0x412>
 800db2e:	4602      	mov	r2, r0
 800db30:	2184      	movs	r1, #132	; 0x84
 800db32:	4b19      	ldr	r3, [pc, #100]	; (800db98 <__gethex+0x474>)
 800db34:	e6ab      	b.n	800d88e <__gethex+0x16a>
 800db36:	6922      	ldr	r2, [r4, #16]
 800db38:	f104 010c 	add.w	r1, r4, #12
 800db3c:	3202      	adds	r2, #2
 800db3e:	0092      	lsls	r2, r2, #2
 800db40:	300c      	adds	r0, #12
 800db42:	f000 f911 	bl	800dd68 <memcpy>
 800db46:	4621      	mov	r1, r4
 800db48:	9802      	ldr	r0, [sp, #8]
 800db4a:	f000 f967 	bl	800de1c <_Bfree>
 800db4e:	464c      	mov	r4, r9
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	6122      	str	r2, [r4, #16]
 800db56:	2201      	movs	r2, #1
 800db58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db5c:	615a      	str	r2, [r3, #20]
 800db5e:	e7bd      	b.n	800dadc <__gethex+0x3b8>
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	455a      	cmp	r2, fp
 800db64:	dd0b      	ble.n	800db7e <__gethex+0x45a>
 800db66:	2101      	movs	r1, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f7ff fd73 	bl	800d654 <rshift>
 800db6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db72:	3501      	adds	r5, #1
 800db74:	42ab      	cmp	r3, r5
 800db76:	f6ff aed4 	blt.w	800d922 <__gethex+0x1fe>
 800db7a:	2701      	movs	r7, #1
 800db7c:	e7c2      	b.n	800db04 <__gethex+0x3e0>
 800db7e:	f016 061f 	ands.w	r6, r6, #31
 800db82:	d0fa      	beq.n	800db7a <__gethex+0x456>
 800db84:	4453      	add	r3, sl
 800db86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db8a:	f000 f9f9 	bl	800df80 <__hi0bits>
 800db8e:	f1c6 0620 	rsb	r6, r6, #32
 800db92:	42b0      	cmp	r0, r6
 800db94:	dbe7      	blt.n	800db66 <__gethex+0x442>
 800db96:	e7f0      	b.n	800db7a <__gethex+0x456>
 800db98:	0800fac8 	.word	0x0800fac8

0800db9c <L_shift>:
 800db9c:	f1c2 0208 	rsb	r2, r2, #8
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	b570      	push	{r4, r5, r6, lr}
 800dba4:	f1c2 0620 	rsb	r6, r2, #32
 800dba8:	6843      	ldr	r3, [r0, #4]
 800dbaa:	6804      	ldr	r4, [r0, #0]
 800dbac:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb0:	432c      	orrs	r4, r5
 800dbb2:	40d3      	lsrs	r3, r2
 800dbb4:	6004      	str	r4, [r0, #0]
 800dbb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbba:	4288      	cmp	r0, r1
 800dbbc:	d3f4      	bcc.n	800dba8 <L_shift+0xc>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <__match>:
 800dbc0:	b530      	push	{r4, r5, lr}
 800dbc2:	6803      	ldr	r3, [r0, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbca:	b914      	cbnz	r4, 800dbd2 <__match+0x12>
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	2001      	movs	r0, #1
 800dbd0:	bd30      	pop	{r4, r5, pc}
 800dbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dbda:	2d19      	cmp	r5, #25
 800dbdc:	bf98      	it	ls
 800dbde:	3220      	addls	r2, #32
 800dbe0:	42a2      	cmp	r2, r4
 800dbe2:	d0f0      	beq.n	800dbc6 <__match+0x6>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e7f3      	b.n	800dbd0 <__match+0x10>

0800dbe8 <__hexnan>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	2500      	movs	r5, #0
 800dbee:	680b      	ldr	r3, [r1, #0]
 800dbf0:	4682      	mov	sl, r0
 800dbf2:	115e      	asrs	r6, r3, #5
 800dbf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbf8:	f013 031f 	ands.w	r3, r3, #31
 800dbfc:	bf18      	it	ne
 800dbfe:	3604      	addne	r6, #4
 800dc00:	1f37      	subs	r7, r6, #4
 800dc02:	46b9      	mov	r9, r7
 800dc04:	463c      	mov	r4, r7
 800dc06:	46ab      	mov	fp, r5
 800dc08:	b087      	sub	sp, #28
 800dc0a:	4690      	mov	r8, r2
 800dc0c:	6802      	ldr	r2, [r0, #0]
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc14:	9502      	str	r5, [sp, #8]
 800dc16:	7851      	ldrb	r1, [r2, #1]
 800dc18:	1c53      	adds	r3, r2, #1
 800dc1a:	9303      	str	r3, [sp, #12]
 800dc1c:	b341      	cbz	r1, 800dc70 <__hexnan+0x88>
 800dc1e:	4608      	mov	r0, r1
 800dc20:	9205      	str	r2, [sp, #20]
 800dc22:	9104      	str	r1, [sp, #16]
 800dc24:	f7ff fd69 	bl	800d6fa <__hexdig_fun>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d14f      	bne.n	800dccc <__hexnan+0xe4>
 800dc2c:	9904      	ldr	r1, [sp, #16]
 800dc2e:	9a05      	ldr	r2, [sp, #20]
 800dc30:	2920      	cmp	r1, #32
 800dc32:	d818      	bhi.n	800dc66 <__hexnan+0x7e>
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	459b      	cmp	fp, r3
 800dc38:	dd13      	ble.n	800dc62 <__hexnan+0x7a>
 800dc3a:	454c      	cmp	r4, r9
 800dc3c:	d206      	bcs.n	800dc4c <__hexnan+0x64>
 800dc3e:	2d07      	cmp	r5, #7
 800dc40:	dc04      	bgt.n	800dc4c <__hexnan+0x64>
 800dc42:	462a      	mov	r2, r5
 800dc44:	4649      	mov	r1, r9
 800dc46:	4620      	mov	r0, r4
 800dc48:	f7ff ffa8 	bl	800db9c <L_shift>
 800dc4c:	4544      	cmp	r4, r8
 800dc4e:	d950      	bls.n	800dcf2 <__hexnan+0x10a>
 800dc50:	2300      	movs	r3, #0
 800dc52:	f1a4 0904 	sub.w	r9, r4, #4
 800dc56:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc5a:	461d      	mov	r5, r3
 800dc5c:	464c      	mov	r4, r9
 800dc5e:	f8cd b008 	str.w	fp, [sp, #8]
 800dc62:	9a03      	ldr	r2, [sp, #12]
 800dc64:	e7d7      	b.n	800dc16 <__hexnan+0x2e>
 800dc66:	2929      	cmp	r1, #41	; 0x29
 800dc68:	d156      	bne.n	800dd18 <__hexnan+0x130>
 800dc6a:	3202      	adds	r2, #2
 800dc6c:	f8ca 2000 	str.w	r2, [sl]
 800dc70:	f1bb 0f00 	cmp.w	fp, #0
 800dc74:	d050      	beq.n	800dd18 <__hexnan+0x130>
 800dc76:	454c      	cmp	r4, r9
 800dc78:	d206      	bcs.n	800dc88 <__hexnan+0xa0>
 800dc7a:	2d07      	cmp	r5, #7
 800dc7c:	dc04      	bgt.n	800dc88 <__hexnan+0xa0>
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4649      	mov	r1, r9
 800dc82:	4620      	mov	r0, r4
 800dc84:	f7ff ff8a 	bl	800db9c <L_shift>
 800dc88:	4544      	cmp	r4, r8
 800dc8a:	d934      	bls.n	800dcf6 <__hexnan+0x10e>
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	f1a8 0204 	sub.w	r2, r8, #4
 800dc92:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc96:	429f      	cmp	r7, r3
 800dc98:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc9c:	d2f9      	bcs.n	800dc92 <__hexnan+0xaa>
 800dc9e:	1b3b      	subs	r3, r7, r4
 800dca0:	f023 0303 	bic.w	r3, r3, #3
 800dca4:	3304      	adds	r3, #4
 800dca6:	3401      	adds	r4, #1
 800dca8:	3e03      	subs	r6, #3
 800dcaa:	42b4      	cmp	r4, r6
 800dcac:	bf88      	it	hi
 800dcae:	2304      	movhi	r3, #4
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4443      	add	r3, r8
 800dcb4:	f843 2b04 	str.w	r2, [r3], #4
 800dcb8:	429f      	cmp	r7, r3
 800dcba:	d2fb      	bcs.n	800dcb4 <__hexnan+0xcc>
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	b91b      	cbnz	r3, 800dcc8 <__hexnan+0xe0>
 800dcc0:	4547      	cmp	r7, r8
 800dcc2:	d127      	bne.n	800dd14 <__hexnan+0x12c>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	2005      	movs	r0, #5
 800dcca:	e026      	b.n	800dd1a <__hexnan+0x132>
 800dccc:	3501      	adds	r5, #1
 800dcce:	2d08      	cmp	r5, #8
 800dcd0:	f10b 0b01 	add.w	fp, fp, #1
 800dcd4:	dd06      	ble.n	800dce4 <__hexnan+0xfc>
 800dcd6:	4544      	cmp	r4, r8
 800dcd8:	d9c3      	bls.n	800dc62 <__hexnan+0x7a>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	2501      	movs	r5, #1
 800dcde:	f844 3c04 	str.w	r3, [r4, #-4]
 800dce2:	3c04      	subs	r4, #4
 800dce4:	6822      	ldr	r2, [r4, #0]
 800dce6:	f000 000f 	and.w	r0, r0, #15
 800dcea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	e7b7      	b.n	800dc62 <__hexnan+0x7a>
 800dcf2:	2508      	movs	r5, #8
 800dcf4:	e7b5      	b.n	800dc62 <__hexnan+0x7a>
 800dcf6:	9b01      	ldr	r3, [sp, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d0df      	beq.n	800dcbc <__hexnan+0xd4>
 800dcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800dd00:	f1c3 0320 	rsb	r3, r3, #32
 800dd04:	fa22 f303 	lsr.w	r3, r2, r3
 800dd08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dd0c:	401a      	ands	r2, r3
 800dd0e:	f846 2c04 	str.w	r2, [r6, #-4]
 800dd12:	e7d3      	b.n	800dcbc <__hexnan+0xd4>
 800dd14:	3f04      	subs	r7, #4
 800dd16:	e7d1      	b.n	800dcbc <__hexnan+0xd4>
 800dd18:	2004      	movs	r0, #4
 800dd1a:	b007      	add	sp, #28
 800dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd20 <_localeconv_r>:
 800dd20:	4800      	ldr	r0, [pc, #0]	; (800dd24 <_localeconv_r+0x4>)
 800dd22:	4770      	bx	lr
 800dd24:	20000364 	.word	0x20000364

0800dd28 <__ascii_mbtowc>:
 800dd28:	b082      	sub	sp, #8
 800dd2a:	b901      	cbnz	r1, 800dd2e <__ascii_mbtowc+0x6>
 800dd2c:	a901      	add	r1, sp, #4
 800dd2e:	b142      	cbz	r2, 800dd42 <__ascii_mbtowc+0x1a>
 800dd30:	b14b      	cbz	r3, 800dd46 <__ascii_mbtowc+0x1e>
 800dd32:	7813      	ldrb	r3, [r2, #0]
 800dd34:	600b      	str	r3, [r1, #0]
 800dd36:	7812      	ldrb	r2, [r2, #0]
 800dd38:	1e10      	subs	r0, r2, #0
 800dd3a:	bf18      	it	ne
 800dd3c:	2001      	movne	r0, #1
 800dd3e:	b002      	add	sp, #8
 800dd40:	4770      	bx	lr
 800dd42:	4610      	mov	r0, r2
 800dd44:	e7fb      	b.n	800dd3e <__ascii_mbtowc+0x16>
 800dd46:	f06f 0001 	mvn.w	r0, #1
 800dd4a:	e7f8      	b.n	800dd3e <__ascii_mbtowc+0x16>

0800dd4c <memchr>:
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	b510      	push	{r4, lr}
 800dd50:	b2c9      	uxtb	r1, r1
 800dd52:	4402      	add	r2, r0
 800dd54:	4293      	cmp	r3, r2
 800dd56:	4618      	mov	r0, r3
 800dd58:	d101      	bne.n	800dd5e <memchr+0x12>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e003      	b.n	800dd66 <memchr+0x1a>
 800dd5e:	7804      	ldrb	r4, [r0, #0]
 800dd60:	3301      	adds	r3, #1
 800dd62:	428c      	cmp	r4, r1
 800dd64:	d1f6      	bne.n	800dd54 <memchr+0x8>
 800dd66:	bd10      	pop	{r4, pc}

0800dd68 <memcpy>:
 800dd68:	440a      	add	r2, r1
 800dd6a:	4291      	cmp	r1, r2
 800dd6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd70:	d100      	bne.n	800dd74 <memcpy+0xc>
 800dd72:	4770      	bx	lr
 800dd74:	b510      	push	{r4, lr}
 800dd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7a:	4291      	cmp	r1, r2
 800dd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd80:	d1f9      	bne.n	800dd76 <memcpy+0xe>
 800dd82:	bd10      	pop	{r4, pc}

0800dd84 <__malloc_lock>:
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__malloc_lock+0x8>)
 800dd86:	f000 be8a 	b.w	800ea9e <__retarget_lock_acquire_recursive>
 800dd8a:	bf00      	nop
 800dd8c:	20001c70 	.word	0x20001c70

0800dd90 <__malloc_unlock>:
 800dd90:	4801      	ldr	r0, [pc, #4]	; (800dd98 <__malloc_unlock+0x8>)
 800dd92:	f000 be85 	b.w	800eaa0 <__retarget_lock_release_recursive>
 800dd96:	bf00      	nop
 800dd98:	20001c70 	.word	0x20001c70

0800dd9c <_Balloc>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dda0:	4604      	mov	r4, r0
 800dda2:	460d      	mov	r5, r1
 800dda4:	b976      	cbnz	r6, 800ddc4 <_Balloc+0x28>
 800dda6:	2010      	movs	r0, #16
 800dda8:	f7fc fe78 	bl	800aa9c <malloc>
 800ddac:	4602      	mov	r2, r0
 800ddae:	6260      	str	r0, [r4, #36]	; 0x24
 800ddb0:	b920      	cbnz	r0, 800ddbc <_Balloc+0x20>
 800ddb2:	2166      	movs	r1, #102	; 0x66
 800ddb4:	4b17      	ldr	r3, [pc, #92]	; (800de14 <_Balloc+0x78>)
 800ddb6:	4818      	ldr	r0, [pc, #96]	; (800de18 <_Balloc+0x7c>)
 800ddb8:	f000 fe40 	bl	800ea3c <__assert_func>
 800ddbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddc0:	6006      	str	r6, [r0, #0]
 800ddc2:	60c6      	str	r6, [r0, #12]
 800ddc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddc6:	68f3      	ldr	r3, [r6, #12]
 800ddc8:	b183      	cbz	r3, 800ddec <_Balloc+0x50>
 800ddca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddd2:	b9b8      	cbnz	r0, 800de04 <_Balloc+0x68>
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	fa01 f605 	lsl.w	r6, r1, r5
 800ddda:	1d72      	adds	r2, r6, #5
 800dddc:	4620      	mov	r0, r4
 800ddde:	0092      	lsls	r2, r2, #2
 800dde0:	f000 fc94 	bl	800e70c <_calloc_r>
 800dde4:	b160      	cbz	r0, 800de00 <_Balloc+0x64>
 800dde6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddea:	e00e      	b.n	800de0a <_Balloc+0x6e>
 800ddec:	2221      	movs	r2, #33	; 0x21
 800ddee:	2104      	movs	r1, #4
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 fc8b 	bl	800e70c <_calloc_r>
 800ddf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf8:	60f0      	str	r0, [r6, #12]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1e4      	bne.n	800ddca <_Balloc+0x2e>
 800de00:	2000      	movs	r0, #0
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	6802      	ldr	r2, [r0, #0]
 800de06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de0a:	2300      	movs	r3, #0
 800de0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de10:	e7f7      	b.n	800de02 <_Balloc+0x66>
 800de12:	bf00      	nop
 800de14:	0800fa56 	.word	0x0800fa56
 800de18:	0800fb54 	.word	0x0800fb54

0800de1c <_Bfree>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de20:	4605      	mov	r5, r0
 800de22:	460c      	mov	r4, r1
 800de24:	b976      	cbnz	r6, 800de44 <_Bfree+0x28>
 800de26:	2010      	movs	r0, #16
 800de28:	f7fc fe38 	bl	800aa9c <malloc>
 800de2c:	4602      	mov	r2, r0
 800de2e:	6268      	str	r0, [r5, #36]	; 0x24
 800de30:	b920      	cbnz	r0, 800de3c <_Bfree+0x20>
 800de32:	218a      	movs	r1, #138	; 0x8a
 800de34:	4b08      	ldr	r3, [pc, #32]	; (800de58 <_Bfree+0x3c>)
 800de36:	4809      	ldr	r0, [pc, #36]	; (800de5c <_Bfree+0x40>)
 800de38:	f000 fe00 	bl	800ea3c <__assert_func>
 800de3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de40:	6006      	str	r6, [r0, #0]
 800de42:	60c6      	str	r6, [r0, #12]
 800de44:	b13c      	cbz	r4, 800de56 <_Bfree+0x3a>
 800de46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de48:	6862      	ldr	r2, [r4, #4]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de50:	6021      	str	r1, [r4, #0]
 800de52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	0800fa56 	.word	0x0800fa56
 800de5c:	0800fb54 	.word	0x0800fb54

0800de60 <__multadd>:
 800de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de64:	4607      	mov	r7, r0
 800de66:	460c      	mov	r4, r1
 800de68:	461e      	mov	r6, r3
 800de6a:	2000      	movs	r0, #0
 800de6c:	690d      	ldr	r5, [r1, #16]
 800de6e:	f101 0c14 	add.w	ip, r1, #20
 800de72:	f8dc 3000 	ldr.w	r3, [ip]
 800de76:	3001      	adds	r0, #1
 800de78:	b299      	uxth	r1, r3
 800de7a:	fb02 6101 	mla	r1, r2, r1, r6
 800de7e:	0c1e      	lsrs	r6, r3, #16
 800de80:	0c0b      	lsrs	r3, r1, #16
 800de82:	fb02 3306 	mla	r3, r2, r6, r3
 800de86:	b289      	uxth	r1, r1
 800de88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de8c:	4285      	cmp	r5, r0
 800de8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de92:	f84c 1b04 	str.w	r1, [ip], #4
 800de96:	dcec      	bgt.n	800de72 <__multadd+0x12>
 800de98:	b30e      	cbz	r6, 800dede <__multadd+0x7e>
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	42ab      	cmp	r3, r5
 800de9e:	dc19      	bgt.n	800ded4 <__multadd+0x74>
 800dea0:	6861      	ldr	r1, [r4, #4]
 800dea2:	4638      	mov	r0, r7
 800dea4:	3101      	adds	r1, #1
 800dea6:	f7ff ff79 	bl	800dd9c <_Balloc>
 800deaa:	4680      	mov	r8, r0
 800deac:	b928      	cbnz	r0, 800deba <__multadd+0x5a>
 800deae:	4602      	mov	r2, r0
 800deb0:	21b5      	movs	r1, #181	; 0xb5
 800deb2:	4b0c      	ldr	r3, [pc, #48]	; (800dee4 <__multadd+0x84>)
 800deb4:	480c      	ldr	r0, [pc, #48]	; (800dee8 <__multadd+0x88>)
 800deb6:	f000 fdc1 	bl	800ea3c <__assert_func>
 800deba:	6922      	ldr	r2, [r4, #16]
 800debc:	f104 010c 	add.w	r1, r4, #12
 800dec0:	3202      	adds	r2, #2
 800dec2:	0092      	lsls	r2, r2, #2
 800dec4:	300c      	adds	r0, #12
 800dec6:	f7ff ff4f 	bl	800dd68 <memcpy>
 800deca:	4621      	mov	r1, r4
 800decc:	4638      	mov	r0, r7
 800dece:	f7ff ffa5 	bl	800de1c <_Bfree>
 800ded2:	4644      	mov	r4, r8
 800ded4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ded8:	3501      	adds	r5, #1
 800deda:	615e      	str	r6, [r3, #20]
 800dedc:	6125      	str	r5, [r4, #16]
 800dede:	4620      	mov	r0, r4
 800dee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee4:	0800fac8 	.word	0x0800fac8
 800dee8:	0800fb54 	.word	0x0800fb54

0800deec <__s2b>:
 800deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def0:	4615      	mov	r5, r2
 800def2:	2209      	movs	r2, #9
 800def4:	461f      	mov	r7, r3
 800def6:	3308      	adds	r3, #8
 800def8:	460c      	mov	r4, r1
 800defa:	fb93 f3f2 	sdiv	r3, r3, r2
 800defe:	4606      	mov	r6, r0
 800df00:	2201      	movs	r2, #1
 800df02:	2100      	movs	r1, #0
 800df04:	429a      	cmp	r2, r3
 800df06:	db09      	blt.n	800df1c <__s2b+0x30>
 800df08:	4630      	mov	r0, r6
 800df0a:	f7ff ff47 	bl	800dd9c <_Balloc>
 800df0e:	b940      	cbnz	r0, 800df22 <__s2b+0x36>
 800df10:	4602      	mov	r2, r0
 800df12:	21ce      	movs	r1, #206	; 0xce
 800df14:	4b18      	ldr	r3, [pc, #96]	; (800df78 <__s2b+0x8c>)
 800df16:	4819      	ldr	r0, [pc, #100]	; (800df7c <__s2b+0x90>)
 800df18:	f000 fd90 	bl	800ea3c <__assert_func>
 800df1c:	0052      	lsls	r2, r2, #1
 800df1e:	3101      	adds	r1, #1
 800df20:	e7f0      	b.n	800df04 <__s2b+0x18>
 800df22:	9b08      	ldr	r3, [sp, #32]
 800df24:	2d09      	cmp	r5, #9
 800df26:	6143      	str	r3, [r0, #20]
 800df28:	f04f 0301 	mov.w	r3, #1
 800df2c:	6103      	str	r3, [r0, #16]
 800df2e:	dd16      	ble.n	800df5e <__s2b+0x72>
 800df30:	f104 0909 	add.w	r9, r4, #9
 800df34:	46c8      	mov	r8, r9
 800df36:	442c      	add	r4, r5
 800df38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df3c:	4601      	mov	r1, r0
 800df3e:	220a      	movs	r2, #10
 800df40:	4630      	mov	r0, r6
 800df42:	3b30      	subs	r3, #48	; 0x30
 800df44:	f7ff ff8c 	bl	800de60 <__multadd>
 800df48:	45a0      	cmp	r8, r4
 800df4a:	d1f5      	bne.n	800df38 <__s2b+0x4c>
 800df4c:	f1a5 0408 	sub.w	r4, r5, #8
 800df50:	444c      	add	r4, r9
 800df52:	1b2d      	subs	r5, r5, r4
 800df54:	1963      	adds	r3, r4, r5
 800df56:	42bb      	cmp	r3, r7
 800df58:	db04      	blt.n	800df64 <__s2b+0x78>
 800df5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df5e:	2509      	movs	r5, #9
 800df60:	340a      	adds	r4, #10
 800df62:	e7f6      	b.n	800df52 <__s2b+0x66>
 800df64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df68:	4601      	mov	r1, r0
 800df6a:	220a      	movs	r2, #10
 800df6c:	4630      	mov	r0, r6
 800df6e:	3b30      	subs	r3, #48	; 0x30
 800df70:	f7ff ff76 	bl	800de60 <__multadd>
 800df74:	e7ee      	b.n	800df54 <__s2b+0x68>
 800df76:	bf00      	nop
 800df78:	0800fac8 	.word	0x0800fac8
 800df7c:	0800fb54 	.word	0x0800fb54

0800df80 <__hi0bits>:
 800df80:	0c02      	lsrs	r2, r0, #16
 800df82:	0412      	lsls	r2, r2, #16
 800df84:	4603      	mov	r3, r0
 800df86:	b9ca      	cbnz	r2, 800dfbc <__hi0bits+0x3c>
 800df88:	0403      	lsls	r3, r0, #16
 800df8a:	2010      	movs	r0, #16
 800df8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df90:	bf04      	itt	eq
 800df92:	021b      	lsleq	r3, r3, #8
 800df94:	3008      	addeq	r0, #8
 800df96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df9a:	bf04      	itt	eq
 800df9c:	011b      	lsleq	r3, r3, #4
 800df9e:	3004      	addeq	r0, #4
 800dfa0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dfa4:	bf04      	itt	eq
 800dfa6:	009b      	lsleq	r3, r3, #2
 800dfa8:	3002      	addeq	r0, #2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	db05      	blt.n	800dfba <__hi0bits+0x3a>
 800dfae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800dfb2:	f100 0001 	add.w	r0, r0, #1
 800dfb6:	bf08      	it	eq
 800dfb8:	2020      	moveq	r0, #32
 800dfba:	4770      	bx	lr
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e7e5      	b.n	800df8c <__hi0bits+0xc>

0800dfc0 <__lo0bits>:
 800dfc0:	6803      	ldr	r3, [r0, #0]
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	f013 0007 	ands.w	r0, r3, #7
 800dfc8:	d00b      	beq.n	800dfe2 <__lo0bits+0x22>
 800dfca:	07d9      	lsls	r1, r3, #31
 800dfcc:	d421      	bmi.n	800e012 <__lo0bits+0x52>
 800dfce:	0798      	lsls	r0, r3, #30
 800dfd0:	bf49      	itett	mi
 800dfd2:	085b      	lsrmi	r3, r3, #1
 800dfd4:	089b      	lsrpl	r3, r3, #2
 800dfd6:	2001      	movmi	r0, #1
 800dfd8:	6013      	strmi	r3, [r2, #0]
 800dfda:	bf5c      	itt	pl
 800dfdc:	2002      	movpl	r0, #2
 800dfde:	6013      	strpl	r3, [r2, #0]
 800dfe0:	4770      	bx	lr
 800dfe2:	b299      	uxth	r1, r3
 800dfe4:	b909      	cbnz	r1, 800dfea <__lo0bits+0x2a>
 800dfe6:	2010      	movs	r0, #16
 800dfe8:	0c1b      	lsrs	r3, r3, #16
 800dfea:	b2d9      	uxtb	r1, r3
 800dfec:	b909      	cbnz	r1, 800dff2 <__lo0bits+0x32>
 800dfee:	3008      	adds	r0, #8
 800dff0:	0a1b      	lsrs	r3, r3, #8
 800dff2:	0719      	lsls	r1, r3, #28
 800dff4:	bf04      	itt	eq
 800dff6:	091b      	lsreq	r3, r3, #4
 800dff8:	3004      	addeq	r0, #4
 800dffa:	0799      	lsls	r1, r3, #30
 800dffc:	bf04      	itt	eq
 800dffe:	089b      	lsreq	r3, r3, #2
 800e000:	3002      	addeq	r0, #2
 800e002:	07d9      	lsls	r1, r3, #31
 800e004:	d403      	bmi.n	800e00e <__lo0bits+0x4e>
 800e006:	085b      	lsrs	r3, r3, #1
 800e008:	f100 0001 	add.w	r0, r0, #1
 800e00c:	d003      	beq.n	800e016 <__lo0bits+0x56>
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	4770      	bx	lr
 800e012:	2000      	movs	r0, #0
 800e014:	4770      	bx	lr
 800e016:	2020      	movs	r0, #32
 800e018:	4770      	bx	lr
	...

0800e01c <__i2b>:
 800e01c:	b510      	push	{r4, lr}
 800e01e:	460c      	mov	r4, r1
 800e020:	2101      	movs	r1, #1
 800e022:	f7ff febb 	bl	800dd9c <_Balloc>
 800e026:	4602      	mov	r2, r0
 800e028:	b928      	cbnz	r0, 800e036 <__i2b+0x1a>
 800e02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e02e:	4b04      	ldr	r3, [pc, #16]	; (800e040 <__i2b+0x24>)
 800e030:	4804      	ldr	r0, [pc, #16]	; (800e044 <__i2b+0x28>)
 800e032:	f000 fd03 	bl	800ea3c <__assert_func>
 800e036:	2301      	movs	r3, #1
 800e038:	6144      	str	r4, [r0, #20]
 800e03a:	6103      	str	r3, [r0, #16]
 800e03c:	bd10      	pop	{r4, pc}
 800e03e:	bf00      	nop
 800e040:	0800fac8 	.word	0x0800fac8
 800e044:	0800fb54 	.word	0x0800fb54

0800e048 <__multiply>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4691      	mov	r9, r2
 800e04e:	690a      	ldr	r2, [r1, #16]
 800e050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e054:	460c      	mov	r4, r1
 800e056:	429a      	cmp	r2, r3
 800e058:	bfbe      	ittt	lt
 800e05a:	460b      	movlt	r3, r1
 800e05c:	464c      	movlt	r4, r9
 800e05e:	4699      	movlt	r9, r3
 800e060:	6927      	ldr	r7, [r4, #16]
 800e062:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e066:	68a3      	ldr	r3, [r4, #8]
 800e068:	6861      	ldr	r1, [r4, #4]
 800e06a:	eb07 060a 	add.w	r6, r7, sl
 800e06e:	42b3      	cmp	r3, r6
 800e070:	b085      	sub	sp, #20
 800e072:	bfb8      	it	lt
 800e074:	3101      	addlt	r1, #1
 800e076:	f7ff fe91 	bl	800dd9c <_Balloc>
 800e07a:	b930      	cbnz	r0, 800e08a <__multiply+0x42>
 800e07c:	4602      	mov	r2, r0
 800e07e:	f240 115d 	movw	r1, #349	; 0x15d
 800e082:	4b43      	ldr	r3, [pc, #268]	; (800e190 <__multiply+0x148>)
 800e084:	4843      	ldr	r0, [pc, #268]	; (800e194 <__multiply+0x14c>)
 800e086:	f000 fcd9 	bl	800ea3c <__assert_func>
 800e08a:	f100 0514 	add.w	r5, r0, #20
 800e08e:	462b      	mov	r3, r5
 800e090:	2200      	movs	r2, #0
 800e092:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e096:	4543      	cmp	r3, r8
 800e098:	d321      	bcc.n	800e0de <__multiply+0x96>
 800e09a:	f104 0314 	add.w	r3, r4, #20
 800e09e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e0a2:	f109 0314 	add.w	r3, r9, #20
 800e0a6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e0aa:	9202      	str	r2, [sp, #8]
 800e0ac:	1b3a      	subs	r2, r7, r4
 800e0ae:	3a15      	subs	r2, #21
 800e0b0:	f022 0203 	bic.w	r2, r2, #3
 800e0b4:	3204      	adds	r2, #4
 800e0b6:	f104 0115 	add.w	r1, r4, #21
 800e0ba:	428f      	cmp	r7, r1
 800e0bc:	bf38      	it	cc
 800e0be:	2204      	movcc	r2, #4
 800e0c0:	9201      	str	r2, [sp, #4]
 800e0c2:	9a02      	ldr	r2, [sp, #8]
 800e0c4:	9303      	str	r3, [sp, #12]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d80c      	bhi.n	800e0e4 <__multiply+0x9c>
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	dd03      	ble.n	800e0d6 <__multiply+0x8e>
 800e0ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d059      	beq.n	800e18a <__multiply+0x142>
 800e0d6:	6106      	str	r6, [r0, #16]
 800e0d8:	b005      	add	sp, #20
 800e0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0de:	f843 2b04 	str.w	r2, [r3], #4
 800e0e2:	e7d8      	b.n	800e096 <__multiply+0x4e>
 800e0e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800e0e8:	f1ba 0f00 	cmp.w	sl, #0
 800e0ec:	d023      	beq.n	800e136 <__multiply+0xee>
 800e0ee:	46a9      	mov	r9, r5
 800e0f0:	f04f 0c00 	mov.w	ip, #0
 800e0f4:	f104 0e14 	add.w	lr, r4, #20
 800e0f8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e0fc:	f8d9 1000 	ldr.w	r1, [r9]
 800e100:	fa1f fb82 	uxth.w	fp, r2
 800e104:	b289      	uxth	r1, r1
 800e106:	fb0a 110b 	mla	r1, sl, fp, r1
 800e10a:	4461      	add	r1, ip
 800e10c:	f8d9 c000 	ldr.w	ip, [r9]
 800e110:	0c12      	lsrs	r2, r2, #16
 800e112:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e116:	fb0a c202 	mla	r2, sl, r2, ip
 800e11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e11e:	b289      	uxth	r1, r1
 800e120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e124:	4577      	cmp	r7, lr
 800e126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e12a:	f849 1b04 	str.w	r1, [r9], #4
 800e12e:	d8e3      	bhi.n	800e0f8 <__multiply+0xb0>
 800e130:	9a01      	ldr	r2, [sp, #4]
 800e132:	f845 c002 	str.w	ip, [r5, r2]
 800e136:	9a03      	ldr	r2, [sp, #12]
 800e138:	3304      	adds	r3, #4
 800e13a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e13e:	f1b9 0f00 	cmp.w	r9, #0
 800e142:	d020      	beq.n	800e186 <__multiply+0x13e>
 800e144:	46ae      	mov	lr, r5
 800e146:	f04f 0a00 	mov.w	sl, #0
 800e14a:	6829      	ldr	r1, [r5, #0]
 800e14c:	f104 0c14 	add.w	ip, r4, #20
 800e150:	f8bc b000 	ldrh.w	fp, [ip]
 800e154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e158:	b289      	uxth	r1, r1
 800e15a:	fb09 220b 	mla	r2, r9, fp, r2
 800e15e:	4492      	add	sl, r2
 800e160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e164:	f84e 1b04 	str.w	r1, [lr], #4
 800e168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e16c:	f8be 1000 	ldrh.w	r1, [lr]
 800e170:	0c12      	lsrs	r2, r2, #16
 800e172:	fb09 1102 	mla	r1, r9, r2, r1
 800e176:	4567      	cmp	r7, ip
 800e178:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e180:	d8e6      	bhi.n	800e150 <__multiply+0x108>
 800e182:	9a01      	ldr	r2, [sp, #4]
 800e184:	50a9      	str	r1, [r5, r2]
 800e186:	3504      	adds	r5, #4
 800e188:	e79b      	b.n	800e0c2 <__multiply+0x7a>
 800e18a:	3e01      	subs	r6, #1
 800e18c:	e79d      	b.n	800e0ca <__multiply+0x82>
 800e18e:	bf00      	nop
 800e190:	0800fac8 	.word	0x0800fac8
 800e194:	0800fb54 	.word	0x0800fb54

0800e198 <__pow5mult>:
 800e198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	4615      	mov	r5, r2
 800e19e:	f012 0203 	ands.w	r2, r2, #3
 800e1a2:	4606      	mov	r6, r0
 800e1a4:	460f      	mov	r7, r1
 800e1a6:	d007      	beq.n	800e1b8 <__pow5mult+0x20>
 800e1a8:	4c25      	ldr	r4, [pc, #148]	; (800e240 <__pow5mult+0xa8>)
 800e1aa:	3a01      	subs	r2, #1
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1b2:	f7ff fe55 	bl	800de60 <__multadd>
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	10ad      	asrs	r5, r5, #2
 800e1ba:	d03d      	beq.n	800e238 <__pow5mult+0xa0>
 800e1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e1be:	b97c      	cbnz	r4, 800e1e0 <__pow5mult+0x48>
 800e1c0:	2010      	movs	r0, #16
 800e1c2:	f7fc fc6b 	bl	800aa9c <malloc>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800e1ca:	b928      	cbnz	r0, 800e1d8 <__pow5mult+0x40>
 800e1cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e1d0:	4b1c      	ldr	r3, [pc, #112]	; (800e244 <__pow5mult+0xac>)
 800e1d2:	481d      	ldr	r0, [pc, #116]	; (800e248 <__pow5mult+0xb0>)
 800e1d4:	f000 fc32 	bl	800ea3c <__assert_func>
 800e1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1dc:	6004      	str	r4, [r0, #0]
 800e1de:	60c4      	str	r4, [r0, #12]
 800e1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1e8:	b94c      	cbnz	r4, 800e1fe <__pow5mult+0x66>
 800e1ea:	f240 2171 	movw	r1, #625	; 0x271
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	f7ff ff14 	bl	800e01c <__i2b>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1fc:	6003      	str	r3, [r0, #0]
 800e1fe:	f04f 0900 	mov.w	r9, #0
 800e202:	07eb      	lsls	r3, r5, #31
 800e204:	d50a      	bpl.n	800e21c <__pow5mult+0x84>
 800e206:	4639      	mov	r1, r7
 800e208:	4622      	mov	r2, r4
 800e20a:	4630      	mov	r0, r6
 800e20c:	f7ff ff1c 	bl	800e048 <__multiply>
 800e210:	4680      	mov	r8, r0
 800e212:	4639      	mov	r1, r7
 800e214:	4630      	mov	r0, r6
 800e216:	f7ff fe01 	bl	800de1c <_Bfree>
 800e21a:	4647      	mov	r7, r8
 800e21c:	106d      	asrs	r5, r5, #1
 800e21e:	d00b      	beq.n	800e238 <__pow5mult+0xa0>
 800e220:	6820      	ldr	r0, [r4, #0]
 800e222:	b938      	cbnz	r0, 800e234 <__pow5mult+0x9c>
 800e224:	4622      	mov	r2, r4
 800e226:	4621      	mov	r1, r4
 800e228:	4630      	mov	r0, r6
 800e22a:	f7ff ff0d 	bl	800e048 <__multiply>
 800e22e:	6020      	str	r0, [r4, #0]
 800e230:	f8c0 9000 	str.w	r9, [r0]
 800e234:	4604      	mov	r4, r0
 800e236:	e7e4      	b.n	800e202 <__pow5mult+0x6a>
 800e238:	4638      	mov	r0, r7
 800e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23e:	bf00      	nop
 800e240:	0800fca0 	.word	0x0800fca0
 800e244:	0800fa56 	.word	0x0800fa56
 800e248:	0800fb54 	.word	0x0800fb54

0800e24c <__lshift>:
 800e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	460c      	mov	r4, r1
 800e252:	4607      	mov	r7, r0
 800e254:	4691      	mov	r9, r2
 800e256:	6923      	ldr	r3, [r4, #16]
 800e258:	6849      	ldr	r1, [r1, #4]
 800e25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e264:	f108 0601 	add.w	r6, r8, #1
 800e268:	42b3      	cmp	r3, r6
 800e26a:	db0b      	blt.n	800e284 <__lshift+0x38>
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7ff fd95 	bl	800dd9c <_Balloc>
 800e272:	4605      	mov	r5, r0
 800e274:	b948      	cbnz	r0, 800e28a <__lshift+0x3e>
 800e276:	4602      	mov	r2, r0
 800e278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e27c:	4b29      	ldr	r3, [pc, #164]	; (800e324 <__lshift+0xd8>)
 800e27e:	482a      	ldr	r0, [pc, #168]	; (800e328 <__lshift+0xdc>)
 800e280:	f000 fbdc 	bl	800ea3c <__assert_func>
 800e284:	3101      	adds	r1, #1
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	e7ee      	b.n	800e268 <__lshift+0x1c>
 800e28a:	2300      	movs	r3, #0
 800e28c:	f100 0114 	add.w	r1, r0, #20
 800e290:	f100 0210 	add.w	r2, r0, #16
 800e294:	4618      	mov	r0, r3
 800e296:	4553      	cmp	r3, sl
 800e298:	db37      	blt.n	800e30a <__lshift+0xbe>
 800e29a:	6920      	ldr	r0, [r4, #16]
 800e29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2a0:	f104 0314 	add.w	r3, r4, #20
 800e2a4:	f019 091f 	ands.w	r9, r9, #31
 800e2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e2b0:	d02f      	beq.n	800e312 <__lshift+0xc6>
 800e2b2:	468a      	mov	sl, r1
 800e2b4:	f04f 0c00 	mov.w	ip, #0
 800e2b8:	f1c9 0e20 	rsb	lr, r9, #32
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	fa02 f209 	lsl.w	r2, r2, r9
 800e2c2:	ea42 020c 	orr.w	r2, r2, ip
 800e2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800e2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ce:	4298      	cmp	r0, r3
 800e2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e2d4:	d8f2      	bhi.n	800e2bc <__lshift+0x70>
 800e2d6:	1b03      	subs	r3, r0, r4
 800e2d8:	3b15      	subs	r3, #21
 800e2da:	f023 0303 	bic.w	r3, r3, #3
 800e2de:	3304      	adds	r3, #4
 800e2e0:	f104 0215 	add.w	r2, r4, #21
 800e2e4:	4290      	cmp	r0, r2
 800e2e6:	bf38      	it	cc
 800e2e8:	2304      	movcc	r3, #4
 800e2ea:	f841 c003 	str.w	ip, [r1, r3]
 800e2ee:	f1bc 0f00 	cmp.w	ip, #0
 800e2f2:	d001      	beq.n	800e2f8 <__lshift+0xac>
 800e2f4:	f108 0602 	add.w	r6, r8, #2
 800e2f8:	3e01      	subs	r6, #1
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	612e      	str	r6, [r5, #16]
 800e300:	f7ff fd8c 	bl	800de1c <_Bfree>
 800e304:	4628      	mov	r0, r5
 800e306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e30a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e30e:	3301      	adds	r3, #1
 800e310:	e7c1      	b.n	800e296 <__lshift+0x4a>
 800e312:	3904      	subs	r1, #4
 800e314:	f853 2b04 	ldr.w	r2, [r3], #4
 800e318:	4298      	cmp	r0, r3
 800e31a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e31e:	d8f9      	bhi.n	800e314 <__lshift+0xc8>
 800e320:	e7ea      	b.n	800e2f8 <__lshift+0xac>
 800e322:	bf00      	nop
 800e324:	0800fac8 	.word	0x0800fac8
 800e328:	0800fb54 	.word	0x0800fb54

0800e32c <__mcmp>:
 800e32c:	4603      	mov	r3, r0
 800e32e:	690a      	ldr	r2, [r1, #16]
 800e330:	6900      	ldr	r0, [r0, #16]
 800e332:	b530      	push	{r4, r5, lr}
 800e334:	1a80      	subs	r0, r0, r2
 800e336:	d10d      	bne.n	800e354 <__mcmp+0x28>
 800e338:	3314      	adds	r3, #20
 800e33a:	3114      	adds	r1, #20
 800e33c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e34c:	4295      	cmp	r5, r2
 800e34e:	d002      	beq.n	800e356 <__mcmp+0x2a>
 800e350:	d304      	bcc.n	800e35c <__mcmp+0x30>
 800e352:	2001      	movs	r0, #1
 800e354:	bd30      	pop	{r4, r5, pc}
 800e356:	42a3      	cmp	r3, r4
 800e358:	d3f4      	bcc.n	800e344 <__mcmp+0x18>
 800e35a:	e7fb      	b.n	800e354 <__mcmp+0x28>
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295
 800e360:	e7f8      	b.n	800e354 <__mcmp+0x28>
	...

0800e364 <__mdiff>:
 800e364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	460d      	mov	r5, r1
 800e36a:	4607      	mov	r7, r0
 800e36c:	4611      	mov	r1, r2
 800e36e:	4628      	mov	r0, r5
 800e370:	4614      	mov	r4, r2
 800e372:	f7ff ffdb 	bl	800e32c <__mcmp>
 800e376:	1e06      	subs	r6, r0, #0
 800e378:	d111      	bne.n	800e39e <__mdiff+0x3a>
 800e37a:	4631      	mov	r1, r6
 800e37c:	4638      	mov	r0, r7
 800e37e:	f7ff fd0d 	bl	800dd9c <_Balloc>
 800e382:	4602      	mov	r2, r0
 800e384:	b928      	cbnz	r0, 800e392 <__mdiff+0x2e>
 800e386:	f240 2132 	movw	r1, #562	; 0x232
 800e38a:	4b3a      	ldr	r3, [pc, #232]	; (800e474 <__mdiff+0x110>)
 800e38c:	483a      	ldr	r0, [pc, #232]	; (800e478 <__mdiff+0x114>)
 800e38e:	f000 fb55 	bl	800ea3c <__assert_func>
 800e392:	2301      	movs	r3, #1
 800e394:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e398:	4610      	mov	r0, r2
 800e39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	bfa4      	itt	ge
 800e3a0:	4623      	movge	r3, r4
 800e3a2:	462c      	movge	r4, r5
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	6861      	ldr	r1, [r4, #4]
 800e3a8:	bfa6      	itte	ge
 800e3aa:	461d      	movge	r5, r3
 800e3ac:	2600      	movge	r6, #0
 800e3ae:	2601      	movlt	r6, #1
 800e3b0:	f7ff fcf4 	bl	800dd9c <_Balloc>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	b918      	cbnz	r0, 800e3c0 <__mdiff+0x5c>
 800e3b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e3bc:	4b2d      	ldr	r3, [pc, #180]	; (800e474 <__mdiff+0x110>)
 800e3be:	e7e5      	b.n	800e38c <__mdiff+0x28>
 800e3c0:	f102 0814 	add.w	r8, r2, #20
 800e3c4:	46c2      	mov	sl, r8
 800e3c6:	f04f 0c00 	mov.w	ip, #0
 800e3ca:	6927      	ldr	r7, [r4, #16]
 800e3cc:	60c6      	str	r6, [r0, #12]
 800e3ce:	692e      	ldr	r6, [r5, #16]
 800e3d0:	f104 0014 	add.w	r0, r4, #20
 800e3d4:	f105 0914 	add.w	r9, r5, #20
 800e3d8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e3dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e3e0:	3410      	adds	r4, #16
 800e3e2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e3e6:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3ea:	fa1f f18b 	uxth.w	r1, fp
 800e3ee:	448c      	add	ip, r1
 800e3f0:	b299      	uxth	r1, r3
 800e3f2:	0c1b      	lsrs	r3, r3, #16
 800e3f4:	ebac 0101 	sub.w	r1, ip, r1
 800e3f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e3fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e400:	b289      	uxth	r1, r1
 800e402:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e406:	454e      	cmp	r6, r9
 800e408:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e40c:	f84a 3b04 	str.w	r3, [sl], #4
 800e410:	d8e7      	bhi.n	800e3e2 <__mdiff+0x7e>
 800e412:	1b73      	subs	r3, r6, r5
 800e414:	3b15      	subs	r3, #21
 800e416:	f023 0303 	bic.w	r3, r3, #3
 800e41a:	3515      	adds	r5, #21
 800e41c:	3304      	adds	r3, #4
 800e41e:	42ae      	cmp	r6, r5
 800e420:	bf38      	it	cc
 800e422:	2304      	movcc	r3, #4
 800e424:	4418      	add	r0, r3
 800e426:	4443      	add	r3, r8
 800e428:	461e      	mov	r6, r3
 800e42a:	4605      	mov	r5, r0
 800e42c:	4575      	cmp	r5, lr
 800e42e:	d30e      	bcc.n	800e44e <__mdiff+0xea>
 800e430:	f10e 0103 	add.w	r1, lr, #3
 800e434:	1a09      	subs	r1, r1, r0
 800e436:	f021 0103 	bic.w	r1, r1, #3
 800e43a:	3803      	subs	r0, #3
 800e43c:	4586      	cmp	lr, r0
 800e43e:	bf38      	it	cc
 800e440:	2100      	movcc	r1, #0
 800e442:	4419      	add	r1, r3
 800e444:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e448:	b18b      	cbz	r3, 800e46e <__mdiff+0x10a>
 800e44a:	6117      	str	r7, [r2, #16]
 800e44c:	e7a4      	b.n	800e398 <__mdiff+0x34>
 800e44e:	f855 8b04 	ldr.w	r8, [r5], #4
 800e452:	fa1f f188 	uxth.w	r1, r8
 800e456:	4461      	add	r1, ip
 800e458:	140c      	asrs	r4, r1, #16
 800e45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e45e:	b289      	uxth	r1, r1
 800e460:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e464:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e468:	f846 1b04 	str.w	r1, [r6], #4
 800e46c:	e7de      	b.n	800e42c <__mdiff+0xc8>
 800e46e:	3f01      	subs	r7, #1
 800e470:	e7e8      	b.n	800e444 <__mdiff+0xe0>
 800e472:	bf00      	nop
 800e474:	0800fac8 	.word	0x0800fac8
 800e478:	0800fb54 	.word	0x0800fb54

0800e47c <__ulp>:
 800e47c:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <__ulp+0x48>)
 800e47e:	400b      	ands	r3, r1
 800e480:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e484:	2b00      	cmp	r3, #0
 800e486:	dd02      	ble.n	800e48e <__ulp+0x12>
 800e488:	2000      	movs	r0, #0
 800e48a:	4619      	mov	r1, r3
 800e48c:	4770      	bx	lr
 800e48e:	425b      	negs	r3, r3
 800e490:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e494:	f04f 0000 	mov.w	r0, #0
 800e498:	f04f 0100 	mov.w	r1, #0
 800e49c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4a0:	da04      	bge.n	800e4ac <__ulp+0x30>
 800e4a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e4a6:	fa43 f102 	asr.w	r1, r3, r2
 800e4aa:	4770      	bx	lr
 800e4ac:	f1a2 0314 	sub.w	r3, r2, #20
 800e4b0:	2b1e      	cmp	r3, #30
 800e4b2:	bfd6      	itet	le
 800e4b4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e4b8:	2301      	movgt	r3, #1
 800e4ba:	fa22 f303 	lsrle.w	r3, r2, r3
 800e4be:	4618      	mov	r0, r3
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	7ff00000 	.word	0x7ff00000

0800e4c8 <__b2d>:
 800e4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4cc:	6907      	ldr	r7, [r0, #16]
 800e4ce:	f100 0914 	add.w	r9, r0, #20
 800e4d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800e4d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800e4da:	f1a7 0804 	sub.w	r8, r7, #4
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7ff fd4e 	bl	800df80 <__hi0bits>
 800e4e4:	f1c0 0320 	rsb	r3, r0, #32
 800e4e8:	280a      	cmp	r0, #10
 800e4ea:	600b      	str	r3, [r1, #0]
 800e4ec:	491f      	ldr	r1, [pc, #124]	; (800e56c <__b2d+0xa4>)
 800e4ee:	dc17      	bgt.n	800e520 <__b2d+0x58>
 800e4f0:	45c1      	cmp	r9, r8
 800e4f2:	bf28      	it	cs
 800e4f4:	2200      	movcs	r2, #0
 800e4f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e4fa:	fa26 f30c 	lsr.w	r3, r6, ip
 800e4fe:	bf38      	it	cc
 800e500:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e504:	ea43 0501 	orr.w	r5, r3, r1
 800e508:	f100 0315 	add.w	r3, r0, #21
 800e50c:	fa06 f303 	lsl.w	r3, r6, r3
 800e510:	fa22 f20c 	lsr.w	r2, r2, ip
 800e514:	ea43 0402 	orr.w	r4, r3, r2
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e520:	45c1      	cmp	r9, r8
 800e522:	bf2e      	itee	cs
 800e524:	2200      	movcs	r2, #0
 800e526:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e52a:	f1a7 0808 	subcc.w	r8, r7, #8
 800e52e:	f1b0 030b 	subs.w	r3, r0, #11
 800e532:	d016      	beq.n	800e562 <__b2d+0x9a>
 800e534:	f1c3 0720 	rsb	r7, r3, #32
 800e538:	fa22 f107 	lsr.w	r1, r2, r7
 800e53c:	45c8      	cmp	r8, r9
 800e53e:	fa06 f603 	lsl.w	r6, r6, r3
 800e542:	ea46 0601 	orr.w	r6, r6, r1
 800e546:	bf94      	ite	ls
 800e548:	2100      	movls	r1, #0
 800e54a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800e54e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800e552:	fa02 f003 	lsl.w	r0, r2, r3
 800e556:	40f9      	lsrs	r1, r7
 800e558:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e55c:	ea40 0401 	orr.w	r4, r0, r1
 800e560:	e7da      	b.n	800e518 <__b2d+0x50>
 800e562:	4614      	mov	r4, r2
 800e564:	ea46 0501 	orr.w	r5, r6, r1
 800e568:	e7d6      	b.n	800e518 <__b2d+0x50>
 800e56a:	bf00      	nop
 800e56c:	3ff00000 	.word	0x3ff00000

0800e570 <__d2b>:
 800e570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e574:	2101      	movs	r1, #1
 800e576:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e57a:	4690      	mov	r8, r2
 800e57c:	461d      	mov	r5, r3
 800e57e:	f7ff fc0d 	bl	800dd9c <_Balloc>
 800e582:	4604      	mov	r4, r0
 800e584:	b930      	cbnz	r0, 800e594 <__d2b+0x24>
 800e586:	4602      	mov	r2, r0
 800e588:	f240 310a 	movw	r1, #778	; 0x30a
 800e58c:	4b24      	ldr	r3, [pc, #144]	; (800e620 <__d2b+0xb0>)
 800e58e:	4825      	ldr	r0, [pc, #148]	; (800e624 <__d2b+0xb4>)
 800e590:	f000 fa54 	bl	800ea3c <__assert_func>
 800e594:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e598:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e59c:	bb2d      	cbnz	r5, 800e5ea <__d2b+0x7a>
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	f1b8 0300 	subs.w	r3, r8, #0
 800e5a4:	d026      	beq.n	800e5f4 <__d2b+0x84>
 800e5a6:	4668      	mov	r0, sp
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	f7ff fd09 	bl	800dfc0 <__lo0bits>
 800e5ae:	9900      	ldr	r1, [sp, #0]
 800e5b0:	b1f0      	cbz	r0, 800e5f0 <__d2b+0x80>
 800e5b2:	9a01      	ldr	r2, [sp, #4]
 800e5b4:	f1c0 0320 	rsb	r3, r0, #32
 800e5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e5bc:	430b      	orrs	r3, r1
 800e5be:	40c2      	lsrs	r2, r0
 800e5c0:	6163      	str	r3, [r4, #20]
 800e5c2:	9201      	str	r2, [sp, #4]
 800e5c4:	9b01      	ldr	r3, [sp, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bf14      	ite	ne
 800e5ca:	2102      	movne	r1, #2
 800e5cc:	2101      	moveq	r1, #1
 800e5ce:	61a3      	str	r3, [r4, #24]
 800e5d0:	6121      	str	r1, [r4, #16]
 800e5d2:	b1c5      	cbz	r5, 800e606 <__d2b+0x96>
 800e5d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e5d8:	4405      	add	r5, r0
 800e5da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e5de:	603d      	str	r5, [r7, #0]
 800e5e0:	6030      	str	r0, [r6, #0]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	b002      	add	sp, #8
 800e5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5ee:	e7d6      	b.n	800e59e <__d2b+0x2e>
 800e5f0:	6161      	str	r1, [r4, #20]
 800e5f2:	e7e7      	b.n	800e5c4 <__d2b+0x54>
 800e5f4:	a801      	add	r0, sp, #4
 800e5f6:	f7ff fce3 	bl	800dfc0 <__lo0bits>
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	9b01      	ldr	r3, [sp, #4]
 800e5fe:	6121      	str	r1, [r4, #16]
 800e600:	6163      	str	r3, [r4, #20]
 800e602:	3020      	adds	r0, #32
 800e604:	e7e5      	b.n	800e5d2 <__d2b+0x62>
 800e606:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e60a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e60e:	6038      	str	r0, [r7, #0]
 800e610:	6918      	ldr	r0, [r3, #16]
 800e612:	f7ff fcb5 	bl	800df80 <__hi0bits>
 800e616:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e61a:	6031      	str	r1, [r6, #0]
 800e61c:	e7e1      	b.n	800e5e2 <__d2b+0x72>
 800e61e:	bf00      	nop
 800e620:	0800fac8 	.word	0x0800fac8
 800e624:	0800fb54 	.word	0x0800fb54

0800e628 <__ratio>:
 800e628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	4688      	mov	r8, r1
 800e62e:	4669      	mov	r1, sp
 800e630:	4681      	mov	r9, r0
 800e632:	f7ff ff49 	bl	800e4c8 <__b2d>
 800e636:	460f      	mov	r7, r1
 800e638:	4604      	mov	r4, r0
 800e63a:	460d      	mov	r5, r1
 800e63c:	4640      	mov	r0, r8
 800e63e:	a901      	add	r1, sp, #4
 800e640:	f7ff ff42 	bl	800e4c8 <__b2d>
 800e644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e648:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e64c:	468b      	mov	fp, r1
 800e64e:	eba3 0c02 	sub.w	ip, r3, r2
 800e652:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e656:	1a9b      	subs	r3, r3, r2
 800e658:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	bfd5      	itete	le
 800e660:	460a      	movle	r2, r1
 800e662:	462a      	movgt	r2, r5
 800e664:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e668:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e66c:	bfd8      	it	le
 800e66e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e672:	465b      	mov	r3, fp
 800e674:	4602      	mov	r2, r0
 800e676:	4639      	mov	r1, r7
 800e678:	4620      	mov	r0, r4
 800e67a:	f7f2 f89d 	bl	80007b8 <__aeabi_ddiv>
 800e67e:	b003      	add	sp, #12
 800e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e684 <__copybits>:
 800e684:	3901      	subs	r1, #1
 800e686:	b570      	push	{r4, r5, r6, lr}
 800e688:	1149      	asrs	r1, r1, #5
 800e68a:	6914      	ldr	r4, [r2, #16]
 800e68c:	3101      	adds	r1, #1
 800e68e:	f102 0314 	add.w	r3, r2, #20
 800e692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e69a:	1f05      	subs	r5, r0, #4
 800e69c:	42a3      	cmp	r3, r4
 800e69e:	d30c      	bcc.n	800e6ba <__copybits+0x36>
 800e6a0:	1aa3      	subs	r3, r4, r2
 800e6a2:	3b11      	subs	r3, #17
 800e6a4:	f023 0303 	bic.w	r3, r3, #3
 800e6a8:	3211      	adds	r2, #17
 800e6aa:	42a2      	cmp	r2, r4
 800e6ac:	bf88      	it	hi
 800e6ae:	2300      	movhi	r3, #0
 800e6b0:	4418      	add	r0, r3
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	4288      	cmp	r0, r1
 800e6b6:	d305      	bcc.n	800e6c4 <__copybits+0x40>
 800e6b8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6be:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6c2:	e7eb      	b.n	800e69c <__copybits+0x18>
 800e6c4:	f840 3b04 	str.w	r3, [r0], #4
 800e6c8:	e7f4      	b.n	800e6b4 <__copybits+0x30>

0800e6ca <__any_on>:
 800e6ca:	f100 0214 	add.w	r2, r0, #20
 800e6ce:	6900      	ldr	r0, [r0, #16]
 800e6d0:	114b      	asrs	r3, r1, #5
 800e6d2:	4298      	cmp	r0, r3
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	db11      	blt.n	800e6fc <__any_on+0x32>
 800e6d8:	dd0a      	ble.n	800e6f0 <__any_on+0x26>
 800e6da:	f011 011f 	ands.w	r1, r1, #31
 800e6de:	d007      	beq.n	800e6f0 <__any_on+0x26>
 800e6e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6e4:	fa24 f001 	lsr.w	r0, r4, r1
 800e6e8:	fa00 f101 	lsl.w	r1, r0, r1
 800e6ec:	428c      	cmp	r4, r1
 800e6ee:	d10b      	bne.n	800e708 <__any_on+0x3e>
 800e6f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d803      	bhi.n	800e700 <__any_on+0x36>
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	bd10      	pop	{r4, pc}
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	e7f7      	b.n	800e6f0 <__any_on+0x26>
 800e700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e704:	2900      	cmp	r1, #0
 800e706:	d0f5      	beq.n	800e6f4 <__any_on+0x2a>
 800e708:	2001      	movs	r0, #1
 800e70a:	e7f6      	b.n	800e6fa <__any_on+0x30>

0800e70c <_calloc_r>:
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	fba1 5402 	umull	r5, r4, r1, r2
 800e712:	b934      	cbnz	r4, 800e722 <_calloc_r+0x16>
 800e714:	4629      	mov	r1, r5
 800e716:	f7fc fa41 	bl	800ab9c <_malloc_r>
 800e71a:	4606      	mov	r6, r0
 800e71c:	b928      	cbnz	r0, 800e72a <_calloc_r+0x1e>
 800e71e:	4630      	mov	r0, r6
 800e720:	bd70      	pop	{r4, r5, r6, pc}
 800e722:	220c      	movs	r2, #12
 800e724:	2600      	movs	r6, #0
 800e726:	6002      	str	r2, [r0, #0]
 800e728:	e7f9      	b.n	800e71e <_calloc_r+0x12>
 800e72a:	462a      	mov	r2, r5
 800e72c:	4621      	mov	r1, r4
 800e72e:	f7fc f9c5 	bl	800aabc <memset>
 800e732:	e7f4      	b.n	800e71e <_calloc_r+0x12>

0800e734 <__ssputs_r>:
 800e734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e738:	688e      	ldr	r6, [r1, #8]
 800e73a:	4682      	mov	sl, r0
 800e73c:	429e      	cmp	r6, r3
 800e73e:	460c      	mov	r4, r1
 800e740:	4690      	mov	r8, r2
 800e742:	461f      	mov	r7, r3
 800e744:	d838      	bhi.n	800e7b8 <__ssputs_r+0x84>
 800e746:	898a      	ldrh	r2, [r1, #12]
 800e748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e74c:	d032      	beq.n	800e7b4 <__ssputs_r+0x80>
 800e74e:	6825      	ldr	r5, [r4, #0]
 800e750:	6909      	ldr	r1, [r1, #16]
 800e752:	3301      	adds	r3, #1
 800e754:	eba5 0901 	sub.w	r9, r5, r1
 800e758:	6965      	ldr	r5, [r4, #20]
 800e75a:	444b      	add	r3, r9
 800e75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e764:	106d      	asrs	r5, r5, #1
 800e766:	429d      	cmp	r5, r3
 800e768:	bf38      	it	cc
 800e76a:	461d      	movcc	r5, r3
 800e76c:	0553      	lsls	r3, r2, #21
 800e76e:	d531      	bpl.n	800e7d4 <__ssputs_r+0xa0>
 800e770:	4629      	mov	r1, r5
 800e772:	f7fc fa13 	bl	800ab9c <_malloc_r>
 800e776:	4606      	mov	r6, r0
 800e778:	b950      	cbnz	r0, 800e790 <__ssputs_r+0x5c>
 800e77a:	230c      	movs	r3, #12
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	f8ca 3000 	str.w	r3, [sl]
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e790:	464a      	mov	r2, r9
 800e792:	6921      	ldr	r1, [r4, #16]
 800e794:	f7ff fae8 	bl	800dd68 <memcpy>
 800e798:	89a3      	ldrh	r3, [r4, #12]
 800e79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7a2:	81a3      	strh	r3, [r4, #12]
 800e7a4:	6126      	str	r6, [r4, #16]
 800e7a6:	444e      	add	r6, r9
 800e7a8:	6026      	str	r6, [r4, #0]
 800e7aa:	463e      	mov	r6, r7
 800e7ac:	6165      	str	r5, [r4, #20]
 800e7ae:	eba5 0509 	sub.w	r5, r5, r9
 800e7b2:	60a5      	str	r5, [r4, #8]
 800e7b4:	42be      	cmp	r6, r7
 800e7b6:	d900      	bls.n	800e7ba <__ssputs_r+0x86>
 800e7b8:	463e      	mov	r6, r7
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	4641      	mov	r1, r8
 800e7be:	6820      	ldr	r0, [r4, #0]
 800e7c0:	f000 f96f 	bl	800eaa2 <memmove>
 800e7c4:	68a3      	ldr	r3, [r4, #8]
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	1b9b      	subs	r3, r3, r6
 800e7ca:	60a3      	str	r3, [r4, #8]
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	4433      	add	r3, r6
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	e7db      	b.n	800e78c <__ssputs_r+0x58>
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	f000 f97e 	bl	800ead6 <_realloc_r>
 800e7da:	4606      	mov	r6, r0
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d1e1      	bne.n	800e7a4 <__ssputs_r+0x70>
 800e7e0:	4650      	mov	r0, sl
 800e7e2:	6921      	ldr	r1, [r4, #16]
 800e7e4:	f7fc f972 	bl	800aacc <_free_r>
 800e7e8:	e7c7      	b.n	800e77a <__ssputs_r+0x46>
	...

0800e7ec <_svfiprintf_r>:
 800e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	4698      	mov	r8, r3
 800e7f2:	898b      	ldrh	r3, [r1, #12]
 800e7f4:	4607      	mov	r7, r0
 800e7f6:	061b      	lsls	r3, r3, #24
 800e7f8:	460d      	mov	r5, r1
 800e7fa:	4614      	mov	r4, r2
 800e7fc:	b09d      	sub	sp, #116	; 0x74
 800e7fe:	d50e      	bpl.n	800e81e <_svfiprintf_r+0x32>
 800e800:	690b      	ldr	r3, [r1, #16]
 800e802:	b963      	cbnz	r3, 800e81e <_svfiprintf_r+0x32>
 800e804:	2140      	movs	r1, #64	; 0x40
 800e806:	f7fc f9c9 	bl	800ab9c <_malloc_r>
 800e80a:	6028      	str	r0, [r5, #0]
 800e80c:	6128      	str	r0, [r5, #16]
 800e80e:	b920      	cbnz	r0, 800e81a <_svfiprintf_r+0x2e>
 800e810:	230c      	movs	r3, #12
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	f04f 30ff 	mov.w	r0, #4294967295
 800e818:	e0d1      	b.n	800e9be <_svfiprintf_r+0x1d2>
 800e81a:	2340      	movs	r3, #64	; 0x40
 800e81c:	616b      	str	r3, [r5, #20]
 800e81e:	2300      	movs	r3, #0
 800e820:	9309      	str	r3, [sp, #36]	; 0x24
 800e822:	2320      	movs	r3, #32
 800e824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e828:	2330      	movs	r3, #48	; 0x30
 800e82a:	f04f 0901 	mov.w	r9, #1
 800e82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e9d8 <_svfiprintf_r+0x1ec>
 800e836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e83a:	4623      	mov	r3, r4
 800e83c:	469a      	mov	sl, r3
 800e83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e842:	b10a      	cbz	r2, 800e848 <_svfiprintf_r+0x5c>
 800e844:	2a25      	cmp	r2, #37	; 0x25
 800e846:	d1f9      	bne.n	800e83c <_svfiprintf_r+0x50>
 800e848:	ebba 0b04 	subs.w	fp, sl, r4
 800e84c:	d00b      	beq.n	800e866 <_svfiprintf_r+0x7a>
 800e84e:	465b      	mov	r3, fp
 800e850:	4622      	mov	r2, r4
 800e852:	4629      	mov	r1, r5
 800e854:	4638      	mov	r0, r7
 800e856:	f7ff ff6d 	bl	800e734 <__ssputs_r>
 800e85a:	3001      	adds	r0, #1
 800e85c:	f000 80aa 	beq.w	800e9b4 <_svfiprintf_r+0x1c8>
 800e860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e862:	445a      	add	r2, fp
 800e864:	9209      	str	r2, [sp, #36]	; 0x24
 800e866:	f89a 3000 	ldrb.w	r3, [sl]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 80a2 	beq.w	800e9b4 <_svfiprintf_r+0x1c8>
 800e870:	2300      	movs	r3, #0
 800e872:	f04f 32ff 	mov.w	r2, #4294967295
 800e876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e87a:	f10a 0a01 	add.w	sl, sl, #1
 800e87e:	9304      	str	r3, [sp, #16]
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e886:	931a      	str	r3, [sp, #104]	; 0x68
 800e888:	4654      	mov	r4, sl
 800e88a:	2205      	movs	r2, #5
 800e88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e890:	4851      	ldr	r0, [pc, #324]	; (800e9d8 <_svfiprintf_r+0x1ec>)
 800e892:	f7ff fa5b 	bl	800dd4c <memchr>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	b9d8      	cbnz	r0, 800e8d2 <_svfiprintf_r+0xe6>
 800e89a:	06d0      	lsls	r0, r2, #27
 800e89c:	bf44      	itt	mi
 800e89e:	2320      	movmi	r3, #32
 800e8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8a4:	0711      	lsls	r1, r2, #28
 800e8a6:	bf44      	itt	mi
 800e8a8:	232b      	movmi	r3, #43	; 0x2b
 800e8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8b4:	d015      	beq.n	800e8e2 <_svfiprintf_r+0xf6>
 800e8b6:	4654      	mov	r4, sl
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f04f 0c0a 	mov.w	ip, #10
 800e8be:	9a07      	ldr	r2, [sp, #28]
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8c6:	3b30      	subs	r3, #48	; 0x30
 800e8c8:	2b09      	cmp	r3, #9
 800e8ca:	d94e      	bls.n	800e96a <_svfiprintf_r+0x17e>
 800e8cc:	b1b0      	cbz	r0, 800e8fc <_svfiprintf_r+0x110>
 800e8ce:	9207      	str	r2, [sp, #28]
 800e8d0:	e014      	b.n	800e8fc <_svfiprintf_r+0x110>
 800e8d2:	eba0 0308 	sub.w	r3, r0, r8
 800e8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	46a2      	mov	sl, r4
 800e8de:	9304      	str	r3, [sp, #16]
 800e8e0:	e7d2      	b.n	800e888 <_svfiprintf_r+0x9c>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	1d19      	adds	r1, r3, #4
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	9103      	str	r1, [sp, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	bfbb      	ittet	lt
 800e8ee:	425b      	neglt	r3, r3
 800e8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800e8f4:	9307      	strge	r3, [sp, #28]
 800e8f6:	9307      	strlt	r3, [sp, #28]
 800e8f8:	bfb8      	it	lt
 800e8fa:	9204      	strlt	r2, [sp, #16]
 800e8fc:	7823      	ldrb	r3, [r4, #0]
 800e8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800e900:	d10c      	bne.n	800e91c <_svfiprintf_r+0x130>
 800e902:	7863      	ldrb	r3, [r4, #1]
 800e904:	2b2a      	cmp	r3, #42	; 0x2a
 800e906:	d135      	bne.n	800e974 <_svfiprintf_r+0x188>
 800e908:	9b03      	ldr	r3, [sp, #12]
 800e90a:	3402      	adds	r4, #2
 800e90c:	1d1a      	adds	r2, r3, #4
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	9203      	str	r2, [sp, #12]
 800e912:	2b00      	cmp	r3, #0
 800e914:	bfb8      	it	lt
 800e916:	f04f 33ff 	movlt.w	r3, #4294967295
 800e91a:	9305      	str	r3, [sp, #20]
 800e91c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e9dc <_svfiprintf_r+0x1f0>
 800e920:	2203      	movs	r2, #3
 800e922:	4650      	mov	r0, sl
 800e924:	7821      	ldrb	r1, [r4, #0]
 800e926:	f7ff fa11 	bl	800dd4c <memchr>
 800e92a:	b140      	cbz	r0, 800e93e <_svfiprintf_r+0x152>
 800e92c:	2340      	movs	r3, #64	; 0x40
 800e92e:	eba0 000a 	sub.w	r0, r0, sl
 800e932:	fa03 f000 	lsl.w	r0, r3, r0
 800e936:	9b04      	ldr	r3, [sp, #16]
 800e938:	3401      	adds	r4, #1
 800e93a:	4303      	orrs	r3, r0
 800e93c:	9304      	str	r3, [sp, #16]
 800e93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e942:	2206      	movs	r2, #6
 800e944:	4826      	ldr	r0, [pc, #152]	; (800e9e0 <_svfiprintf_r+0x1f4>)
 800e946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e94a:	f7ff f9ff 	bl	800dd4c <memchr>
 800e94e:	2800      	cmp	r0, #0
 800e950:	d038      	beq.n	800e9c4 <_svfiprintf_r+0x1d8>
 800e952:	4b24      	ldr	r3, [pc, #144]	; (800e9e4 <_svfiprintf_r+0x1f8>)
 800e954:	bb1b      	cbnz	r3, 800e99e <_svfiprintf_r+0x1b2>
 800e956:	9b03      	ldr	r3, [sp, #12]
 800e958:	3307      	adds	r3, #7
 800e95a:	f023 0307 	bic.w	r3, r3, #7
 800e95e:	3308      	adds	r3, #8
 800e960:	9303      	str	r3, [sp, #12]
 800e962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e964:	4433      	add	r3, r6
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	e767      	b.n	800e83a <_svfiprintf_r+0x4e>
 800e96a:	460c      	mov	r4, r1
 800e96c:	2001      	movs	r0, #1
 800e96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e972:	e7a5      	b.n	800e8c0 <_svfiprintf_r+0xd4>
 800e974:	2300      	movs	r3, #0
 800e976:	f04f 0c0a 	mov.w	ip, #10
 800e97a:	4619      	mov	r1, r3
 800e97c:	3401      	adds	r4, #1
 800e97e:	9305      	str	r3, [sp, #20]
 800e980:	4620      	mov	r0, r4
 800e982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e986:	3a30      	subs	r2, #48	; 0x30
 800e988:	2a09      	cmp	r2, #9
 800e98a:	d903      	bls.n	800e994 <_svfiprintf_r+0x1a8>
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0c5      	beq.n	800e91c <_svfiprintf_r+0x130>
 800e990:	9105      	str	r1, [sp, #20]
 800e992:	e7c3      	b.n	800e91c <_svfiprintf_r+0x130>
 800e994:	4604      	mov	r4, r0
 800e996:	2301      	movs	r3, #1
 800e998:	fb0c 2101 	mla	r1, ip, r1, r2
 800e99c:	e7f0      	b.n	800e980 <_svfiprintf_r+0x194>
 800e99e:	ab03      	add	r3, sp, #12
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	462a      	mov	r2, r5
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	4b10      	ldr	r3, [pc, #64]	; (800e9e8 <_svfiprintf_r+0x1fc>)
 800e9a8:	a904      	add	r1, sp, #16
 800e9aa:	f7fc fa09 	bl	800adc0 <_printf_float>
 800e9ae:	1c42      	adds	r2, r0, #1
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	d1d6      	bne.n	800e962 <_svfiprintf_r+0x176>
 800e9b4:	89ab      	ldrh	r3, [r5, #12]
 800e9b6:	065b      	lsls	r3, r3, #25
 800e9b8:	f53f af2c 	bmi.w	800e814 <_svfiprintf_r+0x28>
 800e9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9be:	b01d      	add	sp, #116	; 0x74
 800e9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c4:	ab03      	add	r3, sp, #12
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	462a      	mov	r2, r5
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	4b06      	ldr	r3, [pc, #24]	; (800e9e8 <_svfiprintf_r+0x1fc>)
 800e9ce:	a904      	add	r1, sp, #16
 800e9d0:	f7fc fc92 	bl	800b2f8 <_printf_i>
 800e9d4:	e7eb      	b.n	800e9ae <_svfiprintf_r+0x1c2>
 800e9d6:	bf00      	nop
 800e9d8:	0800fcac 	.word	0x0800fcac
 800e9dc:	0800fcb2 	.word	0x0800fcb2
 800e9e0:	0800fcb6 	.word	0x0800fcb6
 800e9e4:	0800adc1 	.word	0x0800adc1
 800e9e8:	0800e735 	.word	0x0800e735

0800e9ec <nan>:
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	4901      	ldr	r1, [pc, #4]	; (800e9f4 <nan+0x8>)
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	7ff80000 	.word	0x7ff80000

0800e9f8 <strncmp>:
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	b510      	push	{r4, lr}
 800e9fc:	b172      	cbz	r2, 800ea1c <strncmp+0x24>
 800e9fe:	3901      	subs	r1, #1
 800ea00:	1884      	adds	r4, r0, r2
 800ea02:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea0a:	4290      	cmp	r0, r2
 800ea0c:	d101      	bne.n	800ea12 <strncmp+0x1a>
 800ea0e:	42a3      	cmp	r3, r4
 800ea10:	d101      	bne.n	800ea16 <strncmp+0x1e>
 800ea12:	1a80      	subs	r0, r0, r2
 800ea14:	bd10      	pop	{r4, pc}
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d1f3      	bne.n	800ea02 <strncmp+0xa>
 800ea1a:	e7fa      	b.n	800ea12 <strncmp+0x1a>
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	e7f9      	b.n	800ea14 <strncmp+0x1c>

0800ea20 <__ascii_wctomb>:
 800ea20:	4603      	mov	r3, r0
 800ea22:	4608      	mov	r0, r1
 800ea24:	b141      	cbz	r1, 800ea38 <__ascii_wctomb+0x18>
 800ea26:	2aff      	cmp	r2, #255	; 0xff
 800ea28:	d904      	bls.n	800ea34 <__ascii_wctomb+0x14>
 800ea2a:	228a      	movs	r2, #138	; 0x8a
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	4770      	bx	lr
 800ea34:	2001      	movs	r0, #1
 800ea36:	700a      	strb	r2, [r1, #0]
 800ea38:	4770      	bx	lr
	...

0800ea3c <__assert_func>:
 800ea3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea3e:	4614      	mov	r4, r2
 800ea40:	461a      	mov	r2, r3
 800ea42:	4b09      	ldr	r3, [pc, #36]	; (800ea68 <__assert_func+0x2c>)
 800ea44:	4605      	mov	r5, r0
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68d8      	ldr	r0, [r3, #12]
 800ea4a:	b14c      	cbz	r4, 800ea60 <__assert_func+0x24>
 800ea4c:	4b07      	ldr	r3, [pc, #28]	; (800ea6c <__assert_func+0x30>)
 800ea4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea52:	9100      	str	r1, [sp, #0]
 800ea54:	462b      	mov	r3, r5
 800ea56:	4906      	ldr	r1, [pc, #24]	; (800ea70 <__assert_func+0x34>)
 800ea58:	f000 f80e 	bl	800ea78 <fiprintf>
 800ea5c:	f000 fa82 	bl	800ef64 <abort>
 800ea60:	4b04      	ldr	r3, [pc, #16]	; (800ea74 <__assert_func+0x38>)
 800ea62:	461c      	mov	r4, r3
 800ea64:	e7f3      	b.n	800ea4e <__assert_func+0x12>
 800ea66:	bf00      	nop
 800ea68:	2000020c 	.word	0x2000020c
 800ea6c:	0800fcbd 	.word	0x0800fcbd
 800ea70:	0800fcca 	.word	0x0800fcca
 800ea74:	0800fcf8 	.word	0x0800fcf8

0800ea78 <fiprintf>:
 800ea78:	b40e      	push	{r1, r2, r3}
 800ea7a:	b503      	push	{r0, r1, lr}
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	ab03      	add	r3, sp, #12
 800ea80:	4805      	ldr	r0, [pc, #20]	; (800ea98 <fiprintf+0x20>)
 800ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea86:	6800      	ldr	r0, [r0, #0]
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	f000 f87b 	bl	800eb84 <_vfiprintf_r>
 800ea8e:	b002      	add	sp, #8
 800ea90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea94:	b003      	add	sp, #12
 800ea96:	4770      	bx	lr
 800ea98:	2000020c 	.word	0x2000020c

0800ea9c <__retarget_lock_init_recursive>:
 800ea9c:	4770      	bx	lr

0800ea9e <__retarget_lock_acquire_recursive>:
 800ea9e:	4770      	bx	lr

0800eaa0 <__retarget_lock_release_recursive>:
 800eaa0:	4770      	bx	lr

0800eaa2 <memmove>:
 800eaa2:	4288      	cmp	r0, r1
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	eb01 0402 	add.w	r4, r1, r2
 800eaaa:	d902      	bls.n	800eab2 <memmove+0x10>
 800eaac:	4284      	cmp	r4, r0
 800eaae:	4623      	mov	r3, r4
 800eab0:	d807      	bhi.n	800eac2 <memmove+0x20>
 800eab2:	1e43      	subs	r3, r0, #1
 800eab4:	42a1      	cmp	r1, r4
 800eab6:	d008      	beq.n	800eaca <memmove+0x28>
 800eab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eabc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eac0:	e7f8      	b.n	800eab4 <memmove+0x12>
 800eac2:	4601      	mov	r1, r0
 800eac4:	4402      	add	r2, r0
 800eac6:	428a      	cmp	r2, r1
 800eac8:	d100      	bne.n	800eacc <memmove+0x2a>
 800eaca:	bd10      	pop	{r4, pc}
 800eacc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ead0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ead4:	e7f7      	b.n	800eac6 <memmove+0x24>

0800ead6 <_realloc_r>:
 800ead6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eada:	4680      	mov	r8, r0
 800eadc:	4614      	mov	r4, r2
 800eade:	460e      	mov	r6, r1
 800eae0:	b921      	cbnz	r1, 800eaec <_realloc_r+0x16>
 800eae2:	4611      	mov	r1, r2
 800eae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	f7fc b858 	b.w	800ab9c <_malloc_r>
 800eaec:	b92a      	cbnz	r2, 800eafa <_realloc_r+0x24>
 800eaee:	f7fb ffed 	bl	800aacc <_free_r>
 800eaf2:	4625      	mov	r5, r4
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eafa:	f000 fc53 	bl	800f3a4 <_malloc_usable_size_r>
 800eafe:	4284      	cmp	r4, r0
 800eb00:	4607      	mov	r7, r0
 800eb02:	d802      	bhi.n	800eb0a <_realloc_r+0x34>
 800eb04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb08:	d812      	bhi.n	800eb30 <_realloc_r+0x5a>
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4640      	mov	r0, r8
 800eb0e:	f7fc f845 	bl	800ab9c <_malloc_r>
 800eb12:	4605      	mov	r5, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d0ed      	beq.n	800eaf4 <_realloc_r+0x1e>
 800eb18:	42bc      	cmp	r4, r7
 800eb1a:	4622      	mov	r2, r4
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	bf28      	it	cs
 800eb20:	463a      	movcs	r2, r7
 800eb22:	f7ff f921 	bl	800dd68 <memcpy>
 800eb26:	4631      	mov	r1, r6
 800eb28:	4640      	mov	r0, r8
 800eb2a:	f7fb ffcf 	bl	800aacc <_free_r>
 800eb2e:	e7e1      	b.n	800eaf4 <_realloc_r+0x1e>
 800eb30:	4635      	mov	r5, r6
 800eb32:	e7df      	b.n	800eaf4 <_realloc_r+0x1e>

0800eb34 <__sfputc_r>:
 800eb34:	6893      	ldr	r3, [r2, #8]
 800eb36:	b410      	push	{r4}
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	6093      	str	r3, [r2, #8]
 800eb3e:	da07      	bge.n	800eb50 <__sfputc_r+0x1c>
 800eb40:	6994      	ldr	r4, [r2, #24]
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	db01      	blt.n	800eb4a <__sfputc_r+0x16>
 800eb46:	290a      	cmp	r1, #10
 800eb48:	d102      	bne.n	800eb50 <__sfputc_r+0x1c>
 800eb4a:	bc10      	pop	{r4}
 800eb4c:	f000 b94a 	b.w	800ede4 <__swbuf_r>
 800eb50:	6813      	ldr	r3, [r2, #0]
 800eb52:	1c58      	adds	r0, r3, #1
 800eb54:	6010      	str	r0, [r2, #0]
 800eb56:	7019      	strb	r1, [r3, #0]
 800eb58:	4608      	mov	r0, r1
 800eb5a:	bc10      	pop	{r4}
 800eb5c:	4770      	bx	lr

0800eb5e <__sfputs_r>:
 800eb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb60:	4606      	mov	r6, r0
 800eb62:	460f      	mov	r7, r1
 800eb64:	4614      	mov	r4, r2
 800eb66:	18d5      	adds	r5, r2, r3
 800eb68:	42ac      	cmp	r4, r5
 800eb6a:	d101      	bne.n	800eb70 <__sfputs_r+0x12>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e007      	b.n	800eb80 <__sfputs_r+0x22>
 800eb70:	463a      	mov	r2, r7
 800eb72:	4630      	mov	r0, r6
 800eb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb78:	f7ff ffdc 	bl	800eb34 <__sfputc_r>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d1f3      	bne.n	800eb68 <__sfputs_r+0xa>
 800eb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb84 <_vfiprintf_r>:
 800eb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb88:	460d      	mov	r5, r1
 800eb8a:	4614      	mov	r4, r2
 800eb8c:	4698      	mov	r8, r3
 800eb8e:	4606      	mov	r6, r0
 800eb90:	b09d      	sub	sp, #116	; 0x74
 800eb92:	b118      	cbz	r0, 800eb9c <_vfiprintf_r+0x18>
 800eb94:	6983      	ldr	r3, [r0, #24]
 800eb96:	b90b      	cbnz	r3, 800eb9c <_vfiprintf_r+0x18>
 800eb98:	f000 fb02 	bl	800f1a0 <__sinit>
 800eb9c:	4b89      	ldr	r3, [pc, #548]	; (800edc4 <_vfiprintf_r+0x240>)
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	d11b      	bne.n	800ebda <_vfiprintf_r+0x56>
 800eba2:	6875      	ldr	r5, [r6, #4]
 800eba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eba6:	07d9      	lsls	r1, r3, #31
 800eba8:	d405      	bmi.n	800ebb6 <_vfiprintf_r+0x32>
 800ebaa:	89ab      	ldrh	r3, [r5, #12]
 800ebac:	059a      	lsls	r2, r3, #22
 800ebae:	d402      	bmi.n	800ebb6 <_vfiprintf_r+0x32>
 800ebb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebb2:	f7ff ff74 	bl	800ea9e <__retarget_lock_acquire_recursive>
 800ebb6:	89ab      	ldrh	r3, [r5, #12]
 800ebb8:	071b      	lsls	r3, r3, #28
 800ebba:	d501      	bpl.n	800ebc0 <_vfiprintf_r+0x3c>
 800ebbc:	692b      	ldr	r3, [r5, #16]
 800ebbe:	b9eb      	cbnz	r3, 800ebfc <_vfiprintf_r+0x78>
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 f960 	bl	800ee88 <__swsetup_r>
 800ebc8:	b1c0      	cbz	r0, 800ebfc <_vfiprintf_r+0x78>
 800ebca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebcc:	07dc      	lsls	r4, r3, #31
 800ebce:	d50e      	bpl.n	800ebee <_vfiprintf_r+0x6a>
 800ebd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd4:	b01d      	add	sp, #116	; 0x74
 800ebd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebda:	4b7b      	ldr	r3, [pc, #492]	; (800edc8 <_vfiprintf_r+0x244>)
 800ebdc:	429d      	cmp	r5, r3
 800ebde:	d101      	bne.n	800ebe4 <_vfiprintf_r+0x60>
 800ebe0:	68b5      	ldr	r5, [r6, #8]
 800ebe2:	e7df      	b.n	800eba4 <_vfiprintf_r+0x20>
 800ebe4:	4b79      	ldr	r3, [pc, #484]	; (800edcc <_vfiprintf_r+0x248>)
 800ebe6:	429d      	cmp	r5, r3
 800ebe8:	bf08      	it	eq
 800ebea:	68f5      	ldreq	r5, [r6, #12]
 800ebec:	e7da      	b.n	800eba4 <_vfiprintf_r+0x20>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	0598      	lsls	r0, r3, #22
 800ebf2:	d4ed      	bmi.n	800ebd0 <_vfiprintf_r+0x4c>
 800ebf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebf6:	f7ff ff53 	bl	800eaa0 <__retarget_lock_release_recursive>
 800ebfa:	e7e9      	b.n	800ebd0 <_vfiprintf_r+0x4c>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	2320      	movs	r3, #32
 800ec02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec06:	2330      	movs	r3, #48	; 0x30
 800ec08:	f04f 0901 	mov.w	r9, #1
 800ec0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800edd0 <_vfiprintf_r+0x24c>
 800ec14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec18:	4623      	mov	r3, r4
 800ec1a:	469a      	mov	sl, r3
 800ec1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec20:	b10a      	cbz	r2, 800ec26 <_vfiprintf_r+0xa2>
 800ec22:	2a25      	cmp	r2, #37	; 0x25
 800ec24:	d1f9      	bne.n	800ec1a <_vfiprintf_r+0x96>
 800ec26:	ebba 0b04 	subs.w	fp, sl, r4
 800ec2a:	d00b      	beq.n	800ec44 <_vfiprintf_r+0xc0>
 800ec2c:	465b      	mov	r3, fp
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4629      	mov	r1, r5
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7ff ff93 	bl	800eb5e <__sfputs_r>
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f000 80aa 	beq.w	800ed92 <_vfiprintf_r+0x20e>
 800ec3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec40:	445a      	add	r2, fp
 800ec42:	9209      	str	r2, [sp, #36]	; 0x24
 800ec44:	f89a 3000 	ldrb.w	r3, [sl]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f000 80a2 	beq.w	800ed92 <_vfiprintf_r+0x20e>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f04f 32ff 	mov.w	r2, #4294967295
 800ec54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec58:	f10a 0a01 	add.w	sl, sl, #1
 800ec5c:	9304      	str	r3, [sp, #16]
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec64:	931a      	str	r3, [sp, #104]	; 0x68
 800ec66:	4654      	mov	r4, sl
 800ec68:	2205      	movs	r2, #5
 800ec6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6e:	4858      	ldr	r0, [pc, #352]	; (800edd0 <_vfiprintf_r+0x24c>)
 800ec70:	f7ff f86c 	bl	800dd4c <memchr>
 800ec74:	9a04      	ldr	r2, [sp, #16]
 800ec76:	b9d8      	cbnz	r0, 800ecb0 <_vfiprintf_r+0x12c>
 800ec78:	06d1      	lsls	r1, r2, #27
 800ec7a:	bf44      	itt	mi
 800ec7c:	2320      	movmi	r3, #32
 800ec7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec82:	0713      	lsls	r3, r2, #28
 800ec84:	bf44      	itt	mi
 800ec86:	232b      	movmi	r3, #43	; 0x2b
 800ec88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec90:	2b2a      	cmp	r3, #42	; 0x2a
 800ec92:	d015      	beq.n	800ecc0 <_vfiprintf_r+0x13c>
 800ec94:	4654      	mov	r4, sl
 800ec96:	2000      	movs	r0, #0
 800ec98:	f04f 0c0a 	mov.w	ip, #10
 800ec9c:	9a07      	ldr	r2, [sp, #28]
 800ec9e:	4621      	mov	r1, r4
 800eca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eca4:	3b30      	subs	r3, #48	; 0x30
 800eca6:	2b09      	cmp	r3, #9
 800eca8:	d94e      	bls.n	800ed48 <_vfiprintf_r+0x1c4>
 800ecaa:	b1b0      	cbz	r0, 800ecda <_vfiprintf_r+0x156>
 800ecac:	9207      	str	r2, [sp, #28]
 800ecae:	e014      	b.n	800ecda <_vfiprintf_r+0x156>
 800ecb0:	eba0 0308 	sub.w	r3, r0, r8
 800ecb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	46a2      	mov	sl, r4
 800ecbc:	9304      	str	r3, [sp, #16]
 800ecbe:	e7d2      	b.n	800ec66 <_vfiprintf_r+0xe2>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	1d19      	adds	r1, r3, #4
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	9103      	str	r1, [sp, #12]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	bfbb      	ittet	lt
 800eccc:	425b      	neglt	r3, r3
 800ecce:	f042 0202 	orrlt.w	r2, r2, #2
 800ecd2:	9307      	strge	r3, [sp, #28]
 800ecd4:	9307      	strlt	r3, [sp, #28]
 800ecd6:	bfb8      	it	lt
 800ecd8:	9204      	strlt	r2, [sp, #16]
 800ecda:	7823      	ldrb	r3, [r4, #0]
 800ecdc:	2b2e      	cmp	r3, #46	; 0x2e
 800ecde:	d10c      	bne.n	800ecfa <_vfiprintf_r+0x176>
 800ece0:	7863      	ldrb	r3, [r4, #1]
 800ece2:	2b2a      	cmp	r3, #42	; 0x2a
 800ece4:	d135      	bne.n	800ed52 <_vfiprintf_r+0x1ce>
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	3402      	adds	r4, #2
 800ecea:	1d1a      	adds	r2, r3, #4
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	9203      	str	r2, [sp, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bfb8      	it	lt
 800ecf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecf8:	9305      	str	r3, [sp, #20]
 800ecfa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800edd4 <_vfiprintf_r+0x250>
 800ecfe:	2203      	movs	r2, #3
 800ed00:	4650      	mov	r0, sl
 800ed02:	7821      	ldrb	r1, [r4, #0]
 800ed04:	f7ff f822 	bl	800dd4c <memchr>
 800ed08:	b140      	cbz	r0, 800ed1c <_vfiprintf_r+0x198>
 800ed0a:	2340      	movs	r3, #64	; 0x40
 800ed0c:	eba0 000a 	sub.w	r0, r0, sl
 800ed10:	fa03 f000 	lsl.w	r0, r3, r0
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	3401      	adds	r4, #1
 800ed18:	4303      	orrs	r3, r0
 800ed1a:	9304      	str	r3, [sp, #16]
 800ed1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed20:	2206      	movs	r2, #6
 800ed22:	482d      	ldr	r0, [pc, #180]	; (800edd8 <_vfiprintf_r+0x254>)
 800ed24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed28:	f7ff f810 	bl	800dd4c <memchr>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d03f      	beq.n	800edb0 <_vfiprintf_r+0x22c>
 800ed30:	4b2a      	ldr	r3, [pc, #168]	; (800eddc <_vfiprintf_r+0x258>)
 800ed32:	bb1b      	cbnz	r3, 800ed7c <_vfiprintf_r+0x1f8>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	3307      	adds	r3, #7
 800ed38:	f023 0307 	bic.w	r3, r3, #7
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed42:	443b      	add	r3, r7
 800ed44:	9309      	str	r3, [sp, #36]	; 0x24
 800ed46:	e767      	b.n	800ec18 <_vfiprintf_r+0x94>
 800ed48:	460c      	mov	r4, r1
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed50:	e7a5      	b.n	800ec9e <_vfiprintf_r+0x11a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	f04f 0c0a 	mov.w	ip, #10
 800ed58:	4619      	mov	r1, r3
 800ed5a:	3401      	adds	r4, #1
 800ed5c:	9305      	str	r3, [sp, #20]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed64:	3a30      	subs	r2, #48	; 0x30
 800ed66:	2a09      	cmp	r2, #9
 800ed68:	d903      	bls.n	800ed72 <_vfiprintf_r+0x1ee>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0c5      	beq.n	800ecfa <_vfiprintf_r+0x176>
 800ed6e:	9105      	str	r1, [sp, #20]
 800ed70:	e7c3      	b.n	800ecfa <_vfiprintf_r+0x176>
 800ed72:	4604      	mov	r4, r0
 800ed74:	2301      	movs	r3, #1
 800ed76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed7a:	e7f0      	b.n	800ed5e <_vfiprintf_r+0x1da>
 800ed7c:	ab03      	add	r3, sp, #12
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	462a      	mov	r2, r5
 800ed82:	4630      	mov	r0, r6
 800ed84:	4b16      	ldr	r3, [pc, #88]	; (800ede0 <_vfiprintf_r+0x25c>)
 800ed86:	a904      	add	r1, sp, #16
 800ed88:	f7fc f81a 	bl	800adc0 <_printf_float>
 800ed8c:	4607      	mov	r7, r0
 800ed8e:	1c78      	adds	r0, r7, #1
 800ed90:	d1d6      	bne.n	800ed40 <_vfiprintf_r+0x1bc>
 800ed92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed94:	07d9      	lsls	r1, r3, #31
 800ed96:	d405      	bmi.n	800eda4 <_vfiprintf_r+0x220>
 800ed98:	89ab      	ldrh	r3, [r5, #12]
 800ed9a:	059a      	lsls	r2, r3, #22
 800ed9c:	d402      	bmi.n	800eda4 <_vfiprintf_r+0x220>
 800ed9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda0:	f7ff fe7e 	bl	800eaa0 <__retarget_lock_release_recursive>
 800eda4:	89ab      	ldrh	r3, [r5, #12]
 800eda6:	065b      	lsls	r3, r3, #25
 800eda8:	f53f af12 	bmi.w	800ebd0 <_vfiprintf_r+0x4c>
 800edac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edae:	e711      	b.n	800ebd4 <_vfiprintf_r+0x50>
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	462a      	mov	r2, r5
 800edb6:	4630      	mov	r0, r6
 800edb8:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <_vfiprintf_r+0x25c>)
 800edba:	a904      	add	r1, sp, #16
 800edbc:	f7fc fa9c 	bl	800b2f8 <_printf_i>
 800edc0:	e7e4      	b.n	800ed8c <_vfiprintf_r+0x208>
 800edc2:	bf00      	nop
 800edc4:	0800fd1c 	.word	0x0800fd1c
 800edc8:	0800fd3c 	.word	0x0800fd3c
 800edcc:	0800fcfc 	.word	0x0800fcfc
 800edd0:	0800fcac 	.word	0x0800fcac
 800edd4:	0800fcb2 	.word	0x0800fcb2
 800edd8:	0800fcb6 	.word	0x0800fcb6
 800eddc:	0800adc1 	.word	0x0800adc1
 800ede0:	0800eb5f 	.word	0x0800eb5f

0800ede4 <__swbuf_r>:
 800ede4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede6:	460e      	mov	r6, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	4605      	mov	r5, r0
 800edec:	b118      	cbz	r0, 800edf6 <__swbuf_r+0x12>
 800edee:	6983      	ldr	r3, [r0, #24]
 800edf0:	b90b      	cbnz	r3, 800edf6 <__swbuf_r+0x12>
 800edf2:	f000 f9d5 	bl	800f1a0 <__sinit>
 800edf6:	4b21      	ldr	r3, [pc, #132]	; (800ee7c <__swbuf_r+0x98>)
 800edf8:	429c      	cmp	r4, r3
 800edfa:	d12b      	bne.n	800ee54 <__swbuf_r+0x70>
 800edfc:	686c      	ldr	r4, [r5, #4]
 800edfe:	69a3      	ldr	r3, [r4, #24]
 800ee00:	60a3      	str	r3, [r4, #8]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	071a      	lsls	r2, r3, #28
 800ee06:	d52f      	bpl.n	800ee68 <__swbuf_r+0x84>
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	b36b      	cbz	r3, 800ee68 <__swbuf_r+0x84>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	6820      	ldr	r0, [r4, #0]
 800ee10:	b2f6      	uxtb	r6, r6
 800ee12:	1ac0      	subs	r0, r0, r3
 800ee14:	6963      	ldr	r3, [r4, #20]
 800ee16:	4637      	mov	r7, r6
 800ee18:	4283      	cmp	r3, r0
 800ee1a:	dc04      	bgt.n	800ee26 <__swbuf_r+0x42>
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f000 f92a 	bl	800f078 <_fflush_r>
 800ee24:	bb30      	cbnz	r0, 800ee74 <__swbuf_r+0x90>
 800ee26:	68a3      	ldr	r3, [r4, #8]
 800ee28:	3001      	adds	r0, #1
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	60a3      	str	r3, [r4, #8]
 800ee2e:	6823      	ldr	r3, [r4, #0]
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	6022      	str	r2, [r4, #0]
 800ee34:	701e      	strb	r6, [r3, #0]
 800ee36:	6963      	ldr	r3, [r4, #20]
 800ee38:	4283      	cmp	r3, r0
 800ee3a:	d004      	beq.n	800ee46 <__swbuf_r+0x62>
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	07db      	lsls	r3, r3, #31
 800ee40:	d506      	bpl.n	800ee50 <__swbuf_r+0x6c>
 800ee42:	2e0a      	cmp	r6, #10
 800ee44:	d104      	bne.n	800ee50 <__swbuf_r+0x6c>
 800ee46:	4621      	mov	r1, r4
 800ee48:	4628      	mov	r0, r5
 800ee4a:	f000 f915 	bl	800f078 <_fflush_r>
 800ee4e:	b988      	cbnz	r0, 800ee74 <__swbuf_r+0x90>
 800ee50:	4638      	mov	r0, r7
 800ee52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee54:	4b0a      	ldr	r3, [pc, #40]	; (800ee80 <__swbuf_r+0x9c>)
 800ee56:	429c      	cmp	r4, r3
 800ee58:	d101      	bne.n	800ee5e <__swbuf_r+0x7a>
 800ee5a:	68ac      	ldr	r4, [r5, #8]
 800ee5c:	e7cf      	b.n	800edfe <__swbuf_r+0x1a>
 800ee5e:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <__swbuf_r+0xa0>)
 800ee60:	429c      	cmp	r4, r3
 800ee62:	bf08      	it	eq
 800ee64:	68ec      	ldreq	r4, [r5, #12]
 800ee66:	e7ca      	b.n	800edfe <__swbuf_r+0x1a>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 f80c 	bl	800ee88 <__swsetup_r>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d0cb      	beq.n	800ee0c <__swbuf_r+0x28>
 800ee74:	f04f 37ff 	mov.w	r7, #4294967295
 800ee78:	e7ea      	b.n	800ee50 <__swbuf_r+0x6c>
 800ee7a:	bf00      	nop
 800ee7c:	0800fd1c 	.word	0x0800fd1c
 800ee80:	0800fd3c 	.word	0x0800fd3c
 800ee84:	0800fcfc 	.word	0x0800fcfc

0800ee88 <__swsetup_r>:
 800ee88:	4b32      	ldr	r3, [pc, #200]	; (800ef54 <__swsetup_r+0xcc>)
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	681d      	ldr	r5, [r3, #0]
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460c      	mov	r4, r1
 800ee92:	b125      	cbz	r5, 800ee9e <__swsetup_r+0x16>
 800ee94:	69ab      	ldr	r3, [r5, #24]
 800ee96:	b913      	cbnz	r3, 800ee9e <__swsetup_r+0x16>
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f000 f981 	bl	800f1a0 <__sinit>
 800ee9e:	4b2e      	ldr	r3, [pc, #184]	; (800ef58 <__swsetup_r+0xd0>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	d10f      	bne.n	800eec4 <__swsetup_r+0x3c>
 800eea4:	686c      	ldr	r4, [r5, #4]
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eeac:	0719      	lsls	r1, r3, #28
 800eeae:	d42c      	bmi.n	800ef0a <__swsetup_r+0x82>
 800eeb0:	06dd      	lsls	r5, r3, #27
 800eeb2:	d411      	bmi.n	800eed8 <__swsetup_r+0x50>
 800eeb4:	2309      	movs	r3, #9
 800eeb6:	6033      	str	r3, [r6, #0]
 800eeb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295
 800eec0:	81a3      	strh	r3, [r4, #12]
 800eec2:	e03e      	b.n	800ef42 <__swsetup_r+0xba>
 800eec4:	4b25      	ldr	r3, [pc, #148]	; (800ef5c <__swsetup_r+0xd4>)
 800eec6:	429c      	cmp	r4, r3
 800eec8:	d101      	bne.n	800eece <__swsetup_r+0x46>
 800eeca:	68ac      	ldr	r4, [r5, #8]
 800eecc:	e7eb      	b.n	800eea6 <__swsetup_r+0x1e>
 800eece:	4b24      	ldr	r3, [pc, #144]	; (800ef60 <__swsetup_r+0xd8>)
 800eed0:	429c      	cmp	r4, r3
 800eed2:	bf08      	it	eq
 800eed4:	68ec      	ldreq	r4, [r5, #12]
 800eed6:	e7e6      	b.n	800eea6 <__swsetup_r+0x1e>
 800eed8:	0758      	lsls	r0, r3, #29
 800eeda:	d512      	bpl.n	800ef02 <__swsetup_r+0x7a>
 800eedc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eede:	b141      	cbz	r1, 800eef2 <__swsetup_r+0x6a>
 800eee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eee4:	4299      	cmp	r1, r3
 800eee6:	d002      	beq.n	800eeee <__swsetup_r+0x66>
 800eee8:	4630      	mov	r0, r6
 800eeea:	f7fb fdef 	bl	800aacc <_free_r>
 800eeee:	2300      	movs	r3, #0
 800eef0:	6363      	str	r3, [r4, #52]	; 0x34
 800eef2:	89a3      	ldrh	r3, [r4, #12]
 800eef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	2300      	movs	r3, #0
 800eefc:	6063      	str	r3, [r4, #4]
 800eefe:	6923      	ldr	r3, [r4, #16]
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	89a3      	ldrh	r3, [r4, #12]
 800ef04:	f043 0308 	orr.w	r3, r3, #8
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	6923      	ldr	r3, [r4, #16]
 800ef0c:	b94b      	cbnz	r3, 800ef22 <__swsetup_r+0x9a>
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef18:	d003      	beq.n	800ef22 <__swsetup_r+0x9a>
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f000 fa01 	bl	800f324 <__smakebuf_r>
 800ef22:	89a0      	ldrh	r0, [r4, #12]
 800ef24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef28:	f010 0301 	ands.w	r3, r0, #1
 800ef2c:	d00a      	beq.n	800ef44 <__swsetup_r+0xbc>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	60a3      	str	r3, [r4, #8]
 800ef32:	6963      	ldr	r3, [r4, #20]
 800ef34:	425b      	negs	r3, r3
 800ef36:	61a3      	str	r3, [r4, #24]
 800ef38:	6923      	ldr	r3, [r4, #16]
 800ef3a:	b943      	cbnz	r3, 800ef4e <__swsetup_r+0xc6>
 800ef3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef40:	d1ba      	bne.n	800eeb8 <__swsetup_r+0x30>
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
 800ef44:	0781      	lsls	r1, r0, #30
 800ef46:	bf58      	it	pl
 800ef48:	6963      	ldrpl	r3, [r4, #20]
 800ef4a:	60a3      	str	r3, [r4, #8]
 800ef4c:	e7f4      	b.n	800ef38 <__swsetup_r+0xb0>
 800ef4e:	2000      	movs	r0, #0
 800ef50:	e7f7      	b.n	800ef42 <__swsetup_r+0xba>
 800ef52:	bf00      	nop
 800ef54:	2000020c 	.word	0x2000020c
 800ef58:	0800fd1c 	.word	0x0800fd1c
 800ef5c:	0800fd3c 	.word	0x0800fd3c
 800ef60:	0800fcfc 	.word	0x0800fcfc

0800ef64 <abort>:
 800ef64:	2006      	movs	r0, #6
 800ef66:	b508      	push	{r3, lr}
 800ef68:	f000 fa4c 	bl	800f404 <raise>
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	f7f2 fa12 	bl	8001396 <_exit>
	...

0800ef74 <__sflush_r>:
 800ef74:	898a      	ldrh	r2, [r1, #12]
 800ef76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef78:	4605      	mov	r5, r0
 800ef7a:	0710      	lsls	r0, r2, #28
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	d457      	bmi.n	800f030 <__sflush_r+0xbc>
 800ef80:	684b      	ldr	r3, [r1, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	dc04      	bgt.n	800ef90 <__sflush_r+0x1c>
 800ef86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	dc01      	bgt.n	800ef90 <__sflush_r+0x1c>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef92:	2e00      	cmp	r6, #0
 800ef94:	d0fa      	beq.n	800ef8c <__sflush_r+0x18>
 800ef96:	2300      	movs	r3, #0
 800ef98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef9c:	682f      	ldr	r7, [r5, #0]
 800ef9e:	602b      	str	r3, [r5, #0]
 800efa0:	d032      	beq.n	800f008 <__sflush_r+0x94>
 800efa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	075a      	lsls	r2, r3, #29
 800efa8:	d505      	bpl.n	800efb6 <__sflush_r+0x42>
 800efaa:	6863      	ldr	r3, [r4, #4]
 800efac:	1ac0      	subs	r0, r0, r3
 800efae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efb0:	b10b      	cbz	r3, 800efb6 <__sflush_r+0x42>
 800efb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efb4:	1ac0      	subs	r0, r0, r3
 800efb6:	2300      	movs	r3, #0
 800efb8:	4602      	mov	r2, r0
 800efba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efbc:	4628      	mov	r0, r5
 800efbe:	6a21      	ldr	r1, [r4, #32]
 800efc0:	47b0      	blx	r6
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	d106      	bne.n	800efd6 <__sflush_r+0x62>
 800efc8:	6829      	ldr	r1, [r5, #0]
 800efca:	291d      	cmp	r1, #29
 800efcc:	d82c      	bhi.n	800f028 <__sflush_r+0xb4>
 800efce:	4a29      	ldr	r2, [pc, #164]	; (800f074 <__sflush_r+0x100>)
 800efd0:	40ca      	lsrs	r2, r1
 800efd2:	07d6      	lsls	r6, r2, #31
 800efd4:	d528      	bpl.n	800f028 <__sflush_r+0xb4>
 800efd6:	2200      	movs	r2, #0
 800efd8:	6062      	str	r2, [r4, #4]
 800efda:	6922      	ldr	r2, [r4, #16]
 800efdc:	04d9      	lsls	r1, r3, #19
 800efde:	6022      	str	r2, [r4, #0]
 800efe0:	d504      	bpl.n	800efec <__sflush_r+0x78>
 800efe2:	1c42      	adds	r2, r0, #1
 800efe4:	d101      	bne.n	800efea <__sflush_r+0x76>
 800efe6:	682b      	ldr	r3, [r5, #0]
 800efe8:	b903      	cbnz	r3, 800efec <__sflush_r+0x78>
 800efea:	6560      	str	r0, [r4, #84]	; 0x54
 800efec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efee:	602f      	str	r7, [r5, #0]
 800eff0:	2900      	cmp	r1, #0
 800eff2:	d0cb      	beq.n	800ef8c <__sflush_r+0x18>
 800eff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eff8:	4299      	cmp	r1, r3
 800effa:	d002      	beq.n	800f002 <__sflush_r+0x8e>
 800effc:	4628      	mov	r0, r5
 800effe:	f7fb fd65 	bl	800aacc <_free_r>
 800f002:	2000      	movs	r0, #0
 800f004:	6360      	str	r0, [r4, #52]	; 0x34
 800f006:	e7c2      	b.n	800ef8e <__sflush_r+0x1a>
 800f008:	6a21      	ldr	r1, [r4, #32]
 800f00a:	2301      	movs	r3, #1
 800f00c:	4628      	mov	r0, r5
 800f00e:	47b0      	blx	r6
 800f010:	1c41      	adds	r1, r0, #1
 800f012:	d1c7      	bne.n	800efa4 <__sflush_r+0x30>
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0c4      	beq.n	800efa4 <__sflush_r+0x30>
 800f01a:	2b1d      	cmp	r3, #29
 800f01c:	d001      	beq.n	800f022 <__sflush_r+0xae>
 800f01e:	2b16      	cmp	r3, #22
 800f020:	d101      	bne.n	800f026 <__sflush_r+0xb2>
 800f022:	602f      	str	r7, [r5, #0]
 800f024:	e7b2      	b.n	800ef8c <__sflush_r+0x18>
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	e7ae      	b.n	800ef8e <__sflush_r+0x1a>
 800f030:	690f      	ldr	r7, [r1, #16]
 800f032:	2f00      	cmp	r7, #0
 800f034:	d0aa      	beq.n	800ef8c <__sflush_r+0x18>
 800f036:	0793      	lsls	r3, r2, #30
 800f038:	bf18      	it	ne
 800f03a:	2300      	movne	r3, #0
 800f03c:	680e      	ldr	r6, [r1, #0]
 800f03e:	bf08      	it	eq
 800f040:	694b      	ldreq	r3, [r1, #20]
 800f042:	1bf6      	subs	r6, r6, r7
 800f044:	600f      	str	r7, [r1, #0]
 800f046:	608b      	str	r3, [r1, #8]
 800f048:	2e00      	cmp	r6, #0
 800f04a:	dd9f      	ble.n	800ef8c <__sflush_r+0x18>
 800f04c:	4633      	mov	r3, r6
 800f04e:	463a      	mov	r2, r7
 800f050:	4628      	mov	r0, r5
 800f052:	6a21      	ldr	r1, [r4, #32]
 800f054:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f058:	47e0      	blx	ip
 800f05a:	2800      	cmp	r0, #0
 800f05c:	dc06      	bgt.n	800f06c <__sflush_r+0xf8>
 800f05e:	89a3      	ldrh	r3, [r4, #12]
 800f060:	f04f 30ff 	mov.w	r0, #4294967295
 800f064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f068:	81a3      	strh	r3, [r4, #12]
 800f06a:	e790      	b.n	800ef8e <__sflush_r+0x1a>
 800f06c:	4407      	add	r7, r0
 800f06e:	1a36      	subs	r6, r6, r0
 800f070:	e7ea      	b.n	800f048 <__sflush_r+0xd4>
 800f072:	bf00      	nop
 800f074:	20400001 	.word	0x20400001

0800f078 <_fflush_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	690b      	ldr	r3, [r1, #16]
 800f07c:	4605      	mov	r5, r0
 800f07e:	460c      	mov	r4, r1
 800f080:	b913      	cbnz	r3, 800f088 <_fflush_r+0x10>
 800f082:	2500      	movs	r5, #0
 800f084:	4628      	mov	r0, r5
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	b118      	cbz	r0, 800f092 <_fflush_r+0x1a>
 800f08a:	6983      	ldr	r3, [r0, #24]
 800f08c:	b90b      	cbnz	r3, 800f092 <_fflush_r+0x1a>
 800f08e:	f000 f887 	bl	800f1a0 <__sinit>
 800f092:	4b14      	ldr	r3, [pc, #80]	; (800f0e4 <_fflush_r+0x6c>)
 800f094:	429c      	cmp	r4, r3
 800f096:	d11b      	bne.n	800f0d0 <_fflush_r+0x58>
 800f098:	686c      	ldr	r4, [r5, #4]
 800f09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d0ef      	beq.n	800f082 <_fflush_r+0xa>
 800f0a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0a4:	07d0      	lsls	r0, r2, #31
 800f0a6:	d404      	bmi.n	800f0b2 <_fflush_r+0x3a>
 800f0a8:	0599      	lsls	r1, r3, #22
 800f0aa:	d402      	bmi.n	800f0b2 <_fflush_r+0x3a>
 800f0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ae:	f7ff fcf6 	bl	800ea9e <__retarget_lock_acquire_recursive>
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	f7ff ff5d 	bl	800ef74 <__sflush_r>
 800f0ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0bc:	4605      	mov	r5, r0
 800f0be:	07da      	lsls	r2, r3, #31
 800f0c0:	d4e0      	bmi.n	800f084 <_fflush_r+0xc>
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	059b      	lsls	r3, r3, #22
 800f0c6:	d4dd      	bmi.n	800f084 <_fflush_r+0xc>
 800f0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ca:	f7ff fce9 	bl	800eaa0 <__retarget_lock_release_recursive>
 800f0ce:	e7d9      	b.n	800f084 <_fflush_r+0xc>
 800f0d0:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <_fflush_r+0x70>)
 800f0d2:	429c      	cmp	r4, r3
 800f0d4:	d101      	bne.n	800f0da <_fflush_r+0x62>
 800f0d6:	68ac      	ldr	r4, [r5, #8]
 800f0d8:	e7df      	b.n	800f09a <_fflush_r+0x22>
 800f0da:	4b04      	ldr	r3, [pc, #16]	; (800f0ec <_fflush_r+0x74>)
 800f0dc:	429c      	cmp	r4, r3
 800f0de:	bf08      	it	eq
 800f0e0:	68ec      	ldreq	r4, [r5, #12]
 800f0e2:	e7da      	b.n	800f09a <_fflush_r+0x22>
 800f0e4:	0800fd1c 	.word	0x0800fd1c
 800f0e8:	0800fd3c 	.word	0x0800fd3c
 800f0ec:	0800fcfc 	.word	0x0800fcfc

0800f0f0 <std>:
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800f0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0fe:	6083      	str	r3, [r0, #8]
 800f100:	8181      	strh	r1, [r0, #12]
 800f102:	6643      	str	r3, [r0, #100]	; 0x64
 800f104:	81c2      	strh	r2, [r0, #14]
 800f106:	6183      	str	r3, [r0, #24]
 800f108:	4619      	mov	r1, r3
 800f10a:	2208      	movs	r2, #8
 800f10c:	305c      	adds	r0, #92	; 0x5c
 800f10e:	f7fb fcd5 	bl	800aabc <memset>
 800f112:	4b05      	ldr	r3, [pc, #20]	; (800f128 <std+0x38>)
 800f114:	6224      	str	r4, [r4, #32]
 800f116:	6263      	str	r3, [r4, #36]	; 0x24
 800f118:	4b04      	ldr	r3, [pc, #16]	; (800f12c <std+0x3c>)
 800f11a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f11c:	4b04      	ldr	r3, [pc, #16]	; (800f130 <std+0x40>)
 800f11e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f120:	4b04      	ldr	r3, [pc, #16]	; (800f134 <std+0x44>)
 800f122:	6323      	str	r3, [r4, #48]	; 0x30
 800f124:	bd10      	pop	{r4, pc}
 800f126:	bf00      	nop
 800f128:	0800f43d 	.word	0x0800f43d
 800f12c:	0800f45f 	.word	0x0800f45f
 800f130:	0800f497 	.word	0x0800f497
 800f134:	0800f4bb 	.word	0x0800f4bb

0800f138 <_cleanup_r>:
 800f138:	4901      	ldr	r1, [pc, #4]	; (800f140 <_cleanup_r+0x8>)
 800f13a:	f000 b8af 	b.w	800f29c <_fwalk_reent>
 800f13e:	bf00      	nop
 800f140:	0800f079 	.word	0x0800f079

0800f144 <__sfmoreglue>:
 800f144:	2268      	movs	r2, #104	; 0x68
 800f146:	b570      	push	{r4, r5, r6, lr}
 800f148:	1e4d      	subs	r5, r1, #1
 800f14a:	4355      	muls	r5, r2
 800f14c:	460e      	mov	r6, r1
 800f14e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f152:	f7fb fd23 	bl	800ab9c <_malloc_r>
 800f156:	4604      	mov	r4, r0
 800f158:	b140      	cbz	r0, 800f16c <__sfmoreglue+0x28>
 800f15a:	2100      	movs	r1, #0
 800f15c:	e9c0 1600 	strd	r1, r6, [r0]
 800f160:	300c      	adds	r0, #12
 800f162:	60a0      	str	r0, [r4, #8]
 800f164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f168:	f7fb fca8 	bl	800aabc <memset>
 800f16c:	4620      	mov	r0, r4
 800f16e:	bd70      	pop	{r4, r5, r6, pc}

0800f170 <__sfp_lock_acquire>:
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__sfp_lock_acquire+0x8>)
 800f172:	f7ff bc94 	b.w	800ea9e <__retarget_lock_acquire_recursive>
 800f176:	bf00      	nop
 800f178:	20001c71 	.word	0x20001c71

0800f17c <__sfp_lock_release>:
 800f17c:	4801      	ldr	r0, [pc, #4]	; (800f184 <__sfp_lock_release+0x8>)
 800f17e:	f7ff bc8f 	b.w	800eaa0 <__retarget_lock_release_recursive>
 800f182:	bf00      	nop
 800f184:	20001c71 	.word	0x20001c71

0800f188 <__sinit_lock_acquire>:
 800f188:	4801      	ldr	r0, [pc, #4]	; (800f190 <__sinit_lock_acquire+0x8>)
 800f18a:	f7ff bc88 	b.w	800ea9e <__retarget_lock_acquire_recursive>
 800f18e:	bf00      	nop
 800f190:	20001c72 	.word	0x20001c72

0800f194 <__sinit_lock_release>:
 800f194:	4801      	ldr	r0, [pc, #4]	; (800f19c <__sinit_lock_release+0x8>)
 800f196:	f7ff bc83 	b.w	800eaa0 <__retarget_lock_release_recursive>
 800f19a:	bf00      	nop
 800f19c:	20001c72 	.word	0x20001c72

0800f1a0 <__sinit>:
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	f7ff fff0 	bl	800f188 <__sinit_lock_acquire>
 800f1a8:	69a3      	ldr	r3, [r4, #24]
 800f1aa:	b11b      	cbz	r3, 800f1b4 <__sinit+0x14>
 800f1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b0:	f7ff bff0 	b.w	800f194 <__sinit_lock_release>
 800f1b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1b8:	6523      	str	r3, [r4, #80]	; 0x50
 800f1ba:	4b13      	ldr	r3, [pc, #76]	; (800f208 <__sinit+0x68>)
 800f1bc:	4a13      	ldr	r2, [pc, #76]	; (800f20c <__sinit+0x6c>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1c2:	42a3      	cmp	r3, r4
 800f1c4:	bf08      	it	eq
 800f1c6:	2301      	moveq	r3, #1
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	bf08      	it	eq
 800f1cc:	61a3      	streq	r3, [r4, #24]
 800f1ce:	f000 f81f 	bl	800f210 <__sfp>
 800f1d2:	6060      	str	r0, [r4, #4]
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 f81b 	bl	800f210 <__sfp>
 800f1da:	60a0      	str	r0, [r4, #8]
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 f817 	bl	800f210 <__sfp>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2104      	movs	r1, #4
 800f1e6:	60e0      	str	r0, [r4, #12]
 800f1e8:	6860      	ldr	r0, [r4, #4]
 800f1ea:	f7ff ff81 	bl	800f0f0 <std>
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	2109      	movs	r1, #9
 800f1f2:	68a0      	ldr	r0, [r4, #8]
 800f1f4:	f7ff ff7c 	bl	800f0f0 <std>
 800f1f8:	2202      	movs	r2, #2
 800f1fa:	2112      	movs	r1, #18
 800f1fc:	68e0      	ldr	r0, [r4, #12]
 800f1fe:	f7ff ff77 	bl	800f0f0 <std>
 800f202:	2301      	movs	r3, #1
 800f204:	61a3      	str	r3, [r4, #24]
 800f206:	e7d1      	b.n	800f1ac <__sinit+0xc>
 800f208:	0800f8b4 	.word	0x0800f8b4
 800f20c:	0800f139 	.word	0x0800f139

0800f210 <__sfp>:
 800f210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f212:	4607      	mov	r7, r0
 800f214:	f7ff ffac 	bl	800f170 <__sfp_lock_acquire>
 800f218:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <__sfp+0x84>)
 800f21a:	681e      	ldr	r6, [r3, #0]
 800f21c:	69b3      	ldr	r3, [r6, #24]
 800f21e:	b913      	cbnz	r3, 800f226 <__sfp+0x16>
 800f220:	4630      	mov	r0, r6
 800f222:	f7ff ffbd 	bl	800f1a0 <__sinit>
 800f226:	3648      	adds	r6, #72	; 0x48
 800f228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	d503      	bpl.n	800f238 <__sfp+0x28>
 800f230:	6833      	ldr	r3, [r6, #0]
 800f232:	b30b      	cbz	r3, 800f278 <__sfp+0x68>
 800f234:	6836      	ldr	r6, [r6, #0]
 800f236:	e7f7      	b.n	800f228 <__sfp+0x18>
 800f238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f23c:	b9d5      	cbnz	r5, 800f274 <__sfp+0x64>
 800f23e:	4b16      	ldr	r3, [pc, #88]	; (800f298 <__sfp+0x88>)
 800f240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f244:	60e3      	str	r3, [r4, #12]
 800f246:	6665      	str	r5, [r4, #100]	; 0x64
 800f248:	f7ff fc28 	bl	800ea9c <__retarget_lock_init_recursive>
 800f24c:	f7ff ff96 	bl	800f17c <__sfp_lock_release>
 800f250:	2208      	movs	r2, #8
 800f252:	4629      	mov	r1, r5
 800f254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f25c:	6025      	str	r5, [r4, #0]
 800f25e:	61a5      	str	r5, [r4, #24]
 800f260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f264:	f7fb fc2a 	bl	800aabc <memset>
 800f268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f26c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f270:	4620      	mov	r0, r4
 800f272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f274:	3468      	adds	r4, #104	; 0x68
 800f276:	e7d9      	b.n	800f22c <__sfp+0x1c>
 800f278:	2104      	movs	r1, #4
 800f27a:	4638      	mov	r0, r7
 800f27c:	f7ff ff62 	bl	800f144 <__sfmoreglue>
 800f280:	4604      	mov	r4, r0
 800f282:	6030      	str	r0, [r6, #0]
 800f284:	2800      	cmp	r0, #0
 800f286:	d1d5      	bne.n	800f234 <__sfp+0x24>
 800f288:	f7ff ff78 	bl	800f17c <__sfp_lock_release>
 800f28c:	230c      	movs	r3, #12
 800f28e:	603b      	str	r3, [r7, #0]
 800f290:	e7ee      	b.n	800f270 <__sfp+0x60>
 800f292:	bf00      	nop
 800f294:	0800f8b4 	.word	0x0800f8b4
 800f298:	ffff0001 	.word	0xffff0001

0800f29c <_fwalk_reent>:
 800f29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	4688      	mov	r8, r1
 800f2a4:	2700      	movs	r7, #0
 800f2a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2ae:	f1b9 0901 	subs.w	r9, r9, #1
 800f2b2:	d505      	bpl.n	800f2c0 <_fwalk_reent+0x24>
 800f2b4:	6824      	ldr	r4, [r4, #0]
 800f2b6:	2c00      	cmp	r4, #0
 800f2b8:	d1f7      	bne.n	800f2aa <_fwalk_reent+0xe>
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2c0:	89ab      	ldrh	r3, [r5, #12]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d907      	bls.n	800f2d6 <_fwalk_reent+0x3a>
 800f2c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	d003      	beq.n	800f2d6 <_fwalk_reent+0x3a>
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	47c0      	blx	r8
 800f2d4:	4307      	orrs	r7, r0
 800f2d6:	3568      	adds	r5, #104	; 0x68
 800f2d8:	e7e9      	b.n	800f2ae <_fwalk_reent+0x12>

0800f2da <__swhatbuf_r>:
 800f2da:	b570      	push	{r4, r5, r6, lr}
 800f2dc:	460e      	mov	r6, r1
 800f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e2:	4614      	mov	r4, r2
 800f2e4:	2900      	cmp	r1, #0
 800f2e6:	461d      	mov	r5, r3
 800f2e8:	b096      	sub	sp, #88	; 0x58
 800f2ea:	da08      	bge.n	800f2fe <__swhatbuf_r+0x24>
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f2f2:	602a      	str	r2, [r5, #0]
 800f2f4:	061a      	lsls	r2, r3, #24
 800f2f6:	d410      	bmi.n	800f31a <__swhatbuf_r+0x40>
 800f2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2fc:	e00e      	b.n	800f31c <__swhatbuf_r+0x42>
 800f2fe:	466a      	mov	r2, sp
 800f300:	f000 f902 	bl	800f508 <_fstat_r>
 800f304:	2800      	cmp	r0, #0
 800f306:	dbf1      	blt.n	800f2ec <__swhatbuf_r+0x12>
 800f308:	9a01      	ldr	r2, [sp, #4]
 800f30a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f30e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f312:	425a      	negs	r2, r3
 800f314:	415a      	adcs	r2, r3
 800f316:	602a      	str	r2, [r5, #0]
 800f318:	e7ee      	b.n	800f2f8 <__swhatbuf_r+0x1e>
 800f31a:	2340      	movs	r3, #64	; 0x40
 800f31c:	2000      	movs	r0, #0
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	b016      	add	sp, #88	; 0x58
 800f322:	bd70      	pop	{r4, r5, r6, pc}

0800f324 <__smakebuf_r>:
 800f324:	898b      	ldrh	r3, [r1, #12]
 800f326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f328:	079d      	lsls	r5, r3, #30
 800f32a:	4606      	mov	r6, r0
 800f32c:	460c      	mov	r4, r1
 800f32e:	d507      	bpl.n	800f340 <__smakebuf_r+0x1c>
 800f330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f334:	6023      	str	r3, [r4, #0]
 800f336:	6123      	str	r3, [r4, #16]
 800f338:	2301      	movs	r3, #1
 800f33a:	6163      	str	r3, [r4, #20]
 800f33c:	b002      	add	sp, #8
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	466a      	mov	r2, sp
 800f342:	ab01      	add	r3, sp, #4
 800f344:	f7ff ffc9 	bl	800f2da <__swhatbuf_r>
 800f348:	9900      	ldr	r1, [sp, #0]
 800f34a:	4605      	mov	r5, r0
 800f34c:	4630      	mov	r0, r6
 800f34e:	f7fb fc25 	bl	800ab9c <_malloc_r>
 800f352:	b948      	cbnz	r0, 800f368 <__smakebuf_r+0x44>
 800f354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f358:	059a      	lsls	r2, r3, #22
 800f35a:	d4ef      	bmi.n	800f33c <__smakebuf_r+0x18>
 800f35c:	f023 0303 	bic.w	r3, r3, #3
 800f360:	f043 0302 	orr.w	r3, r3, #2
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	e7e3      	b.n	800f330 <__smakebuf_r+0xc>
 800f368:	4b0d      	ldr	r3, [pc, #52]	; (800f3a0 <__smakebuf_r+0x7c>)
 800f36a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	6020      	str	r0, [r4, #0]
 800f370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f374:	81a3      	strh	r3, [r4, #12]
 800f376:	9b00      	ldr	r3, [sp, #0]
 800f378:	6120      	str	r0, [r4, #16]
 800f37a:	6163      	str	r3, [r4, #20]
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	b15b      	cbz	r3, 800f398 <__smakebuf_r+0x74>
 800f380:	4630      	mov	r0, r6
 800f382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f386:	f000 f8d1 	bl	800f52c <_isatty_r>
 800f38a:	b128      	cbz	r0, 800f398 <__smakebuf_r+0x74>
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	f023 0303 	bic.w	r3, r3, #3
 800f392:	f043 0301 	orr.w	r3, r3, #1
 800f396:	81a3      	strh	r3, [r4, #12]
 800f398:	89a0      	ldrh	r0, [r4, #12]
 800f39a:	4305      	orrs	r5, r0
 800f39c:	81a5      	strh	r5, [r4, #12]
 800f39e:	e7cd      	b.n	800f33c <__smakebuf_r+0x18>
 800f3a0:	0800f139 	.word	0x0800f139

0800f3a4 <_malloc_usable_size_r>:
 800f3a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3a8:	1f18      	subs	r0, r3, #4
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	bfbc      	itt	lt
 800f3ae:	580b      	ldrlt	r3, [r1, r0]
 800f3b0:	18c0      	addlt	r0, r0, r3
 800f3b2:	4770      	bx	lr

0800f3b4 <_raise_r>:
 800f3b4:	291f      	cmp	r1, #31
 800f3b6:	b538      	push	{r3, r4, r5, lr}
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	d904      	bls.n	800f3c8 <_raise_r+0x14>
 800f3be:	2316      	movs	r3, #22
 800f3c0:	6003      	str	r3, [r0, #0]
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3ca:	b112      	cbz	r2, 800f3d2 <_raise_r+0x1e>
 800f3cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3d0:	b94b      	cbnz	r3, 800f3e6 <_raise_r+0x32>
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f830 	bl	800f438 <_getpid_r>
 800f3d8:	462a      	mov	r2, r5
 800f3da:	4601      	mov	r1, r0
 800f3dc:	4620      	mov	r0, r4
 800f3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e2:	f000 b817 	b.w	800f414 <_kill_r>
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d00a      	beq.n	800f400 <_raise_r+0x4c>
 800f3ea:	1c59      	adds	r1, r3, #1
 800f3ec:	d103      	bne.n	800f3f6 <_raise_r+0x42>
 800f3ee:	2316      	movs	r3, #22
 800f3f0:	6003      	str	r3, [r0, #0]
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	e7e7      	b.n	800f3c6 <_raise_r+0x12>
 800f3f6:	2400      	movs	r4, #0
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3fe:	4798      	blx	r3
 800f400:	2000      	movs	r0, #0
 800f402:	e7e0      	b.n	800f3c6 <_raise_r+0x12>

0800f404 <raise>:
 800f404:	4b02      	ldr	r3, [pc, #8]	; (800f410 <raise+0xc>)
 800f406:	4601      	mov	r1, r0
 800f408:	6818      	ldr	r0, [r3, #0]
 800f40a:	f7ff bfd3 	b.w	800f3b4 <_raise_r>
 800f40e:	bf00      	nop
 800f410:	2000020c 	.word	0x2000020c

0800f414 <_kill_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	2300      	movs	r3, #0
 800f418:	4d06      	ldr	r5, [pc, #24]	; (800f434 <_kill_r+0x20>)
 800f41a:	4604      	mov	r4, r0
 800f41c:	4608      	mov	r0, r1
 800f41e:	4611      	mov	r1, r2
 800f420:	602b      	str	r3, [r5, #0]
 800f422:	f7f1 ffa8 	bl	8001376 <_kill>
 800f426:	1c43      	adds	r3, r0, #1
 800f428:	d102      	bne.n	800f430 <_kill_r+0x1c>
 800f42a:	682b      	ldr	r3, [r5, #0]
 800f42c:	b103      	cbz	r3, 800f430 <_kill_r+0x1c>
 800f42e:	6023      	str	r3, [r4, #0]
 800f430:	bd38      	pop	{r3, r4, r5, pc}
 800f432:	bf00      	nop
 800f434:	20001c6c 	.word	0x20001c6c

0800f438 <_getpid_r>:
 800f438:	f7f1 bf96 	b.w	8001368 <_getpid>

0800f43c <__sread>:
 800f43c:	b510      	push	{r4, lr}
 800f43e:	460c      	mov	r4, r1
 800f440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f444:	f000 f894 	bl	800f570 <_read_r>
 800f448:	2800      	cmp	r0, #0
 800f44a:	bfab      	itete	ge
 800f44c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f44e:	89a3      	ldrhlt	r3, [r4, #12]
 800f450:	181b      	addge	r3, r3, r0
 800f452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f456:	bfac      	ite	ge
 800f458:	6563      	strge	r3, [r4, #84]	; 0x54
 800f45a:	81a3      	strhlt	r3, [r4, #12]
 800f45c:	bd10      	pop	{r4, pc}

0800f45e <__swrite>:
 800f45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f462:	461f      	mov	r7, r3
 800f464:	898b      	ldrh	r3, [r1, #12]
 800f466:	4605      	mov	r5, r0
 800f468:	05db      	lsls	r3, r3, #23
 800f46a:	460c      	mov	r4, r1
 800f46c:	4616      	mov	r6, r2
 800f46e:	d505      	bpl.n	800f47c <__swrite+0x1e>
 800f470:	2302      	movs	r3, #2
 800f472:	2200      	movs	r2, #0
 800f474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f478:	f000 f868 	bl	800f54c <_lseek_r>
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	4632      	mov	r2, r6
 800f480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f484:	81a3      	strh	r3, [r4, #12]
 800f486:	4628      	mov	r0, r5
 800f488:	463b      	mov	r3, r7
 800f48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f492:	f000 b817 	b.w	800f4c4 <_write_r>

0800f496 <__sseek>:
 800f496:	b510      	push	{r4, lr}
 800f498:	460c      	mov	r4, r1
 800f49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49e:	f000 f855 	bl	800f54c <_lseek_r>
 800f4a2:	1c43      	adds	r3, r0, #1
 800f4a4:	89a3      	ldrh	r3, [r4, #12]
 800f4a6:	bf15      	itete	ne
 800f4a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4b2:	81a3      	strheq	r3, [r4, #12]
 800f4b4:	bf18      	it	ne
 800f4b6:	81a3      	strhne	r3, [r4, #12]
 800f4b8:	bd10      	pop	{r4, pc}

0800f4ba <__sclose>:
 800f4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4be:	f000 b813 	b.w	800f4e8 <_close_r>
	...

0800f4c4 <_write_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4d05      	ldr	r5, [pc, #20]	; (800f4e4 <_write_r+0x20>)
 800f4d0:	602a      	str	r2, [r5, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	f7f1 ff86 	bl	80013e4 <_write>
 800f4d8:	1c43      	adds	r3, r0, #1
 800f4da:	d102      	bne.n	800f4e2 <_write_r+0x1e>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	b103      	cbz	r3, 800f4e2 <_write_r+0x1e>
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	bd38      	pop	{r3, r4, r5, pc}
 800f4e4:	20001c6c 	.word	0x20001c6c

0800f4e8 <_close_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	4d05      	ldr	r5, [pc, #20]	; (800f504 <_close_r+0x1c>)
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f1 ff92 	bl	800141c <_close>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_close_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_close_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20001c6c 	.word	0x20001c6c

0800f508 <_fstat_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	2300      	movs	r3, #0
 800f50c:	4d06      	ldr	r5, [pc, #24]	; (800f528 <_fstat_r+0x20>)
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	4611      	mov	r1, r2
 800f514:	602b      	str	r3, [r5, #0]
 800f516:	f7f1 ff8c 	bl	8001432 <_fstat>
 800f51a:	1c43      	adds	r3, r0, #1
 800f51c:	d102      	bne.n	800f524 <_fstat_r+0x1c>
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	b103      	cbz	r3, 800f524 <_fstat_r+0x1c>
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	bd38      	pop	{r3, r4, r5, pc}
 800f526:	bf00      	nop
 800f528:	20001c6c 	.word	0x20001c6c

0800f52c <_isatty_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	2300      	movs	r3, #0
 800f530:	4d05      	ldr	r5, [pc, #20]	; (800f548 <_isatty_r+0x1c>)
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	602b      	str	r3, [r5, #0]
 800f538:	f7f1 ff8a 	bl	8001450 <_isatty>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_isatty_r+0x1a>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_isatty_r+0x1a>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	20001c6c 	.word	0x20001c6c

0800f54c <_lseek_r>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4604      	mov	r4, r0
 800f550:	4608      	mov	r0, r1
 800f552:	4611      	mov	r1, r2
 800f554:	2200      	movs	r2, #0
 800f556:	4d05      	ldr	r5, [pc, #20]	; (800f56c <_lseek_r+0x20>)
 800f558:	602a      	str	r2, [r5, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	f7f1 ff82 	bl	8001464 <_lseek>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_lseek_r+0x1e>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	b103      	cbz	r3, 800f56a <_lseek_r+0x1e>
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	20001c6c 	.word	0x20001c6c

0800f570 <_read_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	2200      	movs	r2, #0
 800f57a:	4d05      	ldr	r5, [pc, #20]	; (800f590 <_read_r+0x20>)
 800f57c:	602a      	str	r2, [r5, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	f7f1 ff13 	bl	80013aa <_read>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	d102      	bne.n	800f58e <_read_r+0x1e>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	b103      	cbz	r3, 800f58e <_read_r+0x1e>
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	20001c6c 	.word	0x20001c6c

0800f594 <_init>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr

0800f5a0 <_fini>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr
