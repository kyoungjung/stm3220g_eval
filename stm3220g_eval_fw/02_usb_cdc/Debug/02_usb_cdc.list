
02_usb_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800bc10  0800bc10  0001bc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c134  0800c134  0002037c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c13c  0800c13c  0002037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c140  0800c140  0001c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  0800c144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001308  2000037c  0800c4c0  0002037c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001684  0800c4c0  00021684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4c7  00000000  00000000  000203a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003012  00000000  00000000  0002e86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d5f  00000000  00000000  00033068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015994  00000000  00000000  00056dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd0d8  00000000  00000000  0006c75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  00129884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000037c 	.word	0x2000037c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bbf4 	.word	0x0800bbf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000380 	.word	0x20000380
 80001c4:	0800bbf4 	.word	0x0800bbf4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b9ae 	b.w	8000f54 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f83e 	bl	8000c80 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2lz>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4605      	mov	r5, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	f7ff ff09 	bl	8000a34 <__aeabi_dcmplt>
 8000c22:	b928      	cbnz	r0, 8000c30 <__aeabi_d2lz+0x20>
 8000c24:	4628      	mov	r0, r5
 8000c26:	4621      	mov	r1, r4
 8000c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c2c:	f000 b80a 	b.w	8000c44 <__aeabi_d2ulz>
 8000c30:	4628      	mov	r0, r5
 8000c32:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c36:	f000 f805 	bl	8000c44 <__aeabi_d2ulz>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	bd38      	pop	{r3, r4, r5, pc}
 8000c42:	bf00      	nop

08000c44 <__aeabi_d2ulz>:
 8000c44:	b5d0      	push	{r4, r6, r7, lr}
 8000c46:	2200      	movs	r2, #0
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <__aeabi_d2ulz+0x34>)
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f7ff fc7f 	bl	8000550 <__aeabi_dmul>
 8000c52:	f7ff ff55 	bl	8000b00 <__aeabi_d2uiz>
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fc00 	bl	800045c <__aeabi_ui2d>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <__aeabi_d2ulz+0x38>)
 8000c60:	f7ff fc76 	bl	8000550 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fab8 	bl	80001e0 <__aeabi_dsub>
 8000c70:	f7ff ff46 	bl	8000b00 <__aeabi_d2uiz>
 8000c74:	4621      	mov	r1, r4
 8000c76:	bdd0      	pop	{r4, r6, r7, pc}
 8000c78:	3df00000 	.word	0x3df00000
 8000c7c:	41f00000 	.word	0x41f00000

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9e08      	ldr	r6, [sp, #32]
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14d      	bne.n	8000d2c <__udivmoddi4+0xac>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4694      	mov	ip, r2
 8000c94:	d968      	bls.n	8000d68 <__udivmoddi4+0xe8>
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	b152      	cbz	r2, 8000cb2 <__udivmoddi4+0x32>
 8000c9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca0:	f1c2 0120 	rsb	r1, r2, #32
 8000ca4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	ea41 0803 	orr.w	r8, r1, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cb6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	fb01 8817 	mls	r8, r1, r7, r8
 8000cc2:	fb07 f00e 	mul.w	r0, r7, lr
 8000cc6:	0c23      	lsrs	r3, r4, #16
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d90a      	bls.n	8000ce6 <__udivmoddi4+0x66>
 8000cd0:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd4:	f107 35ff 	add.w	r5, r7, #4294967295
 8000cd8:	f080 811e 	bcs.w	8000f18 <__udivmoddi4+0x298>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f240 811b 	bls.w	8000f18 <__udivmoddi4+0x298>
 8000ce2:	3f02      	subs	r7, #2
 8000ce4:	4463      	add	r3, ip
 8000ce6:	1a1b      	subs	r3, r3, r0
 8000ce8:	fbb3 f0f1 	udiv	r0, r3, r1
 8000cec:	fb01 3310 	mls	r3, r1, r0, r3
 8000cf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf4:	b2a4      	uxth	r4, r4
 8000cf6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x94>
 8000cfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8109 	bcs.w	8000f1c <__udivmoddi4+0x29c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8106 	bls.w	8000f1c <__udivmoddi4+0x29c>
 8000d10:	4464      	add	r4, ip
 8000d12:	3802      	subs	r0, #2
 8000d14:	2100      	movs	r1, #0
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa8>
 8000d20:	2300      	movs	r3, #0
 8000d22:	40d4      	lsrs	r4, r2
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0xc2>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	f000 80ee 	beq.w	8000f12 <__udivmoddi4+0x292>
 8000d36:	2100      	movs	r1, #0
 8000d38:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d14a      	bne.n	8000de0 <__udivmoddi4+0x160>
 8000d4a:	42ab      	cmp	r3, r5
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd4>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80fc 	bhi.w	8000f4c <__udivmoddi4+0x2cc>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb65 0303 	sbc.w	r3, r5, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d0e2      	beq.n	8000d28 <__udivmoddi4+0xa8>
 8000d62:	e9c6 4800 	strd	r4, r8, [r6]
 8000d66:	e7df      	b.n	8000d28 <__udivmoddi4+0xa8>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xec>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 8091 	bne.w	8000e98 <__udivmoddi4+0x218>
 8000d76:	eba1 000c 	sub.w	r0, r1, ip
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d88:	fb07 0013 	mls	r0, r7, r3, r0
 8000d8c:	0c25      	lsrs	r5, r4, #16
 8000d8e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d92:	fb0e f003 	mul.w	r0, lr, r3
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x12c>
 8000d9a:	eb1c 0505 	adds.w	r5, ip, r5
 8000d9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x12a>
 8000da4:	42a8      	cmp	r0, r5
 8000da6:	f200 80ce 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000daa:	4643      	mov	r3, r8
 8000dac:	1a2d      	subs	r5, r5, r0
 8000dae:	fbb5 f0f7 	udiv	r0, r5, r7
 8000db2:	fb07 5510 	mls	r5, r7, r0, r5
 8000db6:	fb0e fe00 	mul.w	lr, lr, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x156>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x154>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80b6 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dde:	e79e      	b.n	8000d1e <__udivmoddi4+0x9e>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa25 fa07 	lsr.w	sl, r5, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fbba f8f9 	udiv	r8, sl, r9
 8000dfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e02:	408d      	lsls	r5, r1
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	431d      	orrs	r5, r3
 8000e0a:	fa00 f301 	lsl.w	r3, r0, r1
 8000e0e:	fb08 f00e 	mul.w	r0, r8, lr
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e18:	42a0      	cmp	r0, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2bc>
 8000e2c:	42a0      	cmp	r0, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2bc>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1a24      	subs	r4, r4, r0
 8000e3a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e3e:	fb09 4410 	mls	r4, r9, r0, r4
 8000e42:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e46:	b2ad      	uxth	r5, r5
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1e2>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e66:	fba0 9502 	umull	r9, r5, r0, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x2a4>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x2a0>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2d0>
 8000e7c:	ebb3 0208 	subs.w	r2, r3, r8
 8000e80:	eb64 040e 	sbc.w	r4, r4, lr
 8000e84:	fa22 f301 	lsr.w	r3, r2, r1
 8000e88:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8c:	431f      	orrs	r7, r3
 8000e8e:	40cc      	lsrs	r4, r1
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	2100      	movs	r1, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa8>
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	f1c2 0120 	rsb	r1, r2, #32
 8000ea0:	fa25 f301 	lsr.w	r3, r5, r1
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa20 f101 	lsr.w	r1, r0, r1
 8000eac:	4095      	lsls	r5, r2
 8000eae:	430d      	orrs	r5, r1
 8000eb0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000eb4:	fb07 3311 	mls	r3, r7, r1, r3
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	0c28      	lsrs	r0, r5, #16
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	fb01 f30e 	mul.w	r3, r1, lr
 8000ec6:	4283      	cmp	r3, r0
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x260>
 8000ece:	eb1c 0000 	adds.w	r0, ip, r0
 8000ed2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b8>
 8000ed8:	4283      	cmp	r3, r0
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b8>
 8000edc:	3902      	subs	r1, #2
 8000ede:	4460      	add	r0, ip
 8000ee0:	1ac0      	subs	r0, r0, r3
 8000ee2:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ee6:	fb07 0013 	mls	r0, r7, r3, r0
 8000eea:	b2ad      	uxth	r5, r5
 8000eec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ef0:	fb03 f00e 	mul.w	r0, r3, lr
 8000ef4:	42a8      	cmp	r0, r5
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x28a>
 8000ef8:	eb1c 0505 	adds.w	r5, ip, r5
 8000efc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2b0>
 8000f02:	42a8      	cmp	r0, r5
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2b0>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	4465      	add	r5, ip
 8000f0a:	1a28      	subs	r0, r5, r0
 8000f0c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0x104>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e707      	b.n	8000d28 <__udivmoddi4+0xa8>
 8000f18:	462f      	mov	r7, r5
 8000f1a:	e6e4      	b.n	8000ce6 <__udivmoddi4+0x66>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6f9      	b.n	8000d14 <__udivmoddi4+0x94>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f8>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f8>
 8000f30:	4643      	mov	r3, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x28a>
 8000f34:	4628      	mov	r0, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1e2>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x260>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b8>
 8000f40:	4464      	add	r4, ip
 8000f42:	3802      	subs	r0, #2
 8000f44:	e747      	b.n	8000dd6 <__udivmoddi4+0x156>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	4465      	add	r5, ip
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x12c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e706      	b.n	8000d5e <__udivmoddi4+0xde>
 8000f50:	4631      	mov	r1, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa8>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <apInit>:


#include "ap.h"

void apInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8000f5c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 fb05 	bl	8001570 <uartOpen>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <apMain>:

void apMain(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint32_t pre_baud;
  uint8_t rx_data;

  pre_time = millis();
 8000f72:	f000 f8ae 	bl	80010d2 <millis>
 8000f76:	60f8      	str	r0, [r7, #12]
  //초기에 설정된 baud 값을 저장한다.
  pre_baud = uartGetBaud(_DEF_UART1);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fb97 	bl	80016ac <uartGetBaud>
 8000f7e:	60b8      	str	r0, [r7, #8]

  while(1)
  {
    if(millis() - pre_time > 500)
 8000f80:	f000 f8a7 	bl	80010d2 <millis>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8e:	d905      	bls.n	8000f9c <apMain+0x30>
    {
      pre_time = millis();
 8000f90:	f000 f89f 	bl	80010d2 <millis>
 8000f94:	60f8      	str	r0, [r7, #12]
      ledToggle(_DEF_LED1);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fab8 	bl	800150c <ledToggle>
    }

    if(uartAvailable(_DEF_UART1) > 0)
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fb03 	bl	80015a8 <uartAvailable>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00a      	beq.n	8000fbe <apMain+0x52>
    {
      rx_data = uartRead(_DEF_UART1);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fb14 	bl	80015d6 <uartRead>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]

      uartPrintf(_DEF_UART1, "rx data : %c\r\n", rx_data);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <apMain+0x74>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 fb3f 	bl	800163c <uartPrintf>
    }
    //현재 설정한 baud가 이전에 설정된 baud와 다르면
    if(uartGetBaud(_DEF_UART1) != pre_baud)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 fb74 	bl	80016ac <uartGetBaud>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d0d9      	beq.n	8000f80 <apMain+0x14>
    {
      //현재 설정된 baud값을 저장
      pre_baud = uartGetBaud(_DEF_UART1);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fb6d 	bl	80016ac <uartGetBaud>
 8000fd2:	60b8      	str	r0, [r7, #8]
      //변경된 baud값을 알려준다.
      uartPrintf(_DEF_UART1, "changed baud : %d\r\n", pre_baud);
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	4903      	ldr	r1, [pc, #12]	; (8000fe4 <apMain+0x78>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fb2f 	bl	800163c <uartPrintf>
    if(millis() - pre_time > 500)
 8000fde:	e7cf      	b.n	8000f80 <apMain+0x14>
 8000fe0:	0800bc10 	.word	0x0800bc10
 8000fe4:	0800bc20 	.word	0x0800bc20

08000fe8 <bspInit>:

void SystemClock_Config(void);
void Error_Handler(void);

void bspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  HAL_Init();
 8000fee:	f000 fb7f 	bl	80016f0 <HAL_Init>
  SystemClock_Config();
 8000ff2:	f000 f875 	bl	80010e0 <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  //LED사용 Port Clock Enable
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <bspInit+0xcc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <bspInit+0xcc>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <bspInit+0xcc>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <bspInit+0xcc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <bspInit+0xcc>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <bspInit+0xcc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <bspInit+0xcc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <bspInit+0xcc>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <bspInit+0xcc>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
   * 다시 USB_DP핀을 입력으로 설정 해준다.
   * ==> 위와 같이 동작 시키면 PC에서 USB를 다시 인식할려는 동작을 수행한다.
   */

  //
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001060:	2311      	movs	r3, #17
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <bspInit+0xd0>)
 8001074:	f000 fcdc 	bl	8001a30 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <bspInit+0xd0>)
 8001080:	f000 fe74 	bl	8001d6c <HAL_GPIO_WritePin>
  delay(300);
 8001084:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001088:	f000 f818 	bl	80010bc <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <bspInit+0xd0>)
 8001094:	f000 fe6a 	bl	8001d6c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <bspInit+0xd0>)
 80010a4:	f000 fcc4 	bl	8001a30 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80010a8:	f005 faf2 	bl	8006690 <MX_USB_DEVICE_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <delay>:

void delay(uint32_t ms)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fb81 	bl	80017cc <HAL_Delay>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <millis>:

uint32_t millis(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010d6:	f000 fb6f 	bl	80017b8 <HAL_GetTick>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}

080010e0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b092      	sub	sp, #72	; 0x48
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 f916 	bl	8007320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001114:	2314      	movs	r3, #20
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001120:	2305      	movs	r3, #5
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f001 ffa5 	bl	8003078 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001134:	f000 f81a 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2103      	movs	r1, #3
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f9dd 	bl	8003514 <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001160:	f000 f804 	bl	800116c <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3748      	adds	r7, #72	; 0x48
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Error_Handler>:

void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x48>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x48>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x48>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_MspInit+0x48>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_MspInit+0x48>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_MspInit+0x48>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40023800 	.word	0x40023800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120a:	f000 fac3 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <OTG_FS_IRQHandler+0x10>)
 800121a:	f000 ff17 	bl	800204c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20001274 	.word	0x20001274

08001228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <_kill>:

int _kill(int pid, int sig)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001240:	f006 f834 	bl	80072ac <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	2216      	movs	r2, #22
 8001248:	601a      	str	r2, [r3, #0]
  return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_exit>:

void _exit (int status)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800125e:	f04f 31ff 	mov.w	r1, #4294967295
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffe7 	bl	8001236 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001268:	e7fe      	b.n	8001268 <_exit+0x12>

0800126a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e00a      	b.n	8001292 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127c:	f3af 8000 	nop.w
 8001280:	4601      	mov	r1, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	dbf0      	blt.n	800127c <_read+0x12>
  }

  return len;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e009      	b.n	80012ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbf1      	blt.n	80012b6 <_write+0x12>
  }
  return len;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_close>:

int _close(int file)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001302:	605a      	str	r2, [r3, #4]
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <_isatty>:

int _isatty(int file)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f005 ff9e 	bl	80072ac <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000398 	.word	0x20000398
 80013a4:	20001688 	.word	0x20001688

080013a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013de:	f7ff ffe3 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f005 ff69 	bl	80072b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f005 ff55 	bl	8007294 <main>
  bx  lr
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 80013f8:	0800c144 	.word	0x0800c144
  ldr r2, =_sbss
 80013fc:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 8001400:	20001684 	.word	0x20001684

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <ledInit>:
        {GPIOC, GPIO_PIN_7, GPIO_PIN_SET, GPIO_PIN_RESET}
    };


bool ledInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  bool ret = true;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  //LED사용 Port Clock Enable
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <ledInit+0xc4>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <ledInit+0xc4>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <ledInit+0xc4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <ledInit+0xc4>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <ledInit+0xc4>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <ledInit+0xc4>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <ledInit+0xc4>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <ledInit+0xc4>)
 8001466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <ledInit+0xc4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  //LED 사용 핀 출력 설정
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]

  for(int i=0;i<LED_MAX_CH;i++)
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e017      	b.n	80014ba <ledInit+0xb2>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <ledInit+0xc8>)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	889b      	ldrh	r3, [r3, #4]
 8001494:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <ledInit+0xc8>)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fac3 	bl	8001a30 <HAL_GPIO_Init>

    ledOff(i);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f810 	bl	80014d4 <ledOff>
  for(int i=0;i<LED_MAX_CH;i++)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b03      	cmp	r3, #3
 80014be:	dde4      	ble.n	800148a <ledInit+0x82>
  }

  return ret;
 80014c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	20000004 	.word	0x20000004

080014d4 <ledOff>:
{
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <ledOff+0x34>)
 80014e2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <ledOff+0x34>)
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	8899      	ldrh	r1, [r3, #4]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <ledOff+0x34>)
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	79db      	ldrb	r3, [r3, #7]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f000 fc36 	bl	8001d6c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000004 	.word	0x20000004

0800150c <ledToggle>:

void ledToggle(uint8_t ch)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <ledToggle+0x2c>)
 800151a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4905      	ldr	r1, [pc, #20]	; (8001538 <ledToggle+0x2c>)
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	889b      	ldrh	r3, [r3, #4]
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 fc36 	bl	8001d9c <HAL_GPIO_TogglePin>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000004 	.word	0x20000004

0800153c <uartInit>:
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);

bool uartInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  bool ret = true;
 8001542:	2301      	movs	r3, #1
 8001544:	71bb      	strb	r3, [r7, #6]

  for(uint8_t i=0;i<UART_MAX_CH;i++)
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e006      	b.n	800155a <uartInit+0x1e>
  {
    is_open[i] = false;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <uartInit+0x30>)
 8001550:	2100      	movs	r1, #0
 8001552:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<UART_MAX_CH;i++)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3301      	adds	r3, #1
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d9f5      	bls.n	800154c <uartInit+0x10>
  }

  return ret;
 8001560:	79bb      	ldrb	r3, [r7, #6]
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	2000039c 	.word	0x2000039c

08001570 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <uartOpen+0x1a>
 8001586:	2b01      	cmp	r3, #1
      is_open[ch] = true;

      ret = true;
      break;
    case _DEF_UART2:
      break;
 8001588:	e006      	b.n	8001598 <uartOpen+0x28>
      is_open[ch] = true;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <uartOpen+0x34>)
 800158e:	2101      	movs	r1, #1
 8001590:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
      break;
 8001596:	bf00      	nop
  }

  return ret;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000039c 	.word	0x2000039c

080015a8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <uartAvailable+0x1a>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d004      	beq.n	80015ca <uartAvailable+0x22>
      break;

    case _DEF_UART2:
      break;

    default:break;
 80015c0:	e004      	b.n	80015cc <uartAvailable+0x24>
      ret = cdcAvailable();
 80015c2:	f005 f895 	bl	80066f0 <cdcAvailable>
 80015c6:	60f8      	str	r0, [r7, #12]
      break;
 80015c8:	e000      	b.n	80015cc <uartAvailable+0x24>
      break;
 80015ca:	bf00      	nop
  }

  return ret;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <uartRead+0x1a>
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <uartRead+0x24>
      break;

    case _DEF_UART2:
      break;

    default:break;
 80015ee:	e005      	b.n	80015fc <uartRead+0x26>
      ret = cdcRead();
 80015f0:	f005 f89c 	bl	800672c <cdcRead>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e000      	b.n	80015fc <uartRead+0x26>
      break;
 80015fa:	bf00      	nop
  }

  return ret;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  switch(ch)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <uartWrite+0x1e>
 800161e:	2b01      	cmp	r3, #1
 8001620:	d006      	beq.n	8001630 <uartWrite+0x2a>
      break;

    case _DEF_UART2:
       break;

    default:break;
 8001622:	e006      	b.n	8001632 <uartWrite+0x2c>
      ret = cdcWrite(p_data, length);
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f005 f8d2 	bl	80067d0 <cdcWrite>
 800162c:	6178      	str	r0, [r7, #20]
      break;
 800162e:	e000      	b.n	8001632 <uartWrite+0x2c>
       break;
 8001630:	bf00      	nop
  }
  return ret;
 8001632:	697b      	ldr	r3, [r7, #20]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800163c:	b40e      	push	{r1, r2, r3}
 800163e:	b580      	push	{r7, lr}
 8001640:	b0c7      	sub	sp, #284	; 0x11c
 8001642:	af00      	add	r7, sp, #0
 8001644:	4602      	mov	r2, r0
 8001646:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800164a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800164e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001650:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001654:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800165e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001666:	f107 0010 	add.w	r0, r7, #16
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	f007 fc94 	bl	8008fa0 <vsniprintf>
 8001678:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800167c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001680:	f107 0110 	add.w	r1, r7, #16
 8001684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001688:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffb9 	bl	8001606 <uartWrite>
 8001694:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8001698:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800169c:	4618      	mov	r0, r3
 800169e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a8:	b003      	add	sp, #12
 80016aa:	4770      	bx	lr

080016ac <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <uartGetBaud+0x1a>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d004      	beq.n	80016ce <uartGetBaud+0x22>
      break;

    case _DEF_UART2:
      break;

    default:break;
 80016c4:	e004      	b.n	80016d0 <uartGetBaud+0x24>
      ret = cdcGetBaud();
 80016c6:	f005 f8ab 	bl	8006820 <cdcGetBaud>
 80016ca:	60f8      	str	r0, [r7, #12]
      break;
 80016cc:	e000      	b.n	80016d0 <uartGetBaud+0x24>
      break;
 80016ce:	bf00      	nop
  }


  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  bspInit();
 80016de:	f7ff fc83 	bl	8000fe8 <bspInit>
  ledInit();
 80016e2:	f7ff fe91 	bl	8001408 <ledInit>
  uartInit();
 80016e6:	f7ff ff29 	bl	800153c <uartInit>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f947 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fd28 	bl	8001178 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f95f 	bl	8001a16 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f927 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000028 	.word	0x20000028
 8001790:	20000024 	.word	0x20000024

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x1c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x20>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <HAL_IncTick+0x20>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000028 	.word	0x20000028
 80017b4:	200003a0 	.word	0x200003a0

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_GetTick+0x10>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	200003a0 	.word	0x200003a0

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fff0 	bl	80017b8 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffe0 	bl	80017b8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000028 	.word	0x20000028

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4906      	ldr	r1, [pc, #24]	; (80018ac <__NVIC_EnableIRQ+0x34>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff90 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff2d 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff42 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff35 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e16f      	b.n	8001d20 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8161 	beq.w	8001d1a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0201 	and.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0203 	and.w	r2, r3, #3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80bb 	beq.w	8001d1a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc0:	4a5f      	ldr	r2, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x310>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x314>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d031      	beq.n	8001c50 <HAL_GPIO_Init+0x220>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_GPIO_Init+0x318>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d02b      	beq.n	8001c4c <HAL_GPIO_Init+0x21c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_GPIO_Init+0x31c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d025      	beq.n	8001c48 <HAL_GPIO_Init+0x218>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x214>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x210>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x20c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x208>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_GPIO_Init+0x334>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x200>
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	e010      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c30:	2309      	movs	r3, #9
 8001c32:	e00e      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c34:	2307      	movs	r3, #7
 8001c36:	e00c      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c38:	2306      	movs	r3, #6
 8001c3a:	e00a      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	e008      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c50:	2300      	movs	r3, #0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c64:	4936      	ldr	r1, [pc, #216]	; (8001d40 <HAL_GPIO_Init+0x310>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c96:	4a34      	ldr	r2, [pc, #208]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cc0:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f47f ae88 	bne.w	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43d9      	mvns	r1, r3
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd0:	b08f      	sub	sp, #60	; 0x3c
 8001dd2:	af0a      	add	r7, sp, #40	; 0x28
 8001dd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e10f      	b.n	8002000 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f004 ff4c 	bl	8006c98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fe3e 	bl	8003aa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	687e      	ldr	r6, [r7, #4]
 8001e2c:	466d      	mov	r5, sp
 8001e2e:	f106 0410 	add.w	r4, r6, #16
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e42:	1d33      	adds	r3, r6, #4
 8001e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f001 fd20 	bl	800388c <USB_CoreInit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0d0      	b.n	8002000 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fe2b 	bl	8003ac0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e04a      	b.n	8001f06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333d      	adds	r3, #61	; 0x3d
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	333c      	adds	r3, #60	; 0x3c
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	b298      	uxth	r0, r3
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3342      	adds	r3, #66	; 0x42
 8001eac:	4602      	mov	r2, r0
 8001eae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	333f      	adds	r3, #63	; 0x3f
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3344      	adds	r3, #68	; 0x44
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3348      	adds	r3, #72	; 0x48
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3350      	adds	r3, #80	; 0x50
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	3301      	adds	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3af      	bcc.n	8001e70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e044      	b.n	8001fa0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3b5      	bcc.n	8001f16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	687e      	ldr	r6, [r7, #4]
 8001fb2:	466d      	mov	r5, sp
 8001fb4:	f106 0410 	add.w	r4, r6, #16
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc8:	1d33      	adds	r3, r6, #4
 8001fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	f001 fdc3 	bl	8003b58 <USB_DevInit>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e00d      	b.n	8002000 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fe34 	bl	8004c66 <USB_DevDisconnect>

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002008 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_PCD_Start+0x16>
 800201a:	2302      	movs	r3, #2
 800201c:	e012      	b.n	8002044 <HAL_PCD_Start+0x3c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f001 fd28 	bl	8003a80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fdf6 	bl	8004c26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b08d      	sub	sp, #52	; 0x34
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fead 	bl	8004dc2 <USB_GetMode>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 838f 	bne.w	800278e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fe16 	bl	8004ca6 <USB_ReadInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8385 	beq.w	800278c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fe0d 	bl	8004ca6 <USB_ReadInterrupts>
 800208c:	4603      	mov	r3, r0
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f002 0202 	and.w	r2, r2, #2
 80020a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fdfb 	bl	8004ca6 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d161      	bne.n	800217e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0210 	bic.w	r2, r2, #16
 80020c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	0c5b      	lsrs	r3, r3, #17
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d124      	bne.n	8002140 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d035      	beq.n	800216e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800210c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002110:	b29b      	uxth	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	6a38      	ldr	r0, [r7, #32]
 8002116:	f002 fc38 	bl	800498a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002126:	441a      	add	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002138:	441a      	add	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	e016      	b.n	800216e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	0c5b      	lsrs	r3, r3, #17
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	2b06      	cmp	r3, #6
 800214a:	d110      	bne.n	800216e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002152:	2208      	movs	r2, #8
 8002154:	4619      	mov	r1, r3
 8002156:	6a38      	ldr	r0, [r7, #32]
 8002158:	f002 fc17 	bl	800498a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002168:	441a      	add	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0210 	orr.w	r2, r2, #16
 800217c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fd8f 	bl	8004ca6 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002192:	d16e      	bne.n	8002272 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fd94 	bl	8004cca <USB_ReadDevAllOutEpInterrupt>
 80021a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021a4:	e062      	b.n	800226c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d057      	beq.n	8002260 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fdb7 	bl	8004d2e <USB_ReadDevOutEPInterrupt>
 80021c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00c      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fda1 	bl	8002d28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	2308      	movs	r3, #8
 8002200:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fe9b 	bl	8002f40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	2310      	movs	r3, #16
 8002224:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	2320      	movs	r3, #32
 8002240:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d199      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fd15 	bl	8004ca6 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002286:	f040 80c0 	bne.w	800240a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fd34 	bl	8004cfc <USB_ReadDevAllInEpInterrupt>
 8002294:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800229a:	e0b2      	b.n	8002402 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80a7 	beq.w	80023f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fd58 	bl	8004d68 <USB_ReadDevInEPInterrupt>
 80022b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d057      	beq.n	8002374 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	2201      	movs	r2, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69f9      	ldr	r1, [r7, #28]
 80022e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e4:	4013      	ands	r3, r2
 80022e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f4:	461a      	mov	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d132      	bne.n	8002368 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3348      	adds	r3, #72	; 0x48
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4403      	add	r3, r0
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4419      	add	r1, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4403      	add	r3, r0
 8002336:	3348      	adds	r3, #72	; 0x48
 8002338:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d113      	bne.n	8002368 <HAL_PCD_IRQHandler+0x31c>
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3350      	adds	r3, #80	; 0x50
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002360:	461a      	mov	r2, r3
 8002362:	2101      	movs	r1, #1
 8002364:	f002 fd5c 	bl	8004e20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f004 fd13 	bl	8006d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238a:	461a      	mov	r2, r3
 800238c:	2308      	movs	r3, #8
 800238e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	2310      	movs	r3, #16
 80023aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c2:	461a      	mov	r2, r3
 80023c4:	2340      	movs	r3, #64	; 0x40
 80023c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023de:	461a      	mov	r2, r3
 80023e0:	2302      	movs	r3, #2
 80023e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fc0c 	bl	8002c0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3301      	adds	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	f47f af49 	bne.w	800229c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fc49 	bl	8004ca6 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800241a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800241e:	d114      	bne.n	800244a <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f004 fd27 	bl	8006e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fc29 	bl	8004ca6 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800245e:	d112      	bne.n	8002486 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f004 fce3 	bl	8006e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002484:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fc0b 	bl	8004ca6 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	f040 80c7 	bne.w	800262c <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2110      	movs	r1, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fcb1 	bl	8003e20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	e056      	b.n	8002572 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	440a      	add	r2, r1
 800250e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	461a      	mov	r2, r3
 8002526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800252a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	0151      	lsls	r1, r2, #5
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	440a      	add	r2, r1
 8002542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800254a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255c:	0151      	lsls	r1, r2, #5
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	440a      	add	r2, r1
 8002562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800256a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	3301      	adds	r3, #1
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d3a3      	bcc.n	80024c4 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800258e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a8:	f043 030b 	orr.w	r3, r3, #11
 80025ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025be:	f043 030b 	orr.w	r3, r3, #11
 80025c2:	6453      	str	r3, [r2, #68]	; 0x44
 80025c4:	e015      	b.n	80025f2 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f043 030b 	orr.w	r3, r3, #11
 80025f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002600:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002604:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002616:	461a      	mov	r2, r3
 8002618:	f002 fc02 	bl	8004e20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800262a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fb38 	bl	8004ca6 <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002640:	d124      	bne.n	800268c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fbc8 	bl	8004ddc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fc41 	bl	8003ed8 <USB_GetDevSpeed>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681c      	ldr	r4, [r3, #0]
 8002662:	f001 f909 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8002666:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	4620      	mov	r0, r4
 8002672:	f001 f963 	bl	800393c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f004 fbb7 	bl	8006dea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800268a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fb08 	bl	8004ca6 <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b08      	cmp	r3, #8
 800269e:	d10a      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f004 fb94 	bl	8006dce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 0208 	and.w	r2, r2, #8
 80026b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 faf3 	bl	8004ca6 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d10f      	bne.n	80026ec <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f004 fbf6 	bl	8006ec8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fad8 	bl	8004ca6 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002700:	d10f      	bne.n	8002722 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f004 fbc9 	bl	8006ea4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fabd 	bl	8004ca6 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d10a      	bne.n	800274e <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f004 fbd7 	bl	8006eec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 faa7 	bl	8004ca6 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b04      	cmp	r3, #4
 8002760:	d115      	bne.n	800278e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f004 fbc7 	bl	8006f08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e000      	b.n	800278e <HAL_PCD_IRQHandler+0x742>
      return;
 800278c:	bf00      	nop
    }
  }
}
 800278e:	3734      	adds	r7, #52	; 0x34
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_SetAddress+0x1a>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e013      	b.n	80027d6 <HAL_PCD_SetAddress+0x42>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fa08 	bl	8004bdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	4608      	mov	r0, r1
 80027e8:	4611      	mov	r1, r2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	460b      	mov	r3, r1
 80027f2:	803b      	strh	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da0f      	bge.n	8002824 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3338      	adds	r3, #56	; 0x38
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	705a      	strb	r2, [r3, #1]
 8002822:	e00f      	b.n	8002844 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002850:	883a      	ldrh	r2, [r7, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	78ba      	ldrb	r2, [r7, #2]
 800285a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d102      	bne.n	800287a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_Open+0xaa>
 8002884:	2302      	movs	r3, #2
 8002886:	e00e      	b.n	80028a6 <HAL_PCD_EP_Open+0xc8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fb42 	bl	8003f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da0f      	bge.n	80028e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	705a      	strb	r2, [r3, #1]
 80028e0:	e00f      	b.n	8002902 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_PCD_EP_Close+0x6e>
 8002918:	2302      	movs	r3, #2
 800291a:	e00e      	b.n	800293a <HAL_PCD_EP_Close+0x8c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fb7e 	bl	800402c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	460b      	mov	r3, r1
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	b2da      	uxtb	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d102      	bne.n	800299e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	f001 fe59 	bl	800466c <USB_EP0StartXfer>
 80029ba:	e008      	b.n	80029ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6979      	ldr	r1, [r7, #20]
 80029ca:	f001 fc0b 	bl	80041e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	460b      	mov	r3, r1
 8002a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3338      	adds	r3, #56	; 0x38
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2201      	movs	r2, #1
 8002a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	6979      	ldr	r1, [r7, #20]
 8002a78:	f001 fdf8 	bl	800466c <USB_EP0StartXfer>
 8002a7c:	e008      	b.n	8002a90 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6979      	ldr	r1, [r7, #20]
 8002a8c:	f001 fbaa 	bl	80041e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d901      	bls.n	8002ab8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e050      	b.n	8002b5a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da0f      	bge.n	8002ae0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	3338      	adds	r3, #56	; 0x38
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	705a      	strb	r2, [r3, #1]
 8002ade:	e00d      	b.n	8002afc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_PCD_EP_SetStall+0x82>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e01e      	b.n	8002b5a <HAL_PCD_EP_SetStall+0xc0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 ff84 	bl	8004a38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f002 f968 	bl	8004e20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 020f 	and.w	r2, r3, #15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d901      	bls.n	8002b80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e042      	b.n	8002c06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da0f      	bge.n	8002ba8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3338      	adds	r3, #56	; 0x38
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	705a      	strb	r2, [r3, #1]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_EP_ClrStall+0x86>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e00e      	b.n	8002c06 <HAL_PCD_EP_ClrStall+0xa4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 ff8b 	bl	8004b12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08a      	sub	sp, #40	; 0x28
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3338      	adds	r3, #56	; 0x38
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d901      	bls.n	8002c46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e06c      	b.n	8002d20 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d902      	bls.n	8002c62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3303      	adds	r3, #3
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c6a:	e02b      	b.n	8002cc4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d902      	bls.n	8002c88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3303      	adds	r3, #3
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f001 fe32 	bl	8004910 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d809      	bhi.n	8002cee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d203      	bcs.n	8002cee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1be      	bne.n	8002c6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d811      	bhi.n	8002d1e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	6939      	ldr	r1, [r7, #16]
 8002d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	333c      	adds	r3, #60	; 0x3c
 8002d40:	3304      	adds	r3, #4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 80a0 	bne.w	8002ea0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a72      	ldr	r2, [pc, #456]	; (8002f38 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f240 80dd 	bls.w	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80d7 	beq.w	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	e0cb      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	2320      	movs	r3, #32
 8002db0:	6093      	str	r3, [r2, #8]
 8002db2:	e0bc      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80b7 	bne.w	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a5d      	ldr	r2, [pc, #372]	; (8002f38 <PCD_EP_OutXfrComplete_int+0x210>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d90f      	bls.n	8002de8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	461a      	mov	r2, r3
 8002de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de4:	6093      	str	r3, [r2, #8]
 8002de6:	e0a2      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dfa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	440b      	add	r3, r1
 8002e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e0e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4403      	add	r3, r0
 8002e1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e22:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4419      	add	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4403      	add	r3, r0
 8002e5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e60:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d114      	bne.n	8002e92 <PCD_EP_OutXfrComplete_int+0x16a>
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f001 ffc7 	bl	8004e20 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f003 ff63 	bl	8006d64 <HAL_PCD_DataOutStageCallback>
 8002e9e:	e046      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <PCD_EP_OutXfrComplete_int+0x214>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d124      	bne.n	8002ef2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	e032      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f003 ff3a 	bl	8006d64 <HAL_PCD_DataOutStageCallback>
 8002ef0:	e01d      	b.n	8002f2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d114      	bne.n	8002f22 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f001 ff7f 	bl	8004e20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f003 ff1b 	bl	8006d64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	4f54300a 	.word	0x4f54300a
 8002f3c:	4f54310a 	.word	0x4f54310a

08002f40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	333c      	adds	r3, #60	; 0x3c
 8002f58:	3304      	adds	r3, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90e      	bls.n	8002f94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f003 fed3 	bl	8006d40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d90c      	bls.n	8002fbc <PCD_EP_OutSetupPacket_int+0x7c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f001 ff32 	bl	8004e20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	4f54300a 	.word	0x4f54300a

08002fcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fea:	883b      	ldrh	r3, [r7, #0]
 8002fec:	0419      	lsls	r1, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	e028      	b.n	800304c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4413      	add	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e00d      	b.n	800302a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	3340      	adds	r3, #64	; 0x40
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	3301      	adds	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	3b01      	subs	r3, #1
 8003030:	429a      	cmp	r2, r3
 8003032:	d3ec      	bcc.n	800300e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003034:	883b      	ldrh	r3, [r7, #0]
 8003036:	0418      	lsls	r0, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	3b01      	subs	r3, #1
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	4302      	orrs	r2, r0
 8003044:	3340      	adds	r3, #64	; 0x40
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	887a      	ldrh	r2, [r7, #2]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e236      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d050      	beq.n	8003138 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003096:	4b9e      	ldr	r3, [pc, #632]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d00c      	beq.n	80030bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b9b      	ldr	r3, [pc, #620]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d112      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4b98      	ldr	r3, [pc, #608]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	4b94      	ldr	r3, [pc, #592]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d036      	beq.n	8003136 <HAL_RCC_OscConfig+0xbe>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d132      	bne.n	8003136 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e211      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_RCC_OscConfig+0x29c>)
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d013      	beq.n	800310e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe fb67 	bl	80017b8 <HAL_GetTick>
 80030ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ee:	f7fe fb63 	bl	80017b8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1fb      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003100:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x76>
 800310c:	e014      	b.n	8003138 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fb53 	bl	80017b8 <HAL_GetTick>
 8003112:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003116:	f7fe fb4f 	bl	80017b8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1e7      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003128:	4b79      	ldr	r3, [pc, #484]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x9e>
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003136:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d077      	beq.n	8003234 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003144:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003158:	2b08      	cmp	r3, #8
 800315a:	d126      	bne.n	80031aa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315c:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d120      	bne.n	80031aa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_OscConfig+0x108>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e1bb      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	21f8      	movs	r1, #248	; 0xf8
 800318e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	69b9      	ldr	r1, [r7, #24]
 8003192:	fa91 f1a1 	rbit	r1, r1
 8003196:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003198:	6979      	ldr	r1, [r7, #20]
 800319a:	fab1 f181 	clz	r1, r1
 800319e:	b2c9      	uxtb	r1, r1
 80031a0:	408b      	lsls	r3, r1
 80031a2:	495b      	ldr	r1, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a8:	e044      	b.n	8003234 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02a      	beq.n	8003208 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_OscConfig+0x2a0>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fafe 	bl	80017b8 <HAL_GetTick>
 80031bc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe fafa 	bl	80017b8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e192      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	21f8      	movs	r1, #248	; 0xf8
 80031ec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	fa91 f1a1 	rbit	r1, r1
 80031f4:	60f9      	str	r1, [r7, #12]
  return result;
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	fab1 f181 	clz	r1, r1
 80031fc:	b2c9      	uxtb	r1, r1
 80031fe:	408b      	lsls	r3, r1
 8003200:	4943      	ldr	r1, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
 8003206:	e015      	b.n	8003234 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x2a0>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fad3 	bl	80017b8 <HAL_GetTick>
 8003212:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe facf 	bl	80017b8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e167      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003228:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d030      	beq.n	80032a2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d016      	beq.n	8003276 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x2a4>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fab3 	bl	80017b8 <HAL_GetTick>
 8003252:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe faaf 	bl	80017b8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e147      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x1de>
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCC_OscConfig+0x2a4>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fa9c 	bl	80017b8 <HAL_GetTick>
 8003280:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe fa98 	bl	80017b8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e130      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8087 	beq.w	80033be <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d110      	bne.n	80032e4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x298>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_RCC_OscConfig+0x2a8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_RCC_OscConfig+0x2a8>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x2a8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d122      	bne.n	8003342 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_RCC_OscConfig+0x2a8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_RCC_OscConfig+0x2a8>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003308:	f7fe fa56 	bl	80017b8 <HAL_GetTick>
 800330c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	e012      	b.n	8003336 <HAL_RCC_OscConfig+0x2be>
 8003310:	40023800 	.word	0x40023800
 8003314:	40023802 	.word	0x40023802
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
 8003320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fe fa48 	bl	80017b8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0e0      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x488>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x48c>)
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe fa30 	bl	80017b8 <HAL_GetTick>
 8003358:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe fa2c 	bl	80017b8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0c2      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ee      	beq.n	800335c <HAL_RCC_OscConfig+0x2e4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fe fa1a 	bl	80017b8 <HAL_GetTick>
 8003384:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe fa16 	bl	80017b8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0ac      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b2:	4b55      	ldr	r3, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a54      	ldr	r2, [pc, #336]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80033b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8097 	beq.w	80034f6 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c8:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d061      	beq.n	8003498 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d146      	bne.n	800346a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x494>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe f9e9 	bl	80017b8 <HAL_GetTick>
 80033e6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe f9e5 	bl	80017b8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e07d      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x498>)
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	69d1      	ldr	r1, [r2, #28]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6a12      	ldr	r2, [r2, #32]
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341e:	0192      	lsls	r2, r2, #6
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003426:	0612      	lsls	r2, r2, #24
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
 8003432:	0412      	lsls	r2, r2, #16
 8003434:	430a      	orrs	r2, r1
 8003436:	4934      	ldr	r1, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x494>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe f9b9 	bl	80017b8 <HAL_GetTick>
 8003446:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe f9b5 	bl	80017b8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e04d      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x3d2>
 8003468:	e045      	b.n	80034f6 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCC_OscConfig+0x494>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe f9a2 	bl	80017b8 <HAL_GetTick>
 8003474:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe f99e 	bl	80017b8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e036      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x400>
 8003496:	e02e      	b.n	80034f6 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e029      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80034a4:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_RCC_OscConfig+0x490>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d11c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40007000 	.word	0x40007000
 8003504:	40023870 	.word	0x40023870
 8003508:	40023800 	.word	0x40023800
 800350c:	42470060 	.word	0x42470060
 8003510:	f0bc8000 	.word	0xf0bc8000

08003514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d2      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d90c      	bls.n	8003550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0be      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a5b      	ldr	r2, [pc, #364]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800356e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003580:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a55      	ldr	r2, [pc, #340]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4950      	ldr	r1, [pc, #320]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d040      	beq.n	800362c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d115      	bne.n	80035ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e085      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b44      	ldr	r3, [pc, #272]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e079      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e071      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4939      	ldr	r1, [pc, #228]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7fe f8dc 	bl	80017b8 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe f8d8 	bl	80017b8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e059      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d20c      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e03c      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	491b      	ldr	r1, [pc, #108]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003692:	f000 f82b 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	22f0      	movs	r2, #240	; 0xf0
 80036a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	fa92 f2a2 	rbit	r2, r2
 80036aa:	60fa      	str	r2, [r7, #12]
  return result;
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	fab2 f282 	clz	r2, r2
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	40d3      	lsrs	r3, r2
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x1cc>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	fa21 f303 	lsr.w	r3, r1, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCC_ClockConfig+0x1d4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe f834 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800bc7c 	.word	0x0800bc7c
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000024 	.word	0x20000024

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f0:	b090      	sub	sp, #64	; 0x40
 80036f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	2300      	movs	r3, #0
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fc:	2300      	movs	r3, #0
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d00d      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x40>
 8003710:	2b08      	cmp	r3, #8
 8003712:	f200 80a2 	bhi.w	800385a <HAL_RCC_GetSysClockFreq+0x16e>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x34>
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x3a>
 800371e:	e09c      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_GetSysClockFreq+0x184>)
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003724:	e09c      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_GetSysClockFreq+0x188>)
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800372a:	e099      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b4f      	ldr	r3, [pc, #316]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003736:	4b4d      	ldr	r3, [pc, #308]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d027      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	627a      	str	r2, [r7, #36]	; 0x24
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003754:	2100      	movs	r1, #0
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_GetSysClockFreq+0x188>)
 8003758:	fb03 f201 	mul.w	r2, r3, r1
 800375c:	2300      	movs	r3, #0
 800375e:	fb00 f303 	mul.w	r3, r0, r3
 8003762:	4413      	add	r3, r2
 8003764:	4a43      	ldr	r2, [pc, #268]	; (8003874 <HAL_RCC_GetSysClockFreq+0x188>)
 8003766:	fba0 2102 	umull	r2, r1, r0, r2
 800376a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800376c:	62ba      	str	r2, [r7, #40]	; 0x28
 800376e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003770:	4413      	add	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	2200      	movs	r2, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003780:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003784:	f7fd fa2c 	bl	8000be0 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003790:	e055      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	617a      	str	r2, [r7, #20]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037a4:	f04f 0b00 	mov.w	fp, #0
 80037a8:	4652      	mov	r2, sl
 80037aa:	465b      	mov	r3, fp
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ba:	0150      	lsls	r0, r2, #5
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	ebb2 080a 	subs.w	r8, r2, sl
 80037c4:	eb63 090b 	sbc.w	r9, r3, fp
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037d4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037d8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037dc:	ebb2 0408 	subs.w	r4, r2, r8
 80037e0:	eb63 0509 	sbc.w	r5, r3, r9
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	eb14 030a 	adds.w	r3, r4, sl
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	eb45 030b 	adc.w	r3, r5, fp
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003810:	4629      	mov	r1, r5
 8003812:	028b      	lsls	r3, r1, #10
 8003814:	4620      	mov	r0, r4
 8003816:	4629      	mov	r1, r5
 8003818:	4604      	mov	r4, r0
 800381a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800381e:	4601      	mov	r1, r0
 8003820:	028a      	lsls	r2, r1, #10
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	60fa      	str	r2, [r7, #12]
 800382e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003832:	f7fd f9d5 	bl	8000be0 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_GetSysClockFreq+0x180>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	3301      	adds	r3, #1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800384e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003858:	e002      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetSysClockFreq+0x184>)
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800385e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003862:	4618      	mov	r0, r3
 8003864:	3740      	adds	r7, #64	; 0x40
 8003866:	46bd      	mov	sp, r7
 8003868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	00f42400 	.word	0x00f42400
 8003874:	017d7840 	.word	0x017d7840

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b02      	ldr	r3, [pc, #8]	; (8003888 <HAL_RCC_GetHCLKFreq+0x10>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	20000000 	.word	0x20000000

0800388c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800388c:	b084      	sub	sp, #16
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	f107 001c 	add.w	r0, r7, #28
 800389a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d122      	bne.n	80038ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 fafa 	bl	8004ed8 <USB_CoreReset>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e010      	b.n	800390c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 faee 	bl	8004ed8 <USB_CoreReset>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10b      	bne.n	800392a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f043 0206 	orr.w	r2, r3, #6
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003936:	b004      	add	sp, #16
 8003938:	4770      	bx	lr
	...

0800393c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d165      	bne.n	8003a1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <USB_SetTurnaroundTime+0x11c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d906      	bls.n	8003966 <USB_SetTurnaroundTime+0x2a>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <USB_SetTurnaroundTime+0x120>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d202      	bcs.n	8003966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003960:	230f      	movs	r3, #15
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e062      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <USB_SetTurnaroundTime+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d306      	bcc.n	800397c <USB_SetTurnaroundTime+0x40>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <USB_SetTurnaroundTime+0x124>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d202      	bcs.n	800397c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003976:	230e      	movs	r3, #14
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e057      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <USB_SetTurnaroundTime+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d306      	bcc.n	8003992 <USB_SetTurnaroundTime+0x56>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <USB_SetTurnaroundTime+0x128>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d202      	bcs.n	8003992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800398c:	230d      	movs	r3, #13
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e04c      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <USB_SetTurnaroundTime+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d306      	bcc.n	80039a8 <USB_SetTurnaroundTime+0x6c>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4a32      	ldr	r2, [pc, #200]	; (8003a68 <USB_SetTurnaroundTime+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039a2:	230c      	movs	r3, #12
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e041      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <USB_SetTurnaroundTime+0x12c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d906      	bls.n	80039be <USB_SetTurnaroundTime+0x82>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <USB_SetTurnaroundTime+0x130>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d802      	bhi.n	80039be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039b8:	230b      	movs	r3, #11
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e036      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <USB_SetTurnaroundTime+0x130>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d906      	bls.n	80039d4 <USB_SetTurnaroundTime+0x98>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <USB_SetTurnaroundTime+0x134>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039ce:	230a      	movs	r3, #10
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e02b      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <USB_SetTurnaroundTime+0x134>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d906      	bls.n	80039ea <USB_SetTurnaroundTime+0xae>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <USB_SetTurnaroundTime+0x138>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d202      	bcs.n	80039ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039e4:	2309      	movs	r3, #9
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e020      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <USB_SetTurnaroundTime+0x138>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d306      	bcc.n	8003a00 <USB_SetTurnaroundTime+0xc4>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <USB_SetTurnaroundTime+0x13c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d802      	bhi.n	8003a00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039fa:	2308      	movs	r3, #8
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e015      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <USB_SetTurnaroundTime+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d906      	bls.n	8003a16 <USB_SetTurnaroundTime+0xda>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <USB_SetTurnaroundTime+0x140>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d202      	bcs.n	8003a16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a10:	2307      	movs	r3, #7
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e00a      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a16:	2306      	movs	r3, #6
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e007      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a22:	2309      	movs	r3, #9
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e001      	b.n	8003a2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a28:	2309      	movs	r3, #9
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	00d8acbf 	.word	0x00d8acbf
 8003a5c:	00e4e1c0 	.word	0x00e4e1c0
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	01067380 	.word	0x01067380
 8003a68:	011a499f 	.word	0x011a499f
 8003a6c:	01312cff 	.word	0x01312cff
 8003a70:	014ca43f 	.word	0x014ca43f
 8003a74:	016e3600 	.word	0x016e3600
 8003a78:	01a6ab1f 	.word	0x01a6ab1f
 8003a7c:	01e84800 	.word	0x01e84800

08003a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 0201 	bic.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d115      	bne.n	8003b0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7fd fe6c 	bl	80017cc <HAL_Delay>
      ms++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f001 f961 	bl	8004dc2 <USB_GetMode>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d01e      	beq.n	8003b44 <USB_SetCurrentMode+0x84>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b31      	cmp	r3, #49	; 0x31
 8003b0a:	d9f0      	bls.n	8003aee <USB_SetCurrentMode+0x2e>
 8003b0c:	e01a      	b.n	8003b44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d115      	bne.n	8003b40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7fd fe53 	bl	80017cc <HAL_Delay>
      ms++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f001 f948 	bl	8004dc2 <USB_GetMode>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <USB_SetCurrentMode+0x84>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b31      	cmp	r3, #49	; 0x31
 8003b3c:	d9f0      	bls.n	8003b20 <USB_SetCurrentMode+0x60>
 8003b3e:	e001      	b.n	8003b44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e005      	b.n	8003b50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b32      	cmp	r3, #50	; 0x32
 8003b48:	d101      	bne.n	8003b4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b58:	b084      	sub	sp, #16
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	e009      	b.n	8003b8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3340      	adds	r3, #64	; 0x40
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0e      	cmp	r3, #14
 8003b90:	d9f2      	bls.n	8003b78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11c      	bne.n	8003bd2 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
 8003bd0:	e00b      	b.n	8003bea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	461a      	mov	r2, r3
 8003c06:	680b      	ldr	r3, [r1, #0]
 8003c08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10c      	bne.n	8003c2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c16:	2100      	movs	r1, #0
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f945 	bl	8003ea8 <USB_SetDevSpeed>
 8003c1e:	e008      	b.n	8003c32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c20:	2101      	movs	r1, #1
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f940 	bl	8003ea8 <USB_SetDevSpeed>
 8003c28:	e003      	b.n	8003c32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c2a:	2103      	movs	r1, #3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f93b 	bl	8003ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c32:	2110      	movs	r1, #16
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8f3 	bl	8003e20 <USB_FlushTxFifo>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f90f 	bl	8003e68 <USB_FlushRxFifo>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c66:	461a      	mov	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	461a      	mov	r2, r3
 8003c74:	2300      	movs	r3, #0
 8003c76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e043      	b.n	8003d06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c94:	d118      	bne.n	8003cc8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e013      	b.n	8003cda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e008      	b.n	8003cda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3301      	adds	r3, #1
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3b7      	bcc.n	8003c7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e043      	b.n	8003d9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d2a:	d118      	bne.n	8003d5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e013      	b.n	8003d70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	461a      	mov	r2, r3
 8003d56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e008      	b.n	8003d70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2300      	movs	r3, #0
 8003d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3b7      	bcc.n	8003d14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f043 0210 	orr.w	r2, r3, #16
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <USB_DevInit+0x2c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f043 0208 	orr.w	r2, r3, #8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e18:	b004      	add	sp, #16
 8003e1a:	4770      	bx	lr
 8003e1c:	803c3800 	.word	0x803c3800

08003e20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <USB_FlushTxFifo+0x44>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d0f0      	beq.n	8003e3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	00030d40 	.word	0x00030d40

08003e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2210      	movs	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <USB_FlushRxFifo+0x3c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e006      	b.n	8003e9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d0f0      	beq.n	8003e7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	00030d40 	.word	0x00030d40

08003ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0306 	and.w	r3, r3, #6
 8003ef0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
 8003efc:	e00a      	b.n	8003f14 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d002      	beq.n	8003f0a <USB_GetDevSpeed+0x32>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d102      	bne.n	8003f10 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	e001      	b.n	8003f14 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f10:	230f      	movs	r3, #15
 8003f12:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d13a      	bne.n	8003fb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d155      	bne.n	8004020 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	78db      	ldrb	r3, [r3, #3]
 8003f8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	059b      	lsls	r3, r3, #22
 8003f96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e036      	b.n	8004020 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11a      	bne.n	8004020 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	78db      	ldrb	r3, [r3, #3]
 8004004:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004006:	430b      	orrs	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d161      	bne.n	800410c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405e:	d11f      	bne.n	80040a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800407e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800409e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c0:	4013      	ands	r3, r2
 80040c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	b29b      	uxth	r3, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e4:	4013      	ands	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	0159      	lsls	r1, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	4619      	mov	r1, r3
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <USB_DeactivateEndpoint+0x1b0>)
 8004106:	4013      	ands	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	e060      	b.n	80041ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004122:	d11f      	bne.n	8004164 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004142:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	43db      	mvns	r3, r3
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004184:	4013      	ands	r3, r2
 8004186:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	43db      	mvns	r3, r3
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a8:	4013      	ands	r3, r2
 80041aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	0159      	lsls	r1, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	4619      	mov	r1, r3
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <USB_DeactivateEndpoint+0x1b4>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	ec337800 	.word	0xec337800
 80041e0:	eff37800 	.word	0xeff37800

080041e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 815c 	bne.w	80044be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d132      	bne.n	8004274 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800422c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	0cdb      	lsrs	r3, r3, #19
 800426e:	04db      	lsls	r3, r3, #19
 8004270:	6113      	str	r3, [r2, #16]
 8004272:	e074      	b.n	800435e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428e:	0cdb      	lsrs	r3, r3, #19
 8004290:	04db      	lsls	r3, r3, #19
 8004292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6959      	ldr	r1, [r3, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	440b      	add	r3, r1
 80042d0:	1e59      	subs	r1, r3, #1
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042dc:	4b9d      	ldr	r3, [pc, #628]	; (8004554 <USB_EPStartXfer+0x370>)
 80042de:	400b      	ands	r3, r1
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	0148      	lsls	r0, r1, #5
 80042e4:	69f9      	ldr	r1, [r7, #28]
 80042e6:	4401      	add	r1, r0
 80042e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ec:	4313      	orrs	r3, r2
 80042ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	0148      	lsls	r0, r1, #5
 800430a:	69f9      	ldr	r1, [r7, #28]
 800430c:	4401      	add	r1, r0
 800430e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	78db      	ldrb	r3, [r3, #3]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d11f      	bne.n	800435e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004338:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800433c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800435c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d14b      	bne.n	80043fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d128      	bne.n	80043da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d110      	bne.n	80043ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e00f      	b.n	80043da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e12f      	b.n	800465c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800441a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	78db      	ldrb	r3, [r3, #3]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d015      	beq.n	8004450 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8117 	beq.w	800465c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	2101      	movs	r1, #1
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800444a:	4313      	orrs	r3, r2
 800444c:	634b      	str	r3, [r1, #52]	; 0x34
 800444e:	e105      	b.n	800465c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d110      	bne.n	8004482 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	e00f      	b.n	80044a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	440a      	add	r2, r1
 8004498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	68d9      	ldr	r1, [r3, #12]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	b298      	uxth	r0, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4603      	mov	r3, r0
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa2a 	bl	8004910 <USB_WritePacket>
 80044bc:	e0ce      	b.n	800465c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d8:	0cdb      	lsrs	r3, r3, #19
 80044da:	04db      	lsls	r3, r3, #19
 80044dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004500:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d126      	bne.n	8004558 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	0148      	lsls	r0, r1, #5
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	4401      	add	r1, r0
 8004528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	440a      	add	r2, r1
 8004546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800454a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800454e:	6113      	str	r3, [r2, #16]
 8004550:	e036      	b.n	80045c0 <USB_EPStartXfer+0x3dc>
 8004552:	bf00      	nop
 8004554:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4413      	add	r3, r2
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	8afb      	ldrh	r3, [r7, #22]
 800457e:	04d9      	lsls	r1, r3, #19
 8004580:	4b39      	ldr	r3, [pc, #228]	; (8004668 <USB_EPStartXfer+0x484>)
 8004582:	400b      	ands	r3, r1
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	0148      	lsls	r0, r1, #5
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	4401      	add	r1, r0
 800458c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004590:	4313      	orrs	r3, r2
 8004592:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	8af9      	ldrh	r1, [r7, #22]
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	0148      	lsls	r0, r1, #5
 80045b4:	69f9      	ldr	r1, [r7, #28]
 80045b6:	4401      	add	r1, r0
 80045b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10d      	bne.n	80045e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68d9      	ldr	r1, [r3, #12]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	460a      	mov	r2, r1
 80045e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d128      	bne.n	800463c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d110      	bne.n	800461c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00f      	b.n	800463c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800465a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	1ff80000 	.word	0x1ff80000

0800466c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 80cd 	bne.w	8004828 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d132      	bne.n	80046fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f4:	0cdb      	lsrs	r3, r3, #19
 80046f6:	04db      	lsls	r3, r3, #19
 80046f8:	6113      	str	r3, [r2, #16]
 80046fa:	e04e      	b.n	800479a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004716:	0cdb      	lsrs	r3, r3, #19
 8004718:	04db      	lsls	r3, r3, #19
 800471a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800473a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d903      	bls.n	8004754 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	0148      	lsls	r0, r1, #5
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	4401      	add	r1, r0
 8004792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d11e      	bne.n	80047de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e092      	b.n	8004904 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d07e      	beq.n	8004904 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004822:	4313      	orrs	r3, r2
 8004824:	634b      	str	r3, [r1, #52]	; 0x34
 8004826:	e06d      	b.n	8004904 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004842:	0cdb      	lsrs	r3, r3, #19
 8004844:	04db      	lsls	r3, r3, #19
 8004846:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800486a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800489a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	6939      	ldr	r1, [r7, #16]
 80048b4:	0148      	lsls	r0, r1, #5
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	4401      	add	r1, r0
 80048ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10d      	bne.n	80048e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	460a      	mov	r2, r1
 80048e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	460b      	mov	r3, r1
 8004920:	71fb      	strb	r3, [r7, #7]
 8004922:	4613      	mov	r3, r2
 8004924:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d123      	bne.n	800497e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	3303      	adds	r3, #3
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e018      	b.n	8004976 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	031a      	lsls	r2, r3, #12
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3301      	adds	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3301      	adds	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	3301      	adds	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d3e2      	bcc.n	8004944 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3724      	adds	r7, #36	; 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800498a:	b480      	push	{r7}
 800498c:	b08b      	sub	sp, #44	; 0x2c
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	4613      	mov	r3, r2
 8004996:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	e014      	b.n	80049e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	3301      	adds	r3, #1
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	3301      	adds	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	3301      	adds	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	3301      	adds	r3, #1
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d3e6      	bcc.n	80049b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049e8:	8bfb      	ldrh	r3, [r7, #30]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01e      	beq.n	8004a2c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f8:	461a      	mov	r2, r3
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	701a      	strb	r2, [r3, #0]
      i++;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	3301      	adds	r3, #1
 8004a18:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a20:	8bfb      	ldrh	r3, [r7, #30]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a26:	8bfb      	ldrh	r3, [r7, #30]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ea      	bne.n	8004a02 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	372c      	adds	r7, #44	; 0x2c
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d12c      	bne.n	8004aae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db12      	blt.n	8004a8c <USB_EPSetStall+0x54>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00f      	beq.n	8004a8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e02b      	b.n	8004b06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db12      	blt.n	8004ae6 <USB_EPSetStall+0xae>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00f      	beq.n	8004ae6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d128      	bne.n	8004b80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	78db      	ldrb	r3, [r3, #3]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d003      	beq.n	8004b5e <USB_EPClearStall+0x4c>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	78db      	ldrb	r3, [r3, #3]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d138      	bne.n	8004bd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e027      	b.n	8004bd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	78db      	ldrb	r3, [r3, #3]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d003      	beq.n	8004bb0 <USB_EPClearStall+0x9e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	78db      	ldrb	r3, [r3, #3]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d10f      	bne.n	8004bd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c54:	f023 0302 	bic.w	r3, r3, #2
 8004c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c80:	f023 0303 	bic.w	r3, r3, #3
 8004c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	b29b      	uxth	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	01db      	lsls	r3, r3, #7
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4013      	ands	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004db6:	68bb      	ldr	r3, [r7, #8]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0301 	and.w	r3, r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	333c      	adds	r3, #60	; 0x3c
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4a25      	ldr	r2, [pc, #148]	; (8004ed4 <USB_EP0_OutStart+0xb4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d90a      	bls.n	8004e5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e54:	d101      	bne.n	8004e5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e037      	b.n	8004eca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f043 0318 	orr.w	r3, r3, #24
 8004e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ea0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10f      	bne.n	8004ec8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	4f54300a 	.word	0x4f54300a

08004ed8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <USB_CoreReset+0x60>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e01b      	b.n	8004f2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	daf2      	bge.n	8004ee4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <USB_CoreReset+0x60>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e006      	b.n	8004f2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d0f0      	beq.n	8004f0e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	00030d40 	.word	0x00030d40

08004f3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7c1b      	ldrb	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d115      	bne.n	8004f80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2181      	movs	r1, #129	; 0x81
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f002 f846 	bl	8006fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f002 f83c 	bl	8006fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004f7e:	e012      	b.n	8004fa6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	2202      	movs	r2, #2
 8004f84:	2181      	movs	r1, #129	; 0x81
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 f831 	bl	8006fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	2202      	movs	r2, #2
 8004f96:	2101      	movs	r1, #1
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f002 f828 	bl	8006fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	2203      	movs	r2, #3
 8004faa:	2182      	movs	r1, #130	; 0x82
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f002 f81e 	bl	8006fee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004fbc:	f002 f9a0 	bl	8007300 <malloc>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	e026      	b.n	8005028 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	7c1b      	ldrb	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800500a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500e:	2101      	movs	r1, #1
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f002 f8dc 	bl	80071ce <USBD_LL_PrepareReceive>
 8005016:	e007      	b.n	8005028 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800501e:	2340      	movs	r3, #64	; 0x40
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f002 f8d3 	bl	80071ce <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005042:	2181      	movs	r1, #129	; 0x81
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 fff8 	bl	800703a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005050:	2101      	movs	r1, #1
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fff1 	bl	800703a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005060:	2182      	movs	r1, #130	; 0x82
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 ffe9 	bl	800703a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005088:	4618      	mov	r0, r3
 800508a:	f002 f941 	bl	8007310 <free>
    pdev->pClassData = NULL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d039      	beq.n	800513e <USBD_CDC_Setup+0x9e>
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d17f      	bne.n	80051ce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	88db      	ldrh	r3, [r3, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d029      	beq.n	800512a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da11      	bge.n	8005104 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80050ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	88d2      	ldrh	r2, [r2, #6]
 80050f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	88db      	ldrh	r3, [r3, #6]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 fa42 	bl	8006586 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005102:	e06b      	b.n	80051dc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	785a      	ldrb	r2, [r3, #1]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	88db      	ldrh	r3, [r3, #6]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	88db      	ldrh	r3, [r3, #6]
 8005120:	461a      	mov	r2, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fa5d 	bl	80065e2 <USBD_CtlPrepareRx>
      break;
 8005128:	e058      	b.n	80051dc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	7850      	ldrb	r0, [r2, #1]
 8005136:	2200      	movs	r2, #0
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	4798      	blx	r3
      break;
 800513c:	e04e      	b.n	80051dc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b0b      	cmp	r3, #11
 8005144:	d02e      	beq.n	80051a4 <USBD_CDC_Setup+0x104>
 8005146:	2b0b      	cmp	r3, #11
 8005148:	dc38      	bgt.n	80051bc <USBD_CDC_Setup+0x11c>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <USBD_CDC_Setup+0xb4>
 800514e:	2b0a      	cmp	r3, #10
 8005150:	d014      	beq.n	800517c <USBD_CDC_Setup+0xdc>
 8005152:	e033      	b.n	80051bc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800515a:	2b03      	cmp	r3, #3
 800515c:	d107      	bne.n	800516e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	2202      	movs	r2, #2
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fa0d 	bl	8006586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800516c:	e02e      	b.n	80051cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f99e 	bl	80064b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005176:	2302      	movs	r3, #2
 8005178:	75fb      	strb	r3, [r7, #23]
          break;
 800517a:	e027      	b.n	80051cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005182:	2b03      	cmp	r3, #3
 8005184:	d107      	bne.n	8005196 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005186:	f107 030f 	add.w	r3, r7, #15
 800518a:	2201      	movs	r2, #1
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 f9f9 	bl	8006586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005194:	e01a      	b.n	80051cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f98a 	bl	80064b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800519e:	2302      	movs	r3, #2
 80051a0:	75fb      	strb	r3, [r7, #23]
          break;
 80051a2:	e013      	b.n	80051cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d00d      	beq.n	80051ca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f97e 	bl	80064b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80051b6:	2302      	movs	r3, #2
 80051b8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051ba:	e006      	b.n	80051ca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 f977 	bl	80064b2 <USBD_CtlError>
          ret = USBD_FAIL;
 80051c4:	2302      	movs	r3, #2
 80051c6:	75fb      	strb	r3, [r7, #23]
          break;
 80051c8:	e000      	b.n	80051cc <USBD_CDC_Setup+0x12c>
          break;
 80051ca:	bf00      	nop
      }
      break;
 80051cc:	e006      	b.n	80051dc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f96e 	bl	80064b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80051d6:	2302      	movs	r3, #2
 80051d8:	75fb      	strb	r3, [r7, #23]
      break;
 80051da:	bf00      	nop
  }

  return ret;
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005200:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03a      	beq.n	8005282 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	331c      	adds	r3, #28
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d029      	beq.n	8005276 <USBD_CDC_DataIn+0x90>
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	331c      	adds	r3, #28
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	78f9      	ldrb	r1, [r7, #3]
 8005236:	68b8      	ldr	r0, [r7, #8]
 8005238:	460b      	mov	r3, r1
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	1a5b      	subs	r3, r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4403      	add	r3, r0
 8005242:	3344      	adds	r3, #68	; 0x44
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	fbb2 f1f3 	udiv	r1, r2, r3
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d110      	bne.n	8005276 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	331c      	adds	r3, #28
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005268:	78f9      	ldrb	r1, [r7, #3]
 800526a:	2300      	movs	r3, #0
 800526c:	2200      	movs	r2, #0
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 ff8a 	bl	8007188 <USBD_LL_Transmit>
 8005274:	e003      	b.n	800527e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	e000      	b.n	8005284 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005282:	2302      	movs	r3, #2
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800529e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 ffb5 	bl	8007214 <USBD_LL_GetRxDataSize>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052d0:	4611      	mov	r1, r2
 80052d2:	4798      	blx	r3

    return USBD_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <USBD_CDC_EP0_RxReady+0x46>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005302:	2bff      	cmp	r3, #255	; 0xff
 8005304:	d010      	beq.n	8005328 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005314:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800531c:	b292      	uxth	r2, r2
 800531e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2243      	movs	r2, #67	; 0x43
 8005340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005342:	4b03      	ldr	r3, [pc, #12]	; (8005350 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200000b4 	.word	0x200000b4

08005354 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2243      	movs	r2, #67	; 0x43
 8005360:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005362:	4b03      	ldr	r3, [pc, #12]	; (8005370 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000070 	.word	0x20000070

08005374 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2243      	movs	r2, #67	; 0x43
 8005380:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005382:	4b03      	ldr	r3, [pc, #12]	; (8005390 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	200000f8 	.word	0x200000f8

08005394 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	220a      	movs	r2, #10
 80053a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80053a2:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	2000002c 	.word	0x2000002c

080053b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80053be:	2302      	movs	r3, #2
 80053c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005422:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005458:	2b00      	cmp	r3, #0
 800545a:	d115      	bne.n	8005488 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800547a:	b29b      	uxth	r3, r3
 800547c:	2181      	movs	r1, #129	; 0x81
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fe82 	bl	8007188 <USBD_LL_Transmit>

      return USBD_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e002      	b.n	800548e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800548c:	2302      	movs	r3, #2
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d017      	beq.n	80054e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7c1b      	ldrb	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c2:	2101      	movs	r1, #1
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 fe82 	bl	80071ce <USBD_LL_PrepareReceive>
 80054ca:	e007      	b.n	80054dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	2101      	movs	r1, #1
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fe79 	bl	80071ce <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	4613      	mov	r3, r2
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054fe:	2302      	movs	r3, #2
 8005500:	e01a      	b.n	8005538 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	79fa      	ldrb	r2, [r7, #7]
 800552e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f001 fcf7 	bl	8006f24 <USBD_LL_Init>

  return USBD_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	73fb      	strb	r3, [r7, #15]
 8005560:	e001      	b.n	8005566 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005562:	2302      	movs	r3, #2
 8005564:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fd1c 	bl	8006fb8 <USBD_LL_Start>

  return USBD_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055aa:	2302      	movs	r3, #2
 80055ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00c      	beq.n	80055d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	4611      	mov	r1, r2
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	4611      	mov	r1, r2
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3

  return USBD_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 ff10 	bl	800643a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2b02      	cmp	r3, #2
 800563c:	d016      	beq.n	800566c <USBD_LL_SetupStage+0x6a>
 800563e:	2b02      	cmp	r3, #2
 8005640:	d81c      	bhi.n	800567c <USBD_LL_SetupStage+0x7a>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <USBD_LL_SetupStage+0x4a>
 8005646:	2b01      	cmp	r3, #1
 8005648:	d008      	beq.n	800565c <USBD_LL_SetupStage+0x5a>
 800564a:	e017      	b.n	800567c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fa03 	bl	8005a60 <USBD_StdDevReq>
      break;
 800565a:	e01a      	b.n	8005692 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa65 	bl	8005b34 <USBD_StdItfReq>
      break;
 800566a:	e012      	b.n	8005692 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 faa5 	bl	8005bc4 <USBD_StdEPReq>
      break;
 800567a:	e00a      	b.n	8005692 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fcf4 	bl	8007078 <USBD_LL_StallEP>
      break;
 8005690:	bf00      	nop
  }

  return USBD_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	460b      	mov	r3, r1
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d14b      	bne.n	8005748 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d134      	bne.n	800572c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d919      	bls.n	8005702 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d203      	bcs.n	80056f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	e002      	b.n	80056f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 ff8f 	bl	800661e <USBD_CtlContinueRx>
 8005700:	e038      	b.n	8005774 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005714:	2b03      	cmp	r3, #3
 8005716:	d105      	bne.n	8005724 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 ff8c 	bl	8006642 <USBD_CtlSendStatus>
 800572a:	e023      	b.n	8005774 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005732:	2b05      	cmp	r3, #5
 8005734:	d11e      	bne.n	8005774 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800573e:	2100      	movs	r1, #0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 fc99 	bl	8007078 <USBD_LL_StallEP>
 8005746:	e015      	b.n	8005774 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800575a:	2b03      	cmp	r3, #3
 800575c:	d108      	bne.n	8005770 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	7afa      	ldrb	r2, [r7, #11]
 8005768:	4611      	mov	r1, r2
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	4798      	blx	r3
 800576e:	e001      	b.n	8005774 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005770:	2302      	movs	r3, #2
 8005772:	e000      	b.n	8005776 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	460b      	mov	r3, r1
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d17f      	bne.n	8005892 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3314      	adds	r3, #20
 8005796:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d15c      	bne.n	800585c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d915      	bls.n	80057da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fef9 	bl	80065be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057cc:	2300      	movs	r3, #0
 80057ce:	2200      	movs	r2, #0
 80057d0:	2100      	movs	r1, #0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f001 fcfb 	bl	80071ce <USBD_LL_PrepareReceive>
 80057d8:	e04e      	b.n	8005878 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	6912      	ldr	r2, [r2, #16]
 80057e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80057e6:	fb01 f202 	mul.w	r2, r1, r2
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11c      	bne.n	800582a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d316      	bcc.n	800582a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005806:	429a      	cmp	r2, r3
 8005808:	d20f      	bcs.n	800582a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800580a:	2200      	movs	r2, #0
 800580c:	2100      	movs	r1, #0
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fed5 	bl	80065be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800581c:	2300      	movs	r3, #0
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f001 fcd3 	bl	80071ce <USBD_LL_PrepareReceive>
 8005828:	e026      	b.n	8005878 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800583c:	2b03      	cmp	r3, #3
 800583e:	d105      	bne.n	800584c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 fc12 	bl	8007078 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 ff07 	bl	8006668 <USBD_CtlReceiveStatus>
 800585a:	e00d      	b.n	8005878 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005862:	2b04      	cmp	r3, #4
 8005864:	d004      	beq.n	8005870 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 fc00 	bl	8007078 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d11d      	bne.n	80058be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff fe81 	bl	800558a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005890:	e015      	b.n	80058be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d108      	bne.n	80058ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	7afa      	ldrb	r2, [r7, #11]
 80058b2:	4611      	mov	r1, r2
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	4798      	blx	r3
 80058b8:	e001      	b.n	80058be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058ba:	2302      	movs	r3, #2
 80058bc:	e000      	b.n	80058c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fb89 	bl	8006fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2240      	movs	r2, #64	; 0x40
 80058e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	2200      	movs	r2, #0
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fb7b 	bl	8006fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2240      	movs	r2, #64	; 0x40
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	4611      	mov	r1, r2
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
  }

  return USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2204      	movs	r2, #4
 8005980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d105      	bne.n	80059ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10b      	bne.n	80059e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6852      	ldr	r2, [r2, #4]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	4611      	mov	r1, r2
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3

  return USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d005      	beq.n	8005a86 <USBD_StdDevReq+0x26>
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d84f      	bhi.n	8005b1e <USBD_StdDevReq+0xbe>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <USBD_StdDevReq+0x36>
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d14b      	bne.n	8005b1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
      break;
 8005a94:	e048      	b.n	8005b28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d839      	bhi.n	8005b12 <USBD_StdDevReq+0xb2>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <USBD_StdDevReq+0x44>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005af5 	.word	0x08005af5
 8005aa8:	08005b09 	.word	0x08005b09
 8005aac:	08005b13 	.word	0x08005b13
 8005ab0:	08005aff 	.word	0x08005aff
 8005ab4:	08005b13 	.word	0x08005b13
 8005ab8:	08005ad7 	.word	0x08005ad7
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005b13 	.word	0x08005b13
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005ae1 	.word	0x08005ae1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f9dc 	bl	8005e8c <USBD_GetDescriptor>
          break;
 8005ad4:	e022      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb3f 	bl	800615c <USBD_SetAddress>
          break;
 8005ade:	e01d      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb7e 	bl	80061e4 <USBD_SetConfig>
          break;
 8005ae8:	e018      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fc07 	bl	8006300 <USBD_GetConfig>
          break;
 8005af2:	e013      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fc37 	bl	800636a <USBD_GetStatus>
          break;
 8005afc:	e00e      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fc65 	bl	80063d0 <USBD_SetFeature>
          break;
 8005b06:	e009      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fc74 	bl	80063f8 <USBD_ClrFeature>
          break;
 8005b10:	e004      	b.n	8005b1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fccc 	bl	80064b2 <USBD_CtlError>
          break;
 8005b1a:	bf00      	nop
      }
      break;
 8005b1c:	e004      	b.n	8005b28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fcc6 	bl	80064b2 <USBD_CtlError>
      break;
 8005b26:	bf00      	nop
  }

  return ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d005      	beq.n	8005b5a <USBD_StdItfReq+0x26>
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d82e      	bhi.n	8005bb0 <USBD_StdItfReq+0x7c>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <USBD_StdItfReq+0x26>
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d12a      	bne.n	8005bb0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	3b01      	subs	r3, #1
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d81d      	bhi.n	8005ba2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	889b      	ldrh	r3, [r3, #4]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d813      	bhi.n	8005b98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d110      	bne.n	8005bac <USBD_StdItfReq+0x78>
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fd56 	bl	8006642 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b96:	e009      	b.n	8005bac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fc89 	bl	80064b2 <USBD_CtlError>
          break;
 8005ba0:	e004      	b.n	8005bac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fc84 	bl	80064b2 <USBD_CtlError>
          break;
 8005baa:	e000      	b.n	8005bae <USBD_StdItfReq+0x7a>
          break;
 8005bac:	bf00      	nop
      }
      break;
 8005bae:	e004      	b.n	8005bba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc7d 	bl	80064b2 <USBD_CtlError>
      break;
 8005bb8:	bf00      	nop
  }

  return USBD_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	889b      	ldrh	r3, [r3, #4]
 8005bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d007      	beq.n	8005bf4 <USBD_StdEPReq+0x30>
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	f200 8146 	bhi.w	8005e76 <USBD_StdEPReq+0x2b2>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <USBD_StdEPReq+0x40>
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 8141 	bne.w	8005e76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
      break;
 8005c02:	e13d      	b.n	8005e80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d10a      	bne.n	8005c26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	e12d      	b.n	8005e82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d007      	beq.n	8005c3e <USBD_StdEPReq+0x7a>
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	f300 811b 	bgt.w	8005e6a <USBD_StdEPReq+0x2a6>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d072      	beq.n	8005d1e <USBD_StdEPReq+0x15a>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d03a      	beq.n	8005cb2 <USBD_StdEPReq+0xee>
 8005c3c:	e115      	b.n	8005e6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d002      	beq.n	8005c4e <USBD_StdEPReq+0x8a>
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d015      	beq.n	8005c78 <USBD_StdEPReq+0xb4>
 8005c4c:	e02b      	b.n	8005ca6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <USBD_StdEPReq+0xaa>
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d009      	beq.n	8005c6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fa0a 	bl	8007078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c64:	2180      	movs	r1, #128	; 0x80
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fa06 	bl	8007078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c6c:	e020      	b.n	8005cb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fc1e 	bl	80064b2 <USBD_CtlError>
              break;
 8005c76:	e01b      	b.n	8005cb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	885b      	ldrh	r3, [r3, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <USBD_StdEPReq+0xda>
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b80      	cmp	r3, #128	; 0x80
 8005c8a:	d008      	beq.n	8005c9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	88db      	ldrh	r3, [r3, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f9ed 	bl	8007078 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fccf 	bl	8006642 <USBD_CtlSendStatus>

              break;
 8005ca4:	e004      	b.n	8005cb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fc02 	bl	80064b2 <USBD_CtlError>
              break;
 8005cae:	bf00      	nop
          }
          break;
 8005cb0:	e0e0      	b.n	8005e74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d002      	beq.n	8005cc2 <USBD_StdEPReq+0xfe>
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d015      	beq.n	8005cec <USBD_StdEPReq+0x128>
 8005cc0:	e026      	b.n	8005d10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <USBD_StdEPReq+0x11e>
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d009      	beq.n	8005ce2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005cce:	7bbb      	ldrb	r3, [r7, #14]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 f9d0 	bl	8007078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f9cc 	bl	8007078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ce0:	e01c      	b.n	8005d1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fbe4 	bl	80064b2 <USBD_CtlError>
              break;
 8005cea:	e017      	b.n	8005d1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	885b      	ldrh	r3, [r3, #2]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d112      	bne.n	8005d1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 f9d7 	bl	80070b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fc9a 	bl	8006642 <USBD_CtlSendStatus>
              }
              break;
 8005d0e:	e004      	b.n	8005d1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fbcd 	bl	80064b2 <USBD_CtlError>
              break;
 8005d18:	e000      	b.n	8005d1c <USBD_StdEPReq+0x158>
              break;
 8005d1a:	bf00      	nop
          }
          break;
 8005d1c:	e0aa      	b.n	8005e74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d002      	beq.n	8005d2e <USBD_StdEPReq+0x16a>
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d032      	beq.n	8005d92 <USBD_StdEPReq+0x1ce>
 8005d2c:	e097      	b.n	8005e5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <USBD_StdEPReq+0x180>
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d004      	beq.n	8005d44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fbb8 	bl	80064b2 <USBD_CtlError>
                break;
 8005d42:	e091      	b.n	8005e68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da0b      	bge.n	8005d64 <USBD_StdEPReq+0x1a0>
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3304      	adds	r3, #4
 8005d62:	e00b      	b.n	8005d7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2202      	movs	r2, #2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fbfb 	bl	8006586 <USBD_CtlSendData>
              break;
 8005d90:	e06a      	b.n	8005e68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da11      	bge.n	8005dbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	3318      	adds	r3, #24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d117      	bne.n	8005de4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fb7b 	bl	80064b2 <USBD_CtlError>
                  break;
 8005dbc:	e054      	b.n	8005e68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	f003 020f 	and.w	r2, r3, #15
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb68 	bl	80064b2 <USBD_CtlError>
                  break;
 8005de2:	e041      	b.n	8005e68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da0b      	bge.n	8005e04 <USBD_StdEPReq+0x240>
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	3310      	adds	r3, #16
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	3304      	adds	r3, #4
 8005e02:	e00b      	b.n	8005e1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <USBD_StdEPReq+0x266>
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d103      	bne.n	8005e32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e00e      	b.n	8005e50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f95c 	bl	80070f4 <USBD_LL_IsStallEP>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e002      	b.n	8005e50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2202      	movs	r2, #2
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb95 	bl	8006586 <USBD_CtlSendData>
              break;
 8005e5c:	e004      	b.n	8005e68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb26 	bl	80064b2 <USBD_CtlError>
              break;
 8005e66:	bf00      	nop
          }
          break;
 8005e68:	e004      	b.n	8005e74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb20 	bl	80064b2 <USBD_CtlError>
          break;
 8005e72:	bf00      	nop
      }
      break;
 8005e74:	e004      	b.n	8005e80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb1a 	bl	80064b2 <USBD_CtlError>
      break;
 8005e7e:	bf00      	nop
  }

  return ret;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	885b      	ldrh	r3, [r3, #2]
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	f200 8128 	bhi.w	8006102 <USBD_GetDescriptor+0x276>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <USBD_GetDescriptor+0x2c>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005eed 	.word	0x08005eed
 8005ec0:	08005f2d 	.word	0x08005f2d
 8005ec4:	08006103 	.word	0x08006103
 8005ec8:	08006103 	.word	0x08006103
 8005ecc:	080060a3 	.word	0x080060a3
 8005ed0:	080060cf 	.word	0x080060cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	7c12      	ldrb	r2, [r2, #16]
 8005ee0:	f107 0108 	add.w	r1, r7, #8
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
 8005ee8:	60f8      	str	r0, [r7, #12]
      break;
 8005eea:	e112      	b.n	8006112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	7c1b      	ldrb	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f107 0208 	add.w	r2, r7, #8
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f0e:	e100      	b.n	8006112 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f107 0208 	add.w	r2, r7, #8
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	2202      	movs	r2, #2
 8005f28:	701a      	strb	r2, [r3, #0]
      break;
 8005f2a:	e0f2      	b.n	8006112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	f200 80ac 	bhi.w	8006090 <USBD_GetDescriptor+0x204>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <USBD_GetDescriptor+0xb4>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f8d 	.word	0x08005f8d
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005ff5 	.word	0x08005ff5
 8005f50:	08006029 	.word	0x08006029
 8005f54:	0800605d 	.word	0x0800605d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	7c12      	ldrb	r2, [r2, #16]
 8005f70:	f107 0108 	add.w	r1, r7, #8
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f7a:	e091      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa97 	bl	80064b2 <USBD_CtlError>
            err++;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	3301      	adds	r3, #1
 8005f88:	72fb      	strb	r3, [r7, #11]
          break;
 8005f8a:	e089      	b.n	80060a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	7c12      	ldrb	r2, [r2, #16]
 8005fa4:	f107 0108 	add.w	r1, r7, #8
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fae:	e077      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa7d 	bl	80064b2 <USBD_CtlError>
            err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fbe:	e06f      	b.n	80060a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	7c12      	ldrb	r2, [r2, #16]
 8005fd8:	f107 0108 	add.w	r1, r7, #8
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
 8005fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fe2:	e05d      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa63 	bl	80064b2 <USBD_CtlError>
            err++;
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ff2:	e055      	b.n	80060a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	7c12      	ldrb	r2, [r2, #16]
 800600c:	f107 0108 	add.w	r1, r7, #8
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
 8006014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006016:	e043      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa49 	bl	80064b2 <USBD_CtlError>
            err++;
 8006020:	7afb      	ldrb	r3, [r7, #11]
 8006022:	3301      	adds	r3, #1
 8006024:	72fb      	strb	r3, [r7, #11]
          break;
 8006026:	e03b      	b.n	80060a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	7c12      	ldrb	r2, [r2, #16]
 8006040:	f107 0108 	add.w	r1, r7, #8
 8006044:	4610      	mov	r0, r2
 8006046:	4798      	blx	r3
 8006048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800604a:	e029      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa2f 	bl	80064b2 <USBD_CtlError>
            err++;
 8006054:	7afb      	ldrb	r3, [r7, #11]
 8006056:	3301      	adds	r3, #1
 8006058:	72fb      	strb	r3, [r7, #11]
          break;
 800605a:	e021      	b.n	80060a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	7c12      	ldrb	r2, [r2, #16]
 8006074:	f107 0108 	add.w	r1, r7, #8
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
 800607c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800607e:	e00f      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa15 	bl	80064b2 <USBD_CtlError>
            err++;
 8006088:	7afb      	ldrb	r3, [r7, #11]
 800608a:	3301      	adds	r3, #1
 800608c:	72fb      	strb	r3, [r7, #11]
          break;
 800608e:	e007      	b.n	80060a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa0d 	bl	80064b2 <USBD_CtlError>
          err++;
 8006098:	7afb      	ldrb	r3, [r7, #11]
 800609a:	3301      	adds	r3, #1
 800609c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800609e:	e038      	b.n	8006112 <USBD_GetDescriptor+0x286>
 80060a0:	e037      	b.n	8006112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	f107 0208 	add.w	r2, r7, #8
 80060b6:	4610      	mov	r0, r2
 80060b8:	4798      	blx	r3
 80060ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060bc:	e029      	b.n	8006112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f9f6 	bl	80064b2 <USBD_CtlError>
        err++;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	3301      	adds	r3, #1
 80060ca:	72fb      	strb	r3, [r7, #11]
      break;
 80060cc:	e021      	b.n	8006112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	7c1b      	ldrb	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f107 0208 	add.w	r2, r7, #8
 80060e2:	4610      	mov	r0, r2
 80060e4:	4798      	blx	r3
 80060e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	2207      	movs	r2, #7
 80060ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060f0:	e00f      	b.n	8006112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f9dc 	bl	80064b2 <USBD_CtlError>
        err++;
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	3301      	adds	r3, #1
 80060fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006100:	e007      	b.n	8006112 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9d4 	bl	80064b2 <USBD_CtlError>
      err++;
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	3301      	adds	r3, #1
 800610e:	72fb      	strb	r3, [r7, #11]
      break;
 8006110:	bf00      	nop
  }

  if (err != 0U)
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006118:	893b      	ldrh	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d011      	beq.n	8006142 <USBD_GetDescriptor+0x2b6>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	88da      	ldrh	r2, [r3, #6]
 800612a:	893b      	ldrh	r3, [r7, #8]
 800612c:	4293      	cmp	r3, r2
 800612e:	bf28      	it	cs
 8006130:	4613      	movcs	r3, r2
 8006132:	b29b      	uxth	r3, r3
 8006134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006136:	893b      	ldrh	r3, [r7, #8]
 8006138:	461a      	mov	r2, r3
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fa22 	bl	8006586 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88db      	ldrh	r3, [r3, #6]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa79 	bl	8006642 <USBD_CtlSendStatus>
 8006150:	e000      	b.n	8006154 <USBD_GetDescriptor+0x2c8>
    return;
 8006152:	bf00      	nop
    }
  }
}
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d130      	bne.n	80061d0 <USBD_SetAddress+0x74>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	88db      	ldrh	r3, [r3, #6]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12c      	bne.n	80061d0 <USBD_SetAddress+0x74>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d828      	bhi.n	80061d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	885b      	ldrh	r3, [r3, #2]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	2b03      	cmp	r3, #3
 8006192:	d104      	bne.n	800619e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f98b 	bl	80064b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619c:	e01d      	b.n	80061da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 ffcd 	bl	800714a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa46 	bl	8006642 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c4:	e009      	b.n	80061da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	e004      	b.n	80061da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f96d 	bl	80064b2 <USBD_CtlError>
  }
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	885b      	ldrh	r3, [r3, #2]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	4b41      	ldr	r3, [pc, #260]	; (80062fc <USBD_SetConfig+0x118>)
 80061f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061f8:	4b40      	ldr	r3, [pc, #256]	; (80062fc <USBD_SetConfig+0x118>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d904      	bls.n	800620a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f955 	bl	80064b2 <USBD_CtlError>
 8006208:	e075      	b.n	80062f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006210:	2b02      	cmp	r3, #2
 8006212:	d002      	beq.n	800621a <USBD_SetConfig+0x36>
 8006214:	2b03      	cmp	r3, #3
 8006216:	d023      	beq.n	8006260 <USBD_SetConfig+0x7c>
 8006218:	e062      	b.n	80062e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800621a:	4b38      	ldr	r3, [pc, #224]	; (80062fc <USBD_SetConfig+0x118>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006222:	4b36      	ldr	r3, [pc, #216]	; (80062fc <USBD_SetConfig+0x118>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2203      	movs	r2, #3
 8006230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006234:	4b31      	ldr	r3, [pc, #196]	; (80062fc <USBD_SetConfig+0x118>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f9af 	bl	800559e <USBD_SetClassConfig>
 8006240:	4603      	mov	r3, r0
 8006242:	2b02      	cmp	r3, #2
 8006244:	d104      	bne.n	8006250 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f932 	bl	80064b2 <USBD_CtlError>
            return;
 800624e:	e052      	b.n	80062f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f9f6 	bl	8006642 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006256:	e04e      	b.n	80062f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9f2 	bl	8006642 <USBD_CtlSendStatus>
        break;
 800625e:	e04a      	b.n	80062f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006260:	4b26      	ldr	r3, [pc, #152]	; (80062fc <USBD_SetConfig+0x118>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d112      	bne.n	800628e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006270:	4b22      	ldr	r3, [pc, #136]	; (80062fc <USBD_SetConfig+0x118>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <USBD_SetConfig+0x118>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff f9ab 	bl	80055dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9db 	bl	8006642 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800628c:	e033      	b.n	80062f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800628e:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <USBD_SetConfig+0x118>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d01d      	beq.n	80062d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f999 	bl	80055dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <USBD_SetConfig+0x118>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062b4:	4b11      	ldr	r3, [pc, #68]	; (80062fc <USBD_SetConfig+0x118>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff f96f 	bl	800559e <USBD_SetClassConfig>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d104      	bne.n	80062d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f8f2 	bl	80064b2 <USBD_CtlError>
            return;
 80062ce:	e012      	b.n	80062f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f9b6 	bl	8006642 <USBD_CtlSendStatus>
        break;
 80062d6:	e00e      	b.n	80062f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9b2 	bl	8006642 <USBD_CtlSendStatus>
        break;
 80062de:	e00a      	b.n	80062f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8e5 	bl	80064b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <USBD_SetConfig+0x118>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff f974 	bl	80055dc <USBD_ClrClassConfig>
        break;
 80062f4:	bf00      	nop
    }
  }
}
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200003a4 	.word	0x200003a4

08006300 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	88db      	ldrh	r3, [r3, #6]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d004      	beq.n	800631c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8cc 	bl	80064b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800631a:	e022      	b.n	8006362 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006322:	2b02      	cmp	r3, #2
 8006324:	dc02      	bgt.n	800632c <USBD_GetConfig+0x2c>
 8006326:	2b00      	cmp	r3, #0
 8006328:	dc03      	bgt.n	8006332 <USBD_GetConfig+0x32>
 800632a:	e015      	b.n	8006358 <USBD_GetConfig+0x58>
 800632c:	2b03      	cmp	r3, #3
 800632e:	d00b      	beq.n	8006348 <USBD_GetConfig+0x48>
 8006330:	e012      	b.n	8006358 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3308      	adds	r3, #8
 800633c:	2201      	movs	r2, #1
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f920 	bl	8006586 <USBD_CtlSendData>
        break;
 8006346:	e00c      	b.n	8006362 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2201      	movs	r2, #1
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f918 	bl	8006586 <USBD_CtlSendData>
        break;
 8006356:	e004      	b.n	8006362 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8a9 	bl	80064b2 <USBD_CtlError>
        break;
 8006360:	bf00      	nop
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637a:	3b01      	subs	r3, #1
 800637c:	2b02      	cmp	r3, #2
 800637e:	d81e      	bhi.n	80063be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	88db      	ldrh	r3, [r3, #6]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d004      	beq.n	8006392 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f891 	bl	80064b2 <USBD_CtlError>
        break;
 8006390:	e01a      	b.n	80063c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f043 0202 	orr.w	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	330c      	adds	r3, #12
 80063b2:	2202      	movs	r2, #2
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8e5 	bl	8006586 <USBD_CtlSendData>
      break;
 80063bc:	e004      	b.n	80063c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f876 	bl	80064b2 <USBD_CtlError>
      break;
 80063c6:	bf00      	nop
  }
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	885b      	ldrh	r3, [r3, #2]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d106      	bne.n	80063f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f929 	bl	8006642 <USBD_CtlSendStatus>
  }
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	3b01      	subs	r3, #1
 800640a:	2b02      	cmp	r3, #2
 800640c:	d80b      	bhi.n	8006426 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d10c      	bne.n	8006430 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f90f 	bl	8006642 <USBD_CtlSendStatus>
      }
      break;
 8006424:	e004      	b.n	8006430 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f842 	bl	80064b2 <USBD_CtlError>
      break;
 800642e:	e000      	b.n	8006432 <USBD_ClrFeature+0x3a>
      break;
 8006430:	bf00      	nop
  }
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	785a      	ldrb	r2, [r3, #1]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	3302      	adds	r3, #2
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b29a      	uxth	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	3303      	adds	r3, #3
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	b29b      	uxth	r3, r3
 8006468:	4413      	add	r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	3304      	adds	r3, #4
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b29a      	uxth	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	3305      	adds	r3, #5
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	b29b      	uxth	r3, r3
 8006484:	4413      	add	r3, r2
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	3306      	adds	r3, #6
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b29a      	uxth	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	3307      	adds	r3, #7
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	80da      	strh	r2, [r3, #6]

}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr

080064b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80064bc:	2180      	movs	r1, #128	; 0x80
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fdda 	bl	8007078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fdd6 	bl	8007078 <USBD_LL_StallEP>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d032      	beq.n	8006550 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f834 	bl	8006558 <USBD_GetLen>
 80064f0:	4603      	mov	r3, r0
 80064f2:	3301      	adds	r3, #1
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	75fa      	strb	r2, [r7, #23]
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	75fa      	strb	r2, [r7, #23]
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4413      	add	r3, r2
 800651c:	2203      	movs	r2, #3
 800651e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006520:	e012      	b.n	8006548 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	60fa      	str	r2, [r7, #12]
 8006528:	7dfa      	ldrb	r2, [r7, #23]
 800652a:	1c51      	adds	r1, r2, #1
 800652c:	75f9      	strb	r1, [r7, #23]
 800652e:	4611      	mov	r1, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	440a      	add	r2, r1
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	75fa      	strb	r2, [r7, #23]
 800653e:	461a      	mov	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4413      	add	r3, r2
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e8      	bne.n	8006522 <USBD_GetString+0x4e>
    }
  }
}
 8006550:	bf00      	nop
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006564:	e005      	b.n	8006572 <USBD_GetLen+0x1a>
  {
    len++;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	3301      	adds	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3301      	adds	r3, #1
 8006570:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f5      	bne.n	8006566 <USBD_GetLen+0xe>
  }

  return len;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	4613      	mov	r3, r2
 8006592:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	2100      	movs	r1, #0
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fdea 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	4613      	mov	r3, r2
 80065ca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	2100      	movs	r1, #0
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fdd8 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2203      	movs	r2, #3
 80065f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	2100      	movs	r1, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fddd 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	4613      	mov	r3, r2
 800662a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fdcb 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fd95 	bl	8007188 <USBD_LL_Transmit>

  return USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2205      	movs	r2, #5
 8006674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fda5 	bl	80071ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006694:	2200      	movs	r2, #0
 8006696:	4912      	ldr	r1, [pc, #72]	; (80066e0 <MX_USB_DEVICE_Init+0x50>)
 8006698:	4812      	ldr	r0, [pc, #72]	; (80066e4 <MX_USB_DEVICE_Init+0x54>)
 800669a:	f7fe ff26 	bl	80054ea <USBD_Init>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066a4:	f7fa fd62 	bl	800116c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066a8:	490f      	ldr	r1, [pc, #60]	; (80066e8 <MX_USB_DEVICE_Init+0x58>)
 80066aa:	480e      	ldr	r0, [pc, #56]	; (80066e4 <MX_USB_DEVICE_Init+0x54>)
 80066ac:	f7fe ff48 	bl	8005540 <USBD_RegisterClass>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066b6:	f7fa fd59 	bl	800116c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066ba:	490c      	ldr	r1, [pc, #48]	; (80066ec <MX_USB_DEVICE_Init+0x5c>)
 80066bc:	4809      	ldr	r0, [pc, #36]	; (80066e4 <MX_USB_DEVICE_Init+0x54>)
 80066be:	f7fe fe79 	bl	80053b4 <USBD_CDC_RegisterInterface>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066c8:	f7fa fd50 	bl	800116c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <MX_USB_DEVICE_Init+0x54>)
 80066ce:	f7fe ff50 	bl	8005572 <USBD_Start>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80066d8:	f7fa fd48 	bl	800116c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066dc:	bf00      	nop
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20000158 	.word	0x20000158
 80066e4:	200003a8 	.word	0x200003a8
 80066e8:	20000038 	.word	0x20000038
 80066ec:	20000148 	.word	0x20000148

080066f0 <cdcAvailable>:
uint8_t rx_buf[512];



uint32_t cdcAvailable(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]

  //버퍼 상태 확인
  //사용중이 버퍼 갯수
  ret = (rx_in - rx_out) % rx_len;
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <cdcAvailable+0x30>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <cdcAvailable+0x34>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <cdcAvailable+0x38>)
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	fbb3 f1f2 	udiv	r1, r3, r2
 800670c:	fb01 f202 	mul.w	r2, r1, r2
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	607b      	str	r3, [r7, #4]

  return ret;
 8006714:	687b      	ldr	r3, [r7, #4]
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	2000066c 	.word	0x2000066c
 8006724:	20000670 	.word	0x20000670
 8006728:	20000144 	.word	0x20000144

0800672c <cdcRead>:


uint8_t cdcRead(void)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8006732:	4b0e      	ldr	r3, [pc, #56]	; (800676c <cdcRead+0x40>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a0e      	ldr	r2, [pc, #56]	; (8006770 <cdcRead+0x44>)
 8006738:	5cd3      	ldrb	r3, [r2, r3]
 800673a:	71fb      	strb	r3, [r7, #7]

  if(rx_in != rx_out)
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <cdcRead+0x48>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <cdcRead+0x40>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d00b      	beq.n	8006760 <cdcRead+0x34>
  {
    //인덱스가 같으면 데이터가 없음
    rx_out = (rx_out + 1) % rx_len;
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <cdcRead+0x40>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <cdcRead+0x4c>)
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	fbb3 f1f2 	udiv	r1, r3, r2
 8006756:	fb01 f202 	mul.w	r2, r1, r2
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	4a03      	ldr	r2, [pc, #12]	; (800676c <cdcRead+0x40>)
 800675e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006760:	79fb      	ldrb	r3, [r7, #7]
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	20000670 	.word	0x20000670
 8006770:	20000674 	.word	0x20000674
 8006774:	2000066c 	.word	0x2000066c
 8006778:	20000144 	.word	0x20000144

0800677c <cdcDataIn>:


void cdcDataIn(uint8_t rx_data)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  //수신 데이터 버퍼에 저장
  rx_buf[rx_in] = rx_data;
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <cdcDataIn+0x44>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	490e      	ldr	r1, [pc, #56]	; (80067c4 <cdcDataIn+0x48>)
 800678c:	79fa      	ldrb	r2, [r7, #7]
 800678e:	54ca      	strb	r2, [r1, r3]

  //rx_in 인덱스 1 증가 시킨 후 그 인덱스 값을 next_rx_in에 저장한다.
  next_rx_in = (rx_in + 1) % rx_len;
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <cdcDataIn+0x44>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a0c      	ldr	r2, [pc, #48]	; (80067c8 <cdcDataIn+0x4c>)
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	fbb3 f1f2 	udiv	r1, r3, r2
 800679e:	fb01 f202 	mul.w	r2, r1, r2
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  //rx_in + 1 인덱스 즉 next_rx_in이 rx_out 인덱스와 같지 않다면
    //--> 아직 버퍼가 full이 아니라면.....
  if(next_rx_in != rx_out)
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <cdcDataIn+0x50>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d002      	beq.n	80067b6 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 80067b0:	4a03      	ldr	r2, [pc, #12]	; (80067c0 <cdcDataIn+0x44>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6013      	str	r3, [r2, #0]
  }
}
 80067b6:	bf00      	nop
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	2000066c 	.word	0x2000066c
 80067c4:	20000674 	.word	0x20000674
 80067c8:	20000144 	.word	0x20000144
 80067cc:	20000670 	.word	0x20000670

080067d0 <cdcWrite>:
/*
 * usb로 write 하는 함수
 */

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;
  pre_time = millis();
 80067da:	f7fa fc7a 	bl	80010d2 <millis>
 80067de:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f922 	bl	8006a30 <CDC_Transmit_FS>
 80067ec:	4603      	mov	r3, r0
 80067ee:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <cdcWrite+0x2a>
    {
      return length;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	e00e      	b.n	8006818 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d101      	bne.n	8006804 <cdcWrite+0x34>
    {
      return 0;
 8006800:	2300      	movs	r3, #0
 8006802:	e009      	b.n	8006818 <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)  //time out
 8006804:	f7fa fc65 	bl	80010d2 <millis>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b63      	cmp	r3, #99	; 0x63
 8006810:	d800      	bhi.n	8006814 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006812:	e7e5      	b.n	80067e0 <cdcWrite+0x10>
    {
      break;
 8006814:	bf00      	nop
    }
  }

  return 0;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <cdcGetBaud+0x10>)
 8006826:	681b      	ldr	r3, [r3, #0]
}
 8006828:	4618      	mov	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	2000013c 	.word	0x2000013c

08006834 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006838:	2200      	movs	r2, #0
 800683a:	4905      	ldr	r1, [pc, #20]	; (8006850 <CDC_Init_FS+0x1c>)
 800683c:	4805      	ldr	r0, [pc, #20]	; (8006854 <CDC_Init_FS+0x20>)
 800683e:	f7fe fdcf 	bl	80053e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006842:	4905      	ldr	r1, [pc, #20]	; (8006858 <CDC_Init_FS+0x24>)
 8006844:	4803      	ldr	r0, [pc, #12]	; (8006854 <CDC_Init_FS+0x20>)
 8006846:	f7fe fde4 	bl	8005412 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800684a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000c74 	.word	0x20000c74
 8006854:	200003a8 	.word	0x200003a8
 8006858:	20000874 	.word	0x20000874

0800685c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006860:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
	...

0800686c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
 8006878:	4613      	mov	r3, r2
 800687a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	2b23      	cmp	r3, #35	; 0x23
 8006880:	f200 80a6 	bhi.w	80069d0 <CDC_Control_FS+0x164>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <CDC_Control_FS+0x20>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080069d1 	.word	0x080069d1
 8006890:	080069d1 	.word	0x080069d1
 8006894:	080069d1 	.word	0x080069d1
 8006898:	080069d1 	.word	0x080069d1
 800689c:	080069d1 	.word	0x080069d1
 80068a0:	080069d1 	.word	0x080069d1
 80068a4:	080069d1 	.word	0x080069d1
 80068a8:	080069d1 	.word	0x080069d1
 80068ac:	080069d1 	.word	0x080069d1
 80068b0:	080069d1 	.word	0x080069d1
 80068b4:	080069d1 	.word	0x080069d1
 80068b8:	080069d1 	.word	0x080069d1
 80068bc:	080069d1 	.word	0x080069d1
 80068c0:	080069d1 	.word	0x080069d1
 80068c4:	080069d1 	.word	0x080069d1
 80068c8:	080069d1 	.word	0x080069d1
 80068cc:	080069d1 	.word	0x080069d1
 80068d0:	080069d1 	.word	0x080069d1
 80068d4:	080069d1 	.word	0x080069d1
 80068d8:	080069d1 	.word	0x080069d1
 80068dc:	080069d1 	.word	0x080069d1
 80068e0:	080069d1 	.word	0x080069d1
 80068e4:	080069d1 	.word	0x080069d1
 80068e8:	080069d1 	.word	0x080069d1
 80068ec:	080069d1 	.word	0x080069d1
 80068f0:	080069d1 	.word	0x080069d1
 80068f4:	080069d1 	.word	0x080069d1
 80068f8:	080069d1 	.word	0x080069d1
 80068fc:	080069d1 	.word	0x080069d1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	0800691d 	.word	0x0800691d
 8006910:	0800697d 	.word	0x0800697d
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate       = (uint32_t)(pbuf[0]);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <CDC_Control_FS+0x174>)
 8006924:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[1] << 8);
 8006926:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <CDC_Control_FS+0x174>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	3201      	adds	r2, #1
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	0212      	lsls	r2, r2, #8
 8006932:	4313      	orrs	r3, r2
 8006934:	4a2a      	ldr	r2, [pc, #168]	; (80069e0 <CDC_Control_FS+0x174>)
 8006936:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[2] << 16);
 8006938:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <CDC_Control_FS+0x174>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	3202      	adds	r2, #2
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	0412      	lsls	r2, r2, #16
 8006944:	4313      	orrs	r3, r2
 8006946:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <CDC_Control_FS+0x174>)
 8006948:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate      |= (uint32_t)(pbuf[3] << 24);
 800694a:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <CDC_Control_FS+0x174>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	3203      	adds	r2, #3
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	0612      	lsls	r2, r2, #24
 8006956:	4313      	orrs	r3, r2
 8006958:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <CDC_Control_FS+0x174>)
 800695a:	6013      	str	r3, [r2, #0]
      LineCoding.format        = (uint8_t)pbuf[4];
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	3304      	adds	r3, #4
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <CDC_Control_FS+0x174>)
 8006964:	711a      	strb	r2, [r3, #4]
      LineCoding.datatype      = (uint8_t)pbuf[5];
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	3305      	adds	r3, #5
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <CDC_Control_FS+0x174>)
 800696e:	719a      	strb	r2, [r3, #6]
      LineCoding.paritytype    = (uint8_t)pbuf[6];
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	3306      	adds	r3, #6
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <CDC_Control_FS+0x174>)
 8006978:	715a      	strb	r2, [r3, #5]
    break;
 800697a:	e02a      	b.n	80069d2 <CDC_Control_FS+0x166>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <CDC_Control_FS+0x174>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <CDC_Control_FS+0x174>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	0a1a      	lsrs	r2, r3, #8
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	3301      	adds	r3, #1
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <CDC_Control_FS+0x174>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	0c1a      	lsrs	r2, r3, #16
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	3302      	adds	r3, #2
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <CDC_Control_FS+0x174>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	0e1a      	lsrs	r2, r3, #24
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	3303      	adds	r3, #3
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
      pbuf[4] = (uint8_t)LineCoding.format;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <CDC_Control_FS+0x174>)
 80069b6:	7912      	ldrb	r2, [r2, #4]
 80069b8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = (uint8_t)LineCoding.datatype;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	3305      	adds	r3, #5
 80069be:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <CDC_Control_FS+0x174>)
 80069c0:	7992      	ldrb	r2, [r2, #6]
 80069c2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = (uint8_t)LineCoding.paritytype;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	3306      	adds	r3, #6
 80069c8:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <CDC_Control_FS+0x174>)
 80069ca:	7952      	ldrb	r2, [r2, #5]
 80069cc:	701a      	strb	r2, [r3, #0]
    break;
 80069ce:	e000      	b.n	80069d2 <CDC_Control_FS+0x166>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069d0:	bf00      	nop
  }

  return (USBD_OK);
 80069d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	2000013c 	.word	0x2000013c

080069e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	480e      	ldr	r0, [pc, #56]	; (8006a2c <CDC_Receive_FS+0x48>)
 80069f2:	f7fe fd0e 	bl	8005412 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069f6:	480d      	ldr	r0, [pc, #52]	; (8006a2c <CDC_Receive_FS+0x48>)
 80069f8:	f7fe fd4d 	bl	8005496 <USBD_CDC_ReceivePacket>

  //usb 데이터 수신하면
  //링버퍼로 데이터 수신 처리
  for(int i=0;i<*Len;i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e009      	b.n	8006a16 <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff feb6 	bl	800677c <cdcDataIn>
  for(int i=0;i<*Len;i++)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d8f0      	bhi.n	8006a02 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8006a20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200003a8 	.word	0x200003a8

08006a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <CDC_Transmit_FS+0x48>)
 8006a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e00b      	b.n	8006a6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4806      	ldr	r0, [pc, #24]	; (8006a78 <CDC_Transmit_FS+0x48>)
 8006a5e:	f7fe fcbf 	bl	80053e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a62:	4805      	ldr	r0, [pc, #20]	; (8006a78 <CDC_Transmit_FS+0x48>)
 8006a64:	f7fe fce8 	bl	8005438 <USBD_CDC_TransmitPacket>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	200003a8 	.word	0x200003a8

08006a7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2212      	movs	r2, #18
 8006a8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000174 	.word	0x20000174

08006aa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ab2:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000188 	.word	0x20000188

08006ac4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	6039      	str	r1, [r7, #0]
 8006ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	4907      	ldr	r1, [pc, #28]	; (8006af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ada:	4808      	ldr	r0, [pc, #32]	; (8006afc <USBD_FS_ProductStrDescriptor+0x38>)
 8006adc:	f7ff fcfa 	bl	80064d4 <USBD_GetString>
 8006ae0:	e004      	b.n	8006aec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4904      	ldr	r1, [pc, #16]	; (8006af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ae6:	4805      	ldr	r0, [pc, #20]	; (8006afc <USBD_FS_ProductStrDescriptor+0x38>)
 8006ae8:	f7ff fcf4 	bl	80064d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20001074 	.word	0x20001074
 8006afc:	0800bc34 	.word	0x0800bc34

08006b00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	4904      	ldr	r1, [pc, #16]	; (8006b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b10:	4804      	ldr	r0, [pc, #16]	; (8006b24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b12:	f7ff fcdf 	bl	80064d4 <USBD_GetString>
  return USBD_StrDesc;
 8006b16:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20001074 	.word	0x20001074
 8006b24:	0800bc4c 	.word	0x0800bc4c

08006b28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	6039      	str	r1, [r7, #0]
 8006b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	221a      	movs	r2, #26
 8006b38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b3a:	f000 f843 	bl	8006bc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b3e:	4b02      	ldr	r3, [pc, #8]	; (8006b48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	2000018c 	.word	0x2000018c

08006b4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	4907      	ldr	r1, [pc, #28]	; (8006b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b62:	4808      	ldr	r0, [pc, #32]	; (8006b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b64:	f7ff fcb6 	bl	80064d4 <USBD_GetString>
 8006b68:	e004      	b.n	8006b74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4904      	ldr	r1, [pc, #16]	; (8006b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b6e:	4805      	ldr	r0, [pc, #20]	; (8006b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b70:	f7ff fcb0 	bl	80064d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20001074 	.word	0x20001074
 8006b84:	0800bc60 	.word	0x0800bc60

08006b88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b9e:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ba0:	f7ff fc98 	bl	80064d4 <USBD_GetString>
 8006ba4:	e004      	b.n	8006bb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4904      	ldr	r1, [pc, #16]	; (8006bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006baa:	4805      	ldr	r0, [pc, #20]	; (8006bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bac:	f7ff fc92 	bl	80064d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20001074 	.word	0x20001074
 8006bc0:	0800bc6c 	.word	0x0800bc6c

08006bc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bca:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <Get_SerialNum+0x44>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <Get_SerialNum+0x48>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bd6:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <Get_SerialNum+0x4c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bea:	2208      	movs	r2, #8
 8006bec:	4909      	ldr	r1, [pc, #36]	; (8006c14 <Get_SerialNum+0x50>)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f814 	bl	8006c1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	4908      	ldr	r1, [pc, #32]	; (8006c18 <Get_SerialNum+0x54>)
 8006bf8:	68b8      	ldr	r0, [r7, #8]
 8006bfa:	f000 f80f 	bl	8006c1c <IntToUnicode>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	1fff7a10 	.word	0x1fff7a10
 8006c0c:	1fff7a14 	.word	0x1fff7a14
 8006c10:	1fff7a18 	.word	0x1fff7a18
 8006c14:	2000018e 	.word	0x2000018e
 8006c18:	2000019e 	.word	0x2000019e

08006c1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]
 8006c32:	e027      	b.n	8006c84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0f1b      	lsrs	r3, r3, #28
 8006c38:	2b09      	cmp	r3, #9
 8006c3a:	d80b      	bhi.n	8006c54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3230      	adds	r2, #48	; 0x30
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e00a      	b.n	8006c6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	0f1b      	lsrs	r3, r3, #28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	440b      	add	r3, r1
 8006c64:	3237      	adds	r2, #55	; 0x37
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	3301      	adds	r3, #1
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	3301      	adds	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
 8006c84:	7dfa      	ldrb	r2, [r7, #23]
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3d3      	bcc.n	8006c34 <IntToUnicode+0x18>
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb8:	d13a      	bne.n	8006d30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cca:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8006cd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ce8:	230a      	movs	r3, #10
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4812      	ldr	r0, [pc, #72]	; (8006d3c <HAL_PCD_MspInit+0xa4>)
 8006cf4:	f7fa fe9c 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	4a0e      	ldr	r2, [pc, #56]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	6353      	str	r3, [r2, #52]	; 0x34
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d12:	6453      	str	r3, [r2, #68]	; 0x44
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <HAL_PCD_MspInit+0xa0>)
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	2043      	movs	r0, #67	; 0x43
 8006d26:	f7fa fe4c 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d2a:	2043      	movs	r0, #67	; 0x43
 8006d2c:	f7fa fe65 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d30:	bf00      	nop
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40020000 	.word	0x40020000

08006d40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fe fc53 	bl	8005602 <USBD_LL_SetupStage>
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f7fe fc85 	bl	800569c <USBD_LL_DataOutStage>
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	3348      	adds	r3, #72	; 0x48
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f7fe fcdc 	bl	800577e <USBD_LL_DataInStage>
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fdec 	bl	80059ba <USBD_LL_SOF>
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006df2:	2301      	movs	r3, #1
 8006df4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
 8006e02:	e008      	b.n	8006e16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d102      	bne.n	8006e12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	e001      	b.n	8006e16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006e12:	f7fa f9ab 	bl	800116c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006e1c:	7bfa      	ldrb	r2, [r7, #15]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fd92 	bl	800594a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fd4b 	bl	80058c8 <USBD_LL_Reset>
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fd8c 	bl	8005968 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <HAL_PCD_SuspendCallback+0x48>)
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	4a03      	ldr	r2, [pc, #12]	; (8006e84 <HAL_PCD_SuspendCallback+0x48>)
 8006e76:	f043 0306 	orr.w	r3, r3, #6
 8006e7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed00 	.word	0xe000ed00

08006e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fd7a 	bl	8005990 <USBD_LL_Resume>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fda3 	bl	8005a06 <USBD_LL_IsoOUTIncomplete>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fd85 	bl	80059ee <USBD_LL_IsoINIncomplete>
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fd8f 	bl	8005a1e <USBD_LL_DevConnected>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fd8b 	bl	8005a32 <USBD_LL_DevDisconnected>
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d139      	bne.n	8006fa8 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f34:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f4e:	2204      	movs	r2, #4
 8006f50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f54:	2202      	movs	r2, #2
 8006f56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f60:	2202      	movs	r2, #2
 8006f62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f64:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f7c:	480d      	ldr	r0, [pc, #52]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f7e:	f7fa ff26 	bl	8001dce <HAL_PCD_Init>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006f88:	f7fa f8f0 	bl	800116c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f90:	f7fc f862 	bl	8003058 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	2100      	movs	r1, #0
 8006f98:	4806      	ldr	r0, [pc, #24]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006f9a:	f7fc f817 	bl	8002fcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f9e:	2280      	movs	r2, #128	; 0x80
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4804      	ldr	r0, [pc, #16]	; (8006fb4 <USBD_LL_Init+0x90>)
 8006fa4:	f7fc f812 	bl	8002fcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001274 	.word	0x20001274

08006fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fb f81a 	bl	8002008 <HAL_PCD_Start>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f92e 	bl	800723c <USBD_Get_USB_Status>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	70fb      	strb	r3, [r7, #3]
 8007000:	460b      	mov	r3, r1
 8007002:	70bb      	strb	r3, [r7, #2]
 8007004:	4613      	mov	r3, r2
 8007006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007016:	78bb      	ldrb	r3, [r7, #2]
 8007018:	883a      	ldrh	r2, [r7, #0]
 800701a:	78f9      	ldrb	r1, [r7, #3]
 800701c:	f7fb fbdf 	bl	80027de <HAL_PCD_EP_Open>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f908 	bl	800723c <USBD_Get_USB_Status>
 800702c:	4603      	mov	r3, r0
 800702e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007030:	7bbb      	ldrb	r3, [r7, #14]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f7fb fc28 	bl	80028ae <HAL_PCD_EP_Close>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f8e9 	bl	800723c <USBD_Get_USB_Status>
 800706a:	4603      	mov	r3, r0
 800706c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800706e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7fb fcff 	bl	8002a9a <HAL_PCD_EP_SetStall>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f8ca 	bl	800723c <USBD_Get_USB_Status>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	4611      	mov	r1, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fb fd44 	bl	8002b62 <HAL_PCD_EP_ClrStall>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f8ab 	bl	800723c <USBD_Get_USB_Status>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800710c:	2b00      	cmp	r3, #0
 800710e:	da0b      	bge.n	8007128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	333e      	adds	r3, #62	; 0x3e
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	e00b      	b.n	8007140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800713e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f7fb fb13 	bl	8002794 <HAL_PCD_SetAddress>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f861 	bl	800723c <USBD_Get_USB_Status>
 800717a:	4603      	mov	r3, r0
 800717c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800717e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
 8007198:	4613      	mov	r3, r2
 800719a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	7af9      	ldrb	r1, [r7, #11]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	f7fb fc29 	bl	8002a06 <HAL_PCD_EP_Transmit>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f83e 	bl	800723c <USBD_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	461a      	mov	r2, r3
 80071da:	460b      	mov	r3, r1
 80071dc:	72fb      	strb	r3, [r7, #11]
 80071de:	4613      	mov	r3, r2
 80071e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	7af9      	ldrb	r1, [r7, #11]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f7fb fba4 	bl	8002942 <HAL_PCD_EP_Receive>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f81b 	bl	800723c <USBD_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800720a:	7dbb      	ldrb	r3, [r7, #22]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fb fbd4 	bl	80029d8 <HAL_PCD_EP_GetRxCount>
 8007230:	4603      	mov	r3, r0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d817      	bhi.n	8007280 <USBD_Get_USB_Status+0x44>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <USBD_Get_USB_Status+0x1c>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	08007269 	.word	0x08007269
 800725c:	0800726f 	.word	0x0800726f
 8007260:	08007275 	.word	0x08007275
 8007264:	0800727b 	.word	0x0800727b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
    break;
 800726c:	e00b      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	73fb      	strb	r3, [r7, #15]
    break;
 8007272:	e008      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	e005      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
    break;
 800727e:	e002      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	73fb      	strb	r3, [r7, #15]
    break;
 8007284:	bf00      	nop
  }
  return usb_status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <main>:

#include "main.h"


int main(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  hwInit();
 8007298:	f7fa fa1f 	bl	80016da <hwInit>
  apInit();
 800729c:	f7f9 fe5c 	bl	8000f58 <apInit>
  apMain();
 80072a0:	f7f9 fe64 	bl	8000f6c <apMain>

  return 0;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <__errno>:
 80072ac:	4b01      	ldr	r3, [pc, #4]	; (80072b4 <__errno+0x8>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200001a8 	.word	0x200001a8

080072b8 <__libc_init_array>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	2600      	movs	r6, #0
 80072bc:	4d0c      	ldr	r5, [pc, #48]	; (80072f0 <__libc_init_array+0x38>)
 80072be:	4c0d      	ldr	r4, [pc, #52]	; (80072f4 <__libc_init_array+0x3c>)
 80072c0:	1b64      	subs	r4, r4, r5
 80072c2:	10a4      	asrs	r4, r4, #2
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	d109      	bne.n	80072dc <__libc_init_array+0x24>
 80072c8:	f004 fc94 	bl	800bbf4 <_init>
 80072cc:	2600      	movs	r6, #0
 80072ce:	4d0a      	ldr	r5, [pc, #40]	; (80072f8 <__libc_init_array+0x40>)
 80072d0:	4c0a      	ldr	r4, [pc, #40]	; (80072fc <__libc_init_array+0x44>)
 80072d2:	1b64      	subs	r4, r4, r5
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	d105      	bne.n	80072e6 <__libc_init_array+0x2e>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e0:	4798      	blx	r3
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7ee      	b.n	80072c4 <__libc_init_array+0xc>
 80072e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ea:	4798      	blx	r3
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7f2      	b.n	80072d6 <__libc_init_array+0x1e>
 80072f0:	0800c13c 	.word	0x0800c13c
 80072f4:	0800c13c 	.word	0x0800c13c
 80072f8:	0800c13c 	.word	0x0800c13c
 80072fc:	0800c140 	.word	0x0800c140

08007300 <malloc>:
 8007300:	4b02      	ldr	r3, [pc, #8]	; (800730c <malloc+0xc>)
 8007302:	4601      	mov	r1, r0
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	f000 b87b 	b.w	8007400 <_malloc_r>
 800730a:	bf00      	nop
 800730c:	200001a8 	.word	0x200001a8

08007310 <free>:
 8007310:	4b02      	ldr	r3, [pc, #8]	; (800731c <free+0xc>)
 8007312:	4601      	mov	r1, r0
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f000 b80b 	b.w	8007330 <_free_r>
 800731a:	bf00      	nop
 800731c:	200001a8 	.word	0x200001a8

08007320 <memset>:
 8007320:	4603      	mov	r3, r0
 8007322:	4402      	add	r2, r0
 8007324:	4293      	cmp	r3, r2
 8007326:	d100      	bne.n	800732a <memset+0xa>
 8007328:	4770      	bx	lr
 800732a:	f803 1b01 	strb.w	r1, [r3], #1
 800732e:	e7f9      	b.n	8007324 <memset+0x4>

08007330 <_free_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4605      	mov	r5, r0
 8007334:	2900      	cmp	r1, #0
 8007336:	d040      	beq.n	80073ba <_free_r+0x8a>
 8007338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800733c:	1f0c      	subs	r4, r1, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfb8      	it	lt
 8007342:	18e4      	addlt	r4, r4, r3
 8007344:	f003 f84e 	bl	800a3e4 <__malloc_lock>
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <_free_r+0x8c>)
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	b933      	cbnz	r3, 800735c <_free_r+0x2c>
 800734e:	6063      	str	r3, [r4, #4]
 8007350:	6014      	str	r4, [r2, #0]
 8007352:	4628      	mov	r0, r5
 8007354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007358:	f003 b84a 	b.w	800a3f0 <__malloc_unlock>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d908      	bls.n	8007372 <_free_r+0x42>
 8007360:	6820      	ldr	r0, [r4, #0]
 8007362:	1821      	adds	r1, r4, r0
 8007364:	428b      	cmp	r3, r1
 8007366:	bf01      	itttt	eq
 8007368:	6819      	ldreq	r1, [r3, #0]
 800736a:	685b      	ldreq	r3, [r3, #4]
 800736c:	1809      	addeq	r1, r1, r0
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	e7ed      	b.n	800734e <_free_r+0x1e>
 8007372:	461a      	mov	r2, r3
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b10b      	cbz	r3, 800737c <_free_r+0x4c>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d9fa      	bls.n	8007372 <_free_r+0x42>
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	1850      	adds	r0, r2, r1
 8007380:	42a0      	cmp	r0, r4
 8007382:	d10b      	bne.n	800739c <_free_r+0x6c>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	4401      	add	r1, r0
 8007388:	1850      	adds	r0, r2, r1
 800738a:	4283      	cmp	r3, r0
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	d1e0      	bne.n	8007352 <_free_r+0x22>
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	4401      	add	r1, r0
 8007396:	6011      	str	r1, [r2, #0]
 8007398:	6053      	str	r3, [r2, #4]
 800739a:	e7da      	b.n	8007352 <_free_r+0x22>
 800739c:	d902      	bls.n	80073a4 <_free_r+0x74>
 800739e:	230c      	movs	r3, #12
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	e7d6      	b.n	8007352 <_free_r+0x22>
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	1821      	adds	r1, r4, r0
 80073a8:	428b      	cmp	r3, r1
 80073aa:	bf01      	itttt	eq
 80073ac:	6819      	ldreq	r1, [r3, #0]
 80073ae:	685b      	ldreq	r3, [r3, #4]
 80073b0:	1809      	addeq	r1, r1, r0
 80073b2:	6021      	streq	r1, [r4, #0]
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	6054      	str	r4, [r2, #4]
 80073b8:	e7cb      	b.n	8007352 <_free_r+0x22>
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20001674 	.word	0x20001674

080073c0 <sbrk_aligned>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0e      	ldr	r6, [pc, #56]	; (80073fc <sbrk_aligned+0x3c>)
 80073c4:	460c      	mov	r4, r1
 80073c6:	6831      	ldr	r1, [r6, #0]
 80073c8:	4605      	mov	r5, r0
 80073ca:	b911      	cbnz	r1, 80073d2 <sbrk_aligned+0x12>
 80073cc:	f000 fefa 	bl	80081c4 <_sbrk_r>
 80073d0:	6030      	str	r0, [r6, #0]
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 fef5 	bl	80081c4 <_sbrk_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d00a      	beq.n	80073f4 <sbrk_aligned+0x34>
 80073de:	1cc4      	adds	r4, r0, #3
 80073e0:	f024 0403 	bic.w	r4, r4, #3
 80073e4:	42a0      	cmp	r0, r4
 80073e6:	d007      	beq.n	80073f8 <sbrk_aligned+0x38>
 80073e8:	1a21      	subs	r1, r4, r0
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 feea 	bl	80081c4 <_sbrk_r>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d101      	bne.n	80073f8 <sbrk_aligned+0x38>
 80073f4:	f04f 34ff 	mov.w	r4, #4294967295
 80073f8:	4620      	mov	r0, r4
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	20001678 	.word	0x20001678

08007400 <_malloc_r>:
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	1ccd      	adds	r5, r1, #3
 8007406:	f025 0503 	bic.w	r5, r5, #3
 800740a:	3508      	adds	r5, #8
 800740c:	2d0c      	cmp	r5, #12
 800740e:	bf38      	it	cc
 8007410:	250c      	movcc	r5, #12
 8007412:	2d00      	cmp	r5, #0
 8007414:	4607      	mov	r7, r0
 8007416:	db01      	blt.n	800741c <_malloc_r+0x1c>
 8007418:	42a9      	cmp	r1, r5
 800741a:	d905      	bls.n	8007428 <_malloc_r+0x28>
 800741c:	230c      	movs	r3, #12
 800741e:	2600      	movs	r6, #0
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	4630      	mov	r0, r6
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	4e2e      	ldr	r6, [pc, #184]	; (80074e4 <_malloc_r+0xe4>)
 800742a:	f002 ffdb 	bl	800a3e4 <__malloc_lock>
 800742e:	6833      	ldr	r3, [r6, #0]
 8007430:	461c      	mov	r4, r3
 8007432:	bb34      	cbnz	r4, 8007482 <_malloc_r+0x82>
 8007434:	4629      	mov	r1, r5
 8007436:	4638      	mov	r0, r7
 8007438:	f7ff ffc2 	bl	80073c0 <sbrk_aligned>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	4604      	mov	r4, r0
 8007440:	d14d      	bne.n	80074de <_malloc_r+0xde>
 8007442:	6834      	ldr	r4, [r6, #0]
 8007444:	4626      	mov	r6, r4
 8007446:	2e00      	cmp	r6, #0
 8007448:	d140      	bne.n	80074cc <_malloc_r+0xcc>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	4631      	mov	r1, r6
 800744e:	4638      	mov	r0, r7
 8007450:	eb04 0803 	add.w	r8, r4, r3
 8007454:	f000 feb6 	bl	80081c4 <_sbrk_r>
 8007458:	4580      	cmp	r8, r0
 800745a:	d13a      	bne.n	80074d2 <_malloc_r+0xd2>
 800745c:	6821      	ldr	r1, [r4, #0]
 800745e:	3503      	adds	r5, #3
 8007460:	1a6d      	subs	r5, r5, r1
 8007462:	f025 0503 	bic.w	r5, r5, #3
 8007466:	3508      	adds	r5, #8
 8007468:	2d0c      	cmp	r5, #12
 800746a:	bf38      	it	cc
 800746c:	250c      	movcc	r5, #12
 800746e:	4638      	mov	r0, r7
 8007470:	4629      	mov	r1, r5
 8007472:	f7ff ffa5 	bl	80073c0 <sbrk_aligned>
 8007476:	3001      	adds	r0, #1
 8007478:	d02b      	beq.n	80074d2 <_malloc_r+0xd2>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	442b      	add	r3, r5
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	e00e      	b.n	80074a0 <_malloc_r+0xa0>
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	1b52      	subs	r2, r2, r5
 8007486:	d41e      	bmi.n	80074c6 <_malloc_r+0xc6>
 8007488:	2a0b      	cmp	r2, #11
 800748a:	d916      	bls.n	80074ba <_malloc_r+0xba>
 800748c:	1961      	adds	r1, r4, r5
 800748e:	42a3      	cmp	r3, r4
 8007490:	6025      	str	r5, [r4, #0]
 8007492:	bf18      	it	ne
 8007494:	6059      	strne	r1, [r3, #4]
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	bf08      	it	eq
 800749a:	6031      	streq	r1, [r6, #0]
 800749c:	5162      	str	r2, [r4, r5]
 800749e:	604b      	str	r3, [r1, #4]
 80074a0:	4638      	mov	r0, r7
 80074a2:	f104 060b 	add.w	r6, r4, #11
 80074a6:	f002 ffa3 	bl	800a3f0 <__malloc_unlock>
 80074aa:	f026 0607 	bic.w	r6, r6, #7
 80074ae:	1d23      	adds	r3, r4, #4
 80074b0:	1af2      	subs	r2, r6, r3
 80074b2:	d0b6      	beq.n	8007422 <_malloc_r+0x22>
 80074b4:	1b9b      	subs	r3, r3, r6
 80074b6:	50a3      	str	r3, [r4, r2]
 80074b8:	e7b3      	b.n	8007422 <_malloc_r+0x22>
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	42a3      	cmp	r3, r4
 80074be:	bf0c      	ite	eq
 80074c0:	6032      	streq	r2, [r6, #0]
 80074c2:	605a      	strne	r2, [r3, #4]
 80074c4:	e7ec      	b.n	80074a0 <_malloc_r+0xa0>
 80074c6:	4623      	mov	r3, r4
 80074c8:	6864      	ldr	r4, [r4, #4]
 80074ca:	e7b2      	b.n	8007432 <_malloc_r+0x32>
 80074cc:	4634      	mov	r4, r6
 80074ce:	6876      	ldr	r6, [r6, #4]
 80074d0:	e7b9      	b.n	8007446 <_malloc_r+0x46>
 80074d2:	230c      	movs	r3, #12
 80074d4:	4638      	mov	r0, r7
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	f002 ff8a 	bl	800a3f0 <__malloc_unlock>
 80074dc:	e7a1      	b.n	8007422 <_malloc_r+0x22>
 80074de:	6025      	str	r5, [r4, #0]
 80074e0:	e7de      	b.n	80074a0 <_malloc_r+0xa0>
 80074e2:	bf00      	nop
 80074e4:	20001674 	.word	0x20001674

080074e8 <__cvt>:
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ee:	461f      	mov	r7, r3
 80074f0:	bfbb      	ittet	lt
 80074f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80074f6:	461f      	movlt	r7, r3
 80074f8:	2300      	movge	r3, #0
 80074fa:	232d      	movlt	r3, #45	; 0x2d
 80074fc:	b088      	sub	sp, #32
 80074fe:	4614      	mov	r4, r2
 8007500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007502:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007504:	7013      	strb	r3, [r2, #0]
 8007506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007508:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800750c:	f023 0820 	bic.w	r8, r3, #32
 8007510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007514:	d005      	beq.n	8007522 <__cvt+0x3a>
 8007516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800751a:	d100      	bne.n	800751e <__cvt+0x36>
 800751c:	3501      	adds	r5, #1
 800751e:	2302      	movs	r3, #2
 8007520:	e000      	b.n	8007524 <__cvt+0x3c>
 8007522:	2303      	movs	r3, #3
 8007524:	aa07      	add	r2, sp, #28
 8007526:	9204      	str	r2, [sp, #16]
 8007528:	aa06      	add	r2, sp, #24
 800752a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800752e:	e9cd 3500 	strd	r3, r5, [sp]
 8007532:	4622      	mov	r2, r4
 8007534:	463b      	mov	r3, r7
 8007536:	f001 fdcf 	bl	80090d8 <_dtoa_r>
 800753a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800753e:	4606      	mov	r6, r0
 8007540:	d102      	bne.n	8007548 <__cvt+0x60>
 8007542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d522      	bpl.n	800758e <__cvt+0xa6>
 8007548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800754c:	eb06 0905 	add.w	r9, r6, r5
 8007550:	d110      	bne.n	8007574 <__cvt+0x8c>
 8007552:	7833      	ldrb	r3, [r6, #0]
 8007554:	2b30      	cmp	r3, #48	; 0x30
 8007556:	d10a      	bne.n	800756e <__cvt+0x86>
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	4620      	mov	r0, r4
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fa5e 	bl	8000a20 <__aeabi_dcmpeq>
 8007564:	b918      	cbnz	r0, 800756e <__cvt+0x86>
 8007566:	f1c5 0501 	rsb	r5, r5, #1
 800756a:	f8ca 5000 	str.w	r5, [sl]
 800756e:	f8da 3000 	ldr.w	r3, [sl]
 8007572:	4499      	add	r9, r3
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	4620      	mov	r0, r4
 800757a:	4639      	mov	r1, r7
 800757c:	f7f9 fa50 	bl	8000a20 <__aeabi_dcmpeq>
 8007580:	b108      	cbz	r0, 8007586 <__cvt+0x9e>
 8007582:	f8cd 901c 	str.w	r9, [sp, #28]
 8007586:	2230      	movs	r2, #48	; 0x30
 8007588:	9b07      	ldr	r3, [sp, #28]
 800758a:	454b      	cmp	r3, r9
 800758c:	d307      	bcc.n	800759e <__cvt+0xb6>
 800758e:	4630      	mov	r0, r6
 8007590:	9b07      	ldr	r3, [sp, #28]
 8007592:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007594:	1b9b      	subs	r3, r3, r6
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	b008      	add	sp, #32
 800759a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	9107      	str	r1, [sp, #28]
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	e7f0      	b.n	8007588 <__cvt+0xa0>

080075a6 <__exponent>:
 80075a6:	4603      	mov	r3, r0
 80075a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075aa:	2900      	cmp	r1, #0
 80075ac:	f803 2b02 	strb.w	r2, [r3], #2
 80075b0:	bfb6      	itet	lt
 80075b2:	222d      	movlt	r2, #45	; 0x2d
 80075b4:	222b      	movge	r2, #43	; 0x2b
 80075b6:	4249      	neglt	r1, r1
 80075b8:	2909      	cmp	r1, #9
 80075ba:	7042      	strb	r2, [r0, #1]
 80075bc:	dd2b      	ble.n	8007616 <__exponent+0x70>
 80075be:	f10d 0407 	add.w	r4, sp, #7
 80075c2:	46a4      	mov	ip, r4
 80075c4:	270a      	movs	r7, #10
 80075c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80075ca:	460a      	mov	r2, r1
 80075cc:	46a6      	mov	lr, r4
 80075ce:	fb07 1516 	mls	r5, r7, r6, r1
 80075d2:	2a63      	cmp	r2, #99	; 0x63
 80075d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80075d8:	4631      	mov	r1, r6
 80075da:	f104 34ff 	add.w	r4, r4, #4294967295
 80075de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075e2:	dcf0      	bgt.n	80075c6 <__exponent+0x20>
 80075e4:	3130      	adds	r1, #48	; 0x30
 80075e6:	f1ae 0502 	sub.w	r5, lr, #2
 80075ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075ee:	4629      	mov	r1, r5
 80075f0:	1c44      	adds	r4, r0, #1
 80075f2:	4561      	cmp	r1, ip
 80075f4:	d30a      	bcc.n	800760c <__exponent+0x66>
 80075f6:	f10d 0209 	add.w	r2, sp, #9
 80075fa:	eba2 020e 	sub.w	r2, r2, lr
 80075fe:	4565      	cmp	r5, ip
 8007600:	bf88      	it	hi
 8007602:	2200      	movhi	r2, #0
 8007604:	4413      	add	r3, r2
 8007606:	1a18      	subs	r0, r3, r0
 8007608:	b003      	add	sp, #12
 800760a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007610:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007614:	e7ed      	b.n	80075f2 <__exponent+0x4c>
 8007616:	2330      	movs	r3, #48	; 0x30
 8007618:	3130      	adds	r1, #48	; 0x30
 800761a:	7083      	strb	r3, [r0, #2]
 800761c:	70c1      	strb	r1, [r0, #3]
 800761e:	1d03      	adds	r3, r0, #4
 8007620:	e7f1      	b.n	8007606 <__exponent+0x60>
	...

08007624 <_printf_float>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	b091      	sub	sp, #68	; 0x44
 800762a:	460c      	mov	r4, r1
 800762c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007630:	4616      	mov	r6, r2
 8007632:	461f      	mov	r7, r3
 8007634:	4605      	mov	r5, r0
 8007636:	f002 fea3 	bl	800a380 <_localeconv_r>
 800763a:	6803      	ldr	r3, [r0, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	9309      	str	r3, [sp, #36]	; 0x24
 8007640:	f7f8 fdc2 	bl	80001c8 <strlen>
 8007644:	2300      	movs	r3, #0
 8007646:	930e      	str	r3, [sp, #56]	; 0x38
 8007648:	f8d8 3000 	ldr.w	r3, [r8]
 800764c:	900a      	str	r0, [sp, #40]	; 0x28
 800764e:	3307      	adds	r3, #7
 8007650:	f023 0307 	bic.w	r3, r3, #7
 8007654:	f103 0208 	add.w	r2, r3, #8
 8007658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800765c:	f8d4 b000 	ldr.w	fp, [r4]
 8007660:	f8c8 2000 	str.w	r2, [r8]
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800766c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007670:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007674:	930b      	str	r3, [sp, #44]	; 0x2c
 8007676:	f04f 32ff 	mov.w	r2, #4294967295
 800767a:	4640      	mov	r0, r8
 800767c:	4b9c      	ldr	r3, [pc, #624]	; (80078f0 <_printf_float+0x2cc>)
 800767e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007680:	f7f9 fa00 	bl	8000a84 <__aeabi_dcmpun>
 8007684:	bb70      	cbnz	r0, 80076e4 <_printf_float+0xc0>
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	4640      	mov	r0, r8
 800768c:	4b98      	ldr	r3, [pc, #608]	; (80078f0 <_printf_float+0x2cc>)
 800768e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007690:	f7f9 f9da 	bl	8000a48 <__aeabi_dcmple>
 8007694:	bb30      	cbnz	r0, 80076e4 <_printf_float+0xc0>
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	4640      	mov	r0, r8
 800769c:	4651      	mov	r1, sl
 800769e:	f7f9 f9c9 	bl	8000a34 <__aeabi_dcmplt>
 80076a2:	b110      	cbz	r0, 80076aa <_printf_float+0x86>
 80076a4:	232d      	movs	r3, #45	; 0x2d
 80076a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076aa:	4b92      	ldr	r3, [pc, #584]	; (80078f4 <_printf_float+0x2d0>)
 80076ac:	4892      	ldr	r0, [pc, #584]	; (80078f8 <_printf_float+0x2d4>)
 80076ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80076b2:	bf94      	ite	ls
 80076b4:	4698      	movls	r8, r3
 80076b6:	4680      	movhi	r8, r0
 80076b8:	2303      	movs	r3, #3
 80076ba:	f04f 0a00 	mov.w	sl, #0
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	f02b 0304 	bic.w	r3, fp, #4
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	4633      	mov	r3, r6
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	9700      	str	r7, [sp, #0]
 80076ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80076d0:	f000 f9d4 	bl	8007a7c <_printf_common>
 80076d4:	3001      	adds	r0, #1
 80076d6:	f040 8090 	bne.w	80077fa <_printf_float+0x1d6>
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	b011      	add	sp, #68	; 0x44
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	4642      	mov	r2, r8
 80076e6:	4653      	mov	r3, sl
 80076e8:	4640      	mov	r0, r8
 80076ea:	4651      	mov	r1, sl
 80076ec:	f7f9 f9ca 	bl	8000a84 <__aeabi_dcmpun>
 80076f0:	b148      	cbz	r0, 8007706 <_printf_float+0xe2>
 80076f2:	f1ba 0f00 	cmp.w	sl, #0
 80076f6:	bfb8      	it	lt
 80076f8:	232d      	movlt	r3, #45	; 0x2d
 80076fa:	4880      	ldr	r0, [pc, #512]	; (80078fc <_printf_float+0x2d8>)
 80076fc:	bfb8      	it	lt
 80076fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007702:	4b7f      	ldr	r3, [pc, #508]	; (8007900 <_printf_float+0x2dc>)
 8007704:	e7d3      	b.n	80076ae <_printf_float+0x8a>
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	d142      	bne.n	8007796 <_printf_float+0x172>
 8007710:	2306      	movs	r3, #6
 8007712:	6063      	str	r3, [r4, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	9206      	str	r2, [sp, #24]
 8007718:	aa0e      	add	r2, sp, #56	; 0x38
 800771a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800771e:	aa0d      	add	r2, sp, #52	; 0x34
 8007720:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007724:	9203      	str	r2, [sp, #12]
 8007726:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800772a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800772e:	6023      	str	r3, [r4, #0]
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	4642      	mov	r2, r8
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4628      	mov	r0, r5
 8007738:	4653      	mov	r3, sl
 800773a:	910b      	str	r1, [sp, #44]	; 0x2c
 800773c:	f7ff fed4 	bl	80074e8 <__cvt>
 8007740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007742:	4680      	mov	r8, r0
 8007744:	2947      	cmp	r1, #71	; 0x47
 8007746:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007748:	d108      	bne.n	800775c <_printf_float+0x138>
 800774a:	1cc8      	adds	r0, r1, #3
 800774c:	db02      	blt.n	8007754 <_printf_float+0x130>
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	4299      	cmp	r1, r3
 8007752:	dd40      	ble.n	80077d6 <_printf_float+0x1b2>
 8007754:	f1a9 0902 	sub.w	r9, r9, #2
 8007758:	fa5f f989 	uxtb.w	r9, r9
 800775c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007760:	d81f      	bhi.n	80077a2 <_printf_float+0x17e>
 8007762:	464a      	mov	r2, r9
 8007764:	3901      	subs	r1, #1
 8007766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800776a:	910d      	str	r1, [sp, #52]	; 0x34
 800776c:	f7ff ff1b 	bl	80075a6 <__exponent>
 8007770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007772:	4682      	mov	sl, r0
 8007774:	1813      	adds	r3, r2, r0
 8007776:	2a01      	cmp	r2, #1
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	dc02      	bgt.n	8007782 <_printf_float+0x15e>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	07d2      	lsls	r2, r2, #31
 8007780:	d501      	bpl.n	8007786 <_printf_float+0x162>
 8007782:	3301      	adds	r3, #1
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800778a:	2b00      	cmp	r3, #0
 800778c:	d09b      	beq.n	80076c6 <_printf_float+0xa2>
 800778e:	232d      	movs	r3, #45	; 0x2d
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007794:	e797      	b.n	80076c6 <_printf_float+0xa2>
 8007796:	2947      	cmp	r1, #71	; 0x47
 8007798:	d1bc      	bne.n	8007714 <_printf_float+0xf0>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1ba      	bne.n	8007714 <_printf_float+0xf0>
 800779e:	2301      	movs	r3, #1
 80077a0:	e7b7      	b.n	8007712 <_printf_float+0xee>
 80077a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80077a6:	d118      	bne.n	80077da <_printf_float+0x1b6>
 80077a8:	2900      	cmp	r1, #0
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	dd0b      	ble.n	80077c6 <_printf_float+0x1a2>
 80077ae:	6121      	str	r1, [r4, #16]
 80077b0:	b913      	cbnz	r3, 80077b8 <_printf_float+0x194>
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	07d0      	lsls	r0, r2, #31
 80077b6:	d502      	bpl.n	80077be <_printf_float+0x19a>
 80077b8:	3301      	adds	r3, #1
 80077ba:	440b      	add	r3, r1
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	f04f 0a00 	mov.w	sl, #0
 80077c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80077c4:	e7df      	b.n	8007786 <_printf_float+0x162>
 80077c6:	b913      	cbnz	r3, 80077ce <_printf_float+0x1aa>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	07d2      	lsls	r2, r2, #31
 80077cc:	d501      	bpl.n	80077d2 <_printf_float+0x1ae>
 80077ce:	3302      	adds	r3, #2
 80077d0:	e7f4      	b.n	80077bc <_printf_float+0x198>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7f2      	b.n	80077bc <_printf_float+0x198>
 80077d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80077da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077dc:	4299      	cmp	r1, r3
 80077de:	db05      	blt.n	80077ec <_printf_float+0x1c8>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	6121      	str	r1, [r4, #16]
 80077e4:	07d8      	lsls	r0, r3, #31
 80077e6:	d5ea      	bpl.n	80077be <_printf_float+0x19a>
 80077e8:	1c4b      	adds	r3, r1, #1
 80077ea:	e7e7      	b.n	80077bc <_printf_float+0x198>
 80077ec:	2900      	cmp	r1, #0
 80077ee:	bfcc      	ite	gt
 80077f0:	2201      	movgt	r2, #1
 80077f2:	f1c1 0202 	rsble	r2, r1, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	e7e0      	b.n	80077bc <_printf_float+0x198>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	055a      	lsls	r2, r3, #21
 80077fe:	d407      	bmi.n	8007810 <_printf_float+0x1ec>
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	4642      	mov	r2, r8
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	d12b      	bne.n	8007866 <_printf_float+0x242>
 800780e:	e764      	b.n	80076da <_printf_float+0xb6>
 8007810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007814:	f240 80dd 	bls.w	80079d2 <_printf_float+0x3ae>
 8007818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	f7f9 f8fe 	bl	8000a20 <__aeabi_dcmpeq>
 8007824:	2800      	cmp	r0, #0
 8007826:	d033      	beq.n	8007890 <_printf_float+0x26c>
 8007828:	2301      	movs	r3, #1
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	4a35      	ldr	r2, [pc, #212]	; (8007904 <_printf_float+0x2e0>)
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f af51 	beq.w	80076da <_printf_float+0xb6>
 8007838:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800783c:	429a      	cmp	r2, r3
 800783e:	db02      	blt.n	8007846 <_printf_float+0x222>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	07d8      	lsls	r0, r3, #31
 8007844:	d50f      	bpl.n	8007866 <_printf_float+0x242>
 8007846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f af42 	beq.w	80076da <_printf_float+0xb6>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	f104 091a 	add.w	r9, r4, #26
 800785e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007860:	3b01      	subs	r3, #1
 8007862:	4543      	cmp	r3, r8
 8007864:	dc09      	bgt.n	800787a <_printf_float+0x256>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	079b      	lsls	r3, r3, #30
 800786a:	f100 8102 	bmi.w	8007a72 <_printf_float+0x44e>
 800786e:	68e0      	ldr	r0, [r4, #12]
 8007870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007872:	4298      	cmp	r0, r3
 8007874:	bfb8      	it	lt
 8007876:	4618      	movlt	r0, r3
 8007878:	e731      	b.n	80076de <_printf_float+0xba>
 800787a:	2301      	movs	r3, #1
 800787c:	464a      	mov	r2, r9
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	f43f af28 	beq.w	80076da <_printf_float+0xb6>
 800788a:	f108 0801 	add.w	r8, r8, #1
 800788e:	e7e6      	b.n	800785e <_printf_float+0x23a>
 8007890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007892:	2b00      	cmp	r3, #0
 8007894:	dc38      	bgt.n	8007908 <_printf_float+0x2e4>
 8007896:	2301      	movs	r3, #1
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <_printf_float+0x2e0>)
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f af1a 	beq.w	80076da <_printf_float+0xb6>
 80078a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078aa:	4313      	orrs	r3, r2
 80078ac:	d102      	bne.n	80078b4 <_printf_float+0x290>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	07d9      	lsls	r1, r3, #31
 80078b2:	d5d8      	bpl.n	8007866 <_printf_float+0x242>
 80078b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f af0b 	beq.w	80076da <_printf_float+0xb6>
 80078c4:	f04f 0900 	mov.w	r9, #0
 80078c8:	f104 0a1a 	add.w	sl, r4, #26
 80078cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ce:	425b      	negs	r3, r3
 80078d0:	454b      	cmp	r3, r9
 80078d2:	dc01      	bgt.n	80078d8 <_printf_float+0x2b4>
 80078d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d6:	e794      	b.n	8007802 <_printf_float+0x1de>
 80078d8:	2301      	movs	r3, #1
 80078da:	4652      	mov	r2, sl
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f aef9 	beq.w	80076da <_printf_float+0xb6>
 80078e8:	f109 0901 	add.w	r9, r9, #1
 80078ec:	e7ee      	b.n	80078cc <_printf_float+0x2a8>
 80078ee:	bf00      	nop
 80078f0:	7fefffff 	.word	0x7fefffff
 80078f4:	0800bc90 	.word	0x0800bc90
 80078f8:	0800bc94 	.word	0x0800bc94
 80078fc:	0800bc9c 	.word	0x0800bc9c
 8007900:	0800bc98 	.word	0x0800bc98
 8007904:	0800bca0 	.word	0x0800bca0
 8007908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800790c:	429a      	cmp	r2, r3
 800790e:	bfa8      	it	ge
 8007910:	461a      	movge	r2, r3
 8007912:	2a00      	cmp	r2, #0
 8007914:	4691      	mov	r9, r2
 8007916:	dc37      	bgt.n	8007988 <_printf_float+0x364>
 8007918:	f04f 0b00 	mov.w	fp, #0
 800791c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007920:	f104 021a 	add.w	r2, r4, #26
 8007924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007928:	ebaa 0309 	sub.w	r3, sl, r9
 800792c:	455b      	cmp	r3, fp
 800792e:	dc33      	bgt.n	8007998 <_printf_float+0x374>
 8007930:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007934:	429a      	cmp	r2, r3
 8007936:	db3b      	blt.n	80079b0 <_printf_float+0x38c>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d438      	bmi.n	80079b0 <_printf_float+0x38c>
 800793e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007942:	eba3 020a 	sub.w	r2, r3, sl
 8007946:	eba3 0901 	sub.w	r9, r3, r1
 800794a:	4591      	cmp	r9, r2
 800794c:	bfa8      	it	ge
 800794e:	4691      	movge	r9, r2
 8007950:	f1b9 0f00 	cmp.w	r9, #0
 8007954:	dc34      	bgt.n	80079c0 <_printf_float+0x39c>
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800795e:	f104 0a1a 	add.w	sl, r4, #26
 8007962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	eba3 0309 	sub.w	r3, r3, r9
 800796c:	4543      	cmp	r3, r8
 800796e:	f77f af7a 	ble.w	8007866 <_printf_float+0x242>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f aeac 	beq.w	80076da <_printf_float+0xb6>
 8007982:	f108 0801 	add.w	r8, r8, #1
 8007986:	e7ec      	b.n	8007962 <_printf_float+0x33e>
 8007988:	4613      	mov	r3, r2
 800798a:	4631      	mov	r1, r6
 800798c:	4642      	mov	r2, r8
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	d1c0      	bne.n	8007918 <_printf_float+0x2f4>
 8007996:	e6a0      	b.n	80076da <_printf_float+0xb6>
 8007998:	2301      	movs	r3, #1
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	920b      	str	r2, [sp, #44]	; 0x2c
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f ae99 	beq.w	80076da <_printf_float+0xb6>
 80079a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079aa:	f10b 0b01 	add.w	fp, fp, #1
 80079ae:	e7b9      	b.n	8007924 <_printf_float+0x300>
 80079b0:	4631      	mov	r1, r6
 80079b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	d1bf      	bne.n	800793e <_printf_float+0x31a>
 80079be:	e68c      	b.n	80076da <_printf_float+0xb6>
 80079c0:	464b      	mov	r3, r9
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	eb08 020a 	add.w	r2, r8, sl
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	d1c2      	bne.n	8007956 <_printf_float+0x332>
 80079d0:	e683      	b.n	80076da <_printf_float+0xb6>
 80079d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079d4:	2a01      	cmp	r2, #1
 80079d6:	dc01      	bgt.n	80079dc <_printf_float+0x3b8>
 80079d8:	07db      	lsls	r3, r3, #31
 80079da:	d537      	bpl.n	8007a4c <_printf_float+0x428>
 80079dc:	2301      	movs	r3, #1
 80079de:	4642      	mov	r2, r8
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f ae77 	beq.w	80076da <_printf_float+0xb6>
 80079ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f ae6f 	beq.w	80076da <_printf_float+0xb6>
 80079fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	f7f9 f80c 	bl	8000a20 <__aeabi_dcmpeq>
 8007a08:	b9d8      	cbnz	r0, 8007a42 <_printf_float+0x41e>
 8007a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a0c:	f108 0201 	add.w	r2, r8, #1
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d10e      	bne.n	8007a3a <_printf_float+0x416>
 8007a1c:	e65d      	b.n	80076da <_printf_float+0xb6>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	464a      	mov	r2, r9
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f ae56 	beq.w	80076da <_printf_float+0xb6>
 8007a2e:	f108 0801 	add.w	r8, r8, #1
 8007a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a34:	3b01      	subs	r3, #1
 8007a36:	4543      	cmp	r3, r8
 8007a38:	dcf1      	bgt.n	8007a1e <_printf_float+0x3fa>
 8007a3a:	4653      	mov	r3, sl
 8007a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a40:	e6e0      	b.n	8007804 <_printf_float+0x1e0>
 8007a42:	f04f 0800 	mov.w	r8, #0
 8007a46:	f104 091a 	add.w	r9, r4, #26
 8007a4a:	e7f2      	b.n	8007a32 <_printf_float+0x40e>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4642      	mov	r2, r8
 8007a50:	e7df      	b.n	8007a12 <_printf_float+0x3ee>
 8007a52:	2301      	movs	r3, #1
 8007a54:	464a      	mov	r2, r9
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b8      	blx	r7
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f43f ae3c 	beq.w	80076da <_printf_float+0xb6>
 8007a62:	f108 0801 	add.w	r8, r8, #1
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a6a:	1a5b      	subs	r3, r3, r1
 8007a6c:	4543      	cmp	r3, r8
 8007a6e:	dcf0      	bgt.n	8007a52 <_printf_float+0x42e>
 8007a70:	e6fd      	b.n	800786e <_printf_float+0x24a>
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	f104 0919 	add.w	r9, r4, #25
 8007a7a:	e7f4      	b.n	8007a66 <_printf_float+0x442>

08007a7c <_printf_common>:
 8007a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	4616      	mov	r6, r2
 8007a82:	4699      	mov	r9, r3
 8007a84:	688a      	ldr	r2, [r1, #8]
 8007a86:	690b      	ldr	r3, [r1, #16]
 8007a88:	4607      	mov	r7, r0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bfb8      	it	lt
 8007a8e:	4613      	movlt	r3, r2
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a96:	460c      	mov	r4, r1
 8007a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a9c:	b10a      	cbz	r2, 8007aa2 <_printf_common+0x26>
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	6033      	str	r3, [r6, #0]
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	0699      	lsls	r1, r3, #26
 8007aa6:	bf42      	ittt	mi
 8007aa8:	6833      	ldrmi	r3, [r6, #0]
 8007aaa:	3302      	addmi	r3, #2
 8007aac:	6033      	strmi	r3, [r6, #0]
 8007aae:	6825      	ldr	r5, [r4, #0]
 8007ab0:	f015 0506 	ands.w	r5, r5, #6
 8007ab4:	d106      	bne.n	8007ac4 <_printf_common+0x48>
 8007ab6:	f104 0a19 	add.w	sl, r4, #25
 8007aba:	68e3      	ldr	r3, [r4, #12]
 8007abc:	6832      	ldr	r2, [r6, #0]
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	42ab      	cmp	r3, r5
 8007ac2:	dc28      	bgt.n	8007b16 <_printf_common+0x9a>
 8007ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ac8:	1e13      	subs	r3, r2, #0
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	bf18      	it	ne
 8007ace:	2301      	movne	r3, #1
 8007ad0:	0692      	lsls	r2, r2, #26
 8007ad2:	d42d      	bmi.n	8007b30 <_printf_common+0xb4>
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007adc:	47c0      	blx	r8
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d020      	beq.n	8007b24 <_printf_common+0xa8>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	68e5      	ldr	r5, [r4, #12]
 8007ae6:	f003 0306 	and.w	r3, r3, #6
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	bf18      	it	ne
 8007aee:	2500      	movne	r5, #0
 8007af0:	6832      	ldr	r2, [r6, #0]
 8007af2:	f04f 0600 	mov.w	r6, #0
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	bf08      	it	eq
 8007afa:	1aad      	subeq	r5, r5, r2
 8007afc:	6922      	ldr	r2, [r4, #16]
 8007afe:	bf08      	it	eq
 8007b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b04:	4293      	cmp	r3, r2
 8007b06:	bfc4      	itt	gt
 8007b08:	1a9b      	subgt	r3, r3, r2
 8007b0a:	18ed      	addgt	r5, r5, r3
 8007b0c:	341a      	adds	r4, #26
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	d11a      	bne.n	8007b48 <_printf_common+0xcc>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e008      	b.n	8007b28 <_printf_common+0xac>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	47c0      	blx	r8
 8007b20:	3001      	adds	r0, #1
 8007b22:	d103      	bne.n	8007b2c <_printf_common+0xb0>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	e7c4      	b.n	8007aba <_printf_common+0x3e>
 8007b30:	2030      	movs	r0, #48	; 0x30
 8007b32:	18e1      	adds	r1, r4, r3
 8007b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b3e:	4422      	add	r2, r4
 8007b40:	3302      	adds	r3, #2
 8007b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b46:	e7c5      	b.n	8007ad4 <_printf_common+0x58>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0e6      	beq.n	8007b24 <_printf_common+0xa8>
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7d9      	b.n	8007b0e <_printf_common+0x92>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	7e0f      	ldrb	r7, [r1, #24]
 8007b62:	4691      	mov	r9, r2
 8007b64:	2f78      	cmp	r7, #120	; 0x78
 8007b66:	4680      	mov	r8, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	469a      	mov	sl, r3
 8007b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	; 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d9 	beq.w	8007d30 <_printf_i+0x1d4>
 8007b7e:	2f58      	cmp	r7, #88	; 0x58
 8007b80:	f000 80a4 	beq.w	8007ccc <_printf_i+0x170>
 8007b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a101      	add	r1, pc, #4	; (adr r1, 8007b9c <_printf_i+0x40>)
 8007b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d17 	.word	0x08007d17
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007cf9 	.word	0x08007cf9
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d39 	.word	0x08007d39
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007d01 	.word	0x08007d01
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	602a      	str	r2, [r5, #0]
 8007bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0a4      	b.n	8007d52 <_printf_i+0x1f6>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	6829      	ldr	r1, [r5, #0]
 8007c0c:	0606      	lsls	r6, r0, #24
 8007c0e:	f101 0304 	add.w	r3, r1, #4
 8007c12:	d50a      	bpl.n	8007c2a <_printf_i+0xce>
 8007c14:	680e      	ldr	r6, [r1, #0]
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	da03      	bge.n	8007c24 <_printf_i+0xc8>
 8007c1c:	232d      	movs	r3, #45	; 0x2d
 8007c1e:	4276      	negs	r6, r6
 8007c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c24:	230a      	movs	r3, #10
 8007c26:	485e      	ldr	r0, [pc, #376]	; (8007da0 <_printf_i+0x244>)
 8007c28:	e019      	b.n	8007c5e <_printf_i+0x102>
 8007c2a:	680e      	ldr	r6, [r1, #0]
 8007c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	bf18      	it	ne
 8007c34:	b236      	sxthne	r6, r6
 8007c36:	e7ef      	b.n	8007c18 <_printf_i+0xbc>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	6820      	ldr	r0, [r4, #0]
 8007c3c:	1d19      	adds	r1, r3, #4
 8007c3e:	6029      	str	r1, [r5, #0]
 8007c40:	0601      	lsls	r1, r0, #24
 8007c42:	d501      	bpl.n	8007c48 <_printf_i+0xec>
 8007c44:	681e      	ldr	r6, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <_printf_i+0xf2>
 8007c48:	0646      	lsls	r6, r0, #25
 8007c4a:	d5fb      	bpl.n	8007c44 <_printf_i+0xe8>
 8007c4c:	881e      	ldrh	r6, [r3, #0]
 8007c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8007c50:	bf0c      	ite	eq
 8007c52:	2308      	moveq	r3, #8
 8007c54:	230a      	movne	r3, #10
 8007c56:	4852      	ldr	r0, [pc, #328]	; (8007da0 <_printf_i+0x244>)
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c5e:	6865      	ldr	r5, [r4, #4]
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	bfa8      	it	ge
 8007c64:	6821      	ldrge	r1, [r4, #0]
 8007c66:	60a5      	str	r5, [r4, #8]
 8007c68:	bfa4      	itt	ge
 8007c6a:	f021 0104 	bicge.w	r1, r1, #4
 8007c6e:	6021      	strge	r1, [r4, #0]
 8007c70:	b90e      	cbnz	r6, 8007c76 <_printf_i+0x11a>
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	d04d      	beq.n	8007d12 <_printf_i+0x1b6>
 8007c76:	4615      	mov	r5, r2
 8007c78:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c7c:	fb03 6711 	mls	r7, r3, r1, r6
 8007c80:	5dc7      	ldrb	r7, [r0, r7]
 8007c82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c86:	4637      	mov	r7, r6
 8007c88:	42bb      	cmp	r3, r7
 8007c8a:	460e      	mov	r6, r1
 8007c8c:	d9f4      	bls.n	8007c78 <_printf_i+0x11c>
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d10b      	bne.n	8007caa <_printf_i+0x14e>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	07de      	lsls	r6, r3, #31
 8007c96:	d508      	bpl.n	8007caa <_printf_i+0x14e>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	6861      	ldr	r1, [r4, #4]
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	bfde      	ittt	le
 8007ca0:	2330      	movle	r3, #48	; 0x30
 8007ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007caa:	1b52      	subs	r2, r2, r5
 8007cac:	6122      	str	r2, [r4, #16]
 8007cae:	464b      	mov	r3, r9
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f8cd a000 	str.w	sl, [sp]
 8007cb8:	aa03      	add	r2, sp, #12
 8007cba:	f7ff fedf 	bl	8007a7c <_printf_common>
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d14c      	bne.n	8007d5c <_printf_i+0x200>
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	b004      	add	sp, #16
 8007cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ccc:	4834      	ldr	r0, [pc, #208]	; (8007da0 <_printf_i+0x244>)
 8007cce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cd2:	6829      	ldr	r1, [r5, #0]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cda:	6029      	str	r1, [r5, #0]
 8007cdc:	061d      	lsls	r5, r3, #24
 8007cde:	d514      	bpl.n	8007d0a <_printf_i+0x1ae>
 8007ce0:	07df      	lsls	r7, r3, #31
 8007ce2:	bf44      	itt	mi
 8007ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce8:	6023      	strmi	r3, [r4, #0]
 8007cea:	b91e      	cbnz	r6, 8007cf4 <_printf_i+0x198>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	f023 0320 	bic.w	r3, r3, #32
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	e7af      	b.n	8007c58 <_printf_i+0xfc>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	2378      	movs	r3, #120	; 0x78
 8007d02:	4828      	ldr	r0, [pc, #160]	; (8007da4 <_printf_i+0x248>)
 8007d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d08:	e7e3      	b.n	8007cd2 <_printf_i+0x176>
 8007d0a:	0659      	lsls	r1, r3, #25
 8007d0c:	bf48      	it	mi
 8007d0e:	b2b6      	uxthmi	r6, r6
 8007d10:	e7e6      	b.n	8007ce0 <_printf_i+0x184>
 8007d12:	4615      	mov	r5, r2
 8007d14:	e7bb      	b.n	8007c8e <_printf_i+0x132>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	6826      	ldr	r6, [r4, #0]
 8007d1a:	1d18      	adds	r0, r3, #4
 8007d1c:	6961      	ldr	r1, [r4, #20]
 8007d1e:	6028      	str	r0, [r5, #0]
 8007d20:	0635      	lsls	r5, r6, #24
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	d501      	bpl.n	8007d2a <_printf_i+0x1ce>
 8007d26:	6019      	str	r1, [r3, #0]
 8007d28:	e002      	b.n	8007d30 <_printf_i+0x1d4>
 8007d2a:	0670      	lsls	r0, r6, #25
 8007d2c:	d5fb      	bpl.n	8007d26 <_printf_i+0x1ca>
 8007d2e:	8019      	strh	r1, [r3, #0]
 8007d30:	2300      	movs	r3, #0
 8007d32:	4615      	mov	r5, r2
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	e7ba      	b.n	8007cae <_printf_i+0x152>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	1d1a      	adds	r2, r3, #4
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	681d      	ldr	r5, [r3, #0]
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	4628      	mov	r0, r5
 8007d46:	f002 fb31 	bl	800a3ac <memchr>
 8007d4a:	b108      	cbz	r0, 8007d50 <_printf_i+0x1f4>
 8007d4c:	1b40      	subs	r0, r0, r5
 8007d4e:	6060      	str	r0, [r4, #4]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	2300      	movs	r3, #0
 8007d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d5a:	e7a8      	b.n	8007cae <_printf_i+0x152>
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	47d0      	blx	sl
 8007d66:	3001      	adds	r0, #1
 8007d68:	d0ab      	beq.n	8007cc2 <_printf_i+0x166>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	079b      	lsls	r3, r3, #30
 8007d6e:	d413      	bmi.n	8007d98 <_printf_i+0x23c>
 8007d70:	68e0      	ldr	r0, [r4, #12]
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	4298      	cmp	r0, r3
 8007d76:	bfb8      	it	lt
 8007d78:	4618      	movlt	r0, r3
 8007d7a:	e7a4      	b.n	8007cc6 <_printf_i+0x16a>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4632      	mov	r2, r6
 8007d80:	4649      	mov	r1, r9
 8007d82:	4640      	mov	r0, r8
 8007d84:	47d0      	blx	sl
 8007d86:	3001      	adds	r0, #1
 8007d88:	d09b      	beq.n	8007cc2 <_printf_i+0x166>
 8007d8a:	3501      	adds	r5, #1
 8007d8c:	68e3      	ldr	r3, [r4, #12]
 8007d8e:	9903      	ldr	r1, [sp, #12]
 8007d90:	1a5b      	subs	r3, r3, r1
 8007d92:	42ab      	cmp	r3, r5
 8007d94:	dcf2      	bgt.n	8007d7c <_printf_i+0x220>
 8007d96:	e7eb      	b.n	8007d70 <_printf_i+0x214>
 8007d98:	2500      	movs	r5, #0
 8007d9a:	f104 0619 	add.w	r6, r4, #25
 8007d9e:	e7f5      	b.n	8007d8c <_printf_i+0x230>
 8007da0:	0800bca2 	.word	0x0800bca2
 8007da4:	0800bcb3 	.word	0x0800bcb3

08007da8 <_scanf_float>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b087      	sub	sp, #28
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	688b      	ldr	r3, [r1, #8]
 8007db2:	4617      	mov	r7, r2
 8007db4:	1e5a      	subs	r2, r3, #1
 8007db6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007dba:	bf85      	ittet	hi
 8007dbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007dc0:	195b      	addhi	r3, r3, r5
 8007dc2:	2300      	movls	r3, #0
 8007dc4:	9302      	strhi	r3, [sp, #8]
 8007dc6:	bf88      	it	hi
 8007dc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007dcc:	468b      	mov	fp, r1
 8007dce:	f04f 0500 	mov.w	r5, #0
 8007dd2:	bf8c      	ite	hi
 8007dd4:	608b      	strhi	r3, [r1, #8]
 8007dd6:	9302      	strls	r3, [sp, #8]
 8007dd8:	680b      	ldr	r3, [r1, #0]
 8007dda:	4680      	mov	r8, r0
 8007ddc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007de0:	f84b 3b1c 	str.w	r3, [fp], #28
 8007de4:	460c      	mov	r4, r1
 8007de6:	465e      	mov	r6, fp
 8007de8:	46aa      	mov	sl, r5
 8007dea:	46a9      	mov	r9, r5
 8007dec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007df0:	9501      	str	r5, [sp, #4]
 8007df2:	68a2      	ldr	r2, [r4, #8]
 8007df4:	b152      	cbz	r2, 8007e0c <_scanf_float+0x64>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8007dfc:	d864      	bhi.n	8007ec8 <_scanf_float+0x120>
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	d83c      	bhi.n	8007e7c <_scanf_float+0xd4>
 8007e02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e06:	b2c8      	uxtb	r0, r1
 8007e08:	280e      	cmp	r0, #14
 8007e0a:	d93a      	bls.n	8007e82 <_scanf_float+0xda>
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	d003      	beq.n	8007e1a <_scanf_float+0x72>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e1e:	f1ba 0f01 	cmp.w	sl, #1
 8007e22:	f200 8113 	bhi.w	800804c <_scanf_float+0x2a4>
 8007e26:	455e      	cmp	r6, fp
 8007e28:	f200 8105 	bhi.w	8008036 <_scanf_float+0x28e>
 8007e2c:	2501      	movs	r5, #1
 8007e2e:	4628      	mov	r0, r5
 8007e30:	b007      	add	sp, #28
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e3a:	2a0d      	cmp	r2, #13
 8007e3c:	d8e6      	bhi.n	8007e0c <_scanf_float+0x64>
 8007e3e:	a101      	add	r1, pc, #4	; (adr r1, 8007e44 <_scanf_float+0x9c>)
 8007e40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e44:	08007f83 	.word	0x08007f83
 8007e48:	08007e0d 	.word	0x08007e0d
 8007e4c:	08007e0d 	.word	0x08007e0d
 8007e50:	08007e0d 	.word	0x08007e0d
 8007e54:	08007fe3 	.word	0x08007fe3
 8007e58:	08007fbb 	.word	0x08007fbb
 8007e5c:	08007e0d 	.word	0x08007e0d
 8007e60:	08007e0d 	.word	0x08007e0d
 8007e64:	08007f91 	.word	0x08007f91
 8007e68:	08007e0d 	.word	0x08007e0d
 8007e6c:	08007e0d 	.word	0x08007e0d
 8007e70:	08007e0d 	.word	0x08007e0d
 8007e74:	08007e0d 	.word	0x08007e0d
 8007e78:	08007f49 	.word	0x08007f49
 8007e7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e80:	e7db      	b.n	8007e3a <_scanf_float+0x92>
 8007e82:	290e      	cmp	r1, #14
 8007e84:	d8c2      	bhi.n	8007e0c <_scanf_float+0x64>
 8007e86:	a001      	add	r0, pc, #4	; (adr r0, 8007e8c <_scanf_float+0xe4>)
 8007e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e8c:	08007f3b 	.word	0x08007f3b
 8007e90:	08007e0d 	.word	0x08007e0d
 8007e94:	08007f3b 	.word	0x08007f3b
 8007e98:	08007fcf 	.word	0x08007fcf
 8007e9c:	08007e0d 	.word	0x08007e0d
 8007ea0:	08007ee9 	.word	0x08007ee9
 8007ea4:	08007f25 	.word	0x08007f25
 8007ea8:	08007f25 	.word	0x08007f25
 8007eac:	08007f25 	.word	0x08007f25
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f25 	.word	0x08007f25
 8007eb8:	08007f25 	.word	0x08007f25
 8007ebc:	08007f25 	.word	0x08007f25
 8007ec0:	08007f25 	.word	0x08007f25
 8007ec4:	08007f25 	.word	0x08007f25
 8007ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8007eca:	d809      	bhi.n	8007ee0 <_scanf_float+0x138>
 8007ecc:	2b60      	cmp	r3, #96	; 0x60
 8007ece:	d8b2      	bhi.n	8007e36 <_scanf_float+0x8e>
 8007ed0:	2b54      	cmp	r3, #84	; 0x54
 8007ed2:	d077      	beq.n	8007fc4 <_scanf_float+0x21c>
 8007ed4:	2b59      	cmp	r3, #89	; 0x59
 8007ed6:	d199      	bne.n	8007e0c <_scanf_float+0x64>
 8007ed8:	2d07      	cmp	r5, #7
 8007eda:	d197      	bne.n	8007e0c <_scanf_float+0x64>
 8007edc:	2508      	movs	r5, #8
 8007ede:	e029      	b.n	8007f34 <_scanf_float+0x18c>
 8007ee0:	2b74      	cmp	r3, #116	; 0x74
 8007ee2:	d06f      	beq.n	8007fc4 <_scanf_float+0x21c>
 8007ee4:	2b79      	cmp	r3, #121	; 0x79
 8007ee6:	e7f6      	b.n	8007ed6 <_scanf_float+0x12e>
 8007ee8:	6821      	ldr	r1, [r4, #0]
 8007eea:	05c8      	lsls	r0, r1, #23
 8007eec:	d51a      	bpl.n	8007f24 <_scanf_float+0x17c>
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ef4:	6021      	str	r1, [r4, #0]
 8007ef6:	f109 0901 	add.w	r9, r9, #1
 8007efa:	b11b      	cbz	r3, 8007f04 <_scanf_float+0x15c>
 8007efc:	3b01      	subs	r3, #1
 8007efe:	3201      	adds	r2, #1
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	60a2      	str	r2, [r4, #8]
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	607b      	str	r3, [r7, #4]
 8007f18:	f340 8084 	ble.w	8008024 <_scanf_float+0x27c>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	e766      	b.n	8007df2 <_scanf_float+0x4a>
 8007f24:	eb1a 0f05 	cmn.w	sl, r5
 8007f28:	f47f af70 	bne.w	8007e0c <_scanf_float+0x64>
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	f806 3b01 	strb.w	r3, [r6], #1
 8007f38:	e7e4      	b.n	8007f04 <_scanf_float+0x15c>
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	0610      	lsls	r0, r2, #24
 8007f3e:	f57f af65 	bpl.w	8007e0c <_scanf_float+0x64>
 8007f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f46:	e7f4      	b.n	8007f32 <_scanf_float+0x18a>
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	d10e      	bne.n	8007f6c <_scanf_float+0x1c4>
 8007f4e:	f1b9 0f00 	cmp.w	r9, #0
 8007f52:	d10e      	bne.n	8007f72 <_scanf_float+0x1ca>
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f5e:	d108      	bne.n	8007f72 <_scanf_float+0x1ca>
 8007f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f64:	f04f 0a01 	mov.w	sl, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	e7e3      	b.n	8007f34 <_scanf_float+0x18c>
 8007f6c:	f1ba 0f02 	cmp.w	sl, #2
 8007f70:	d055      	beq.n	800801e <_scanf_float+0x276>
 8007f72:	2d01      	cmp	r5, #1
 8007f74:	d002      	beq.n	8007f7c <_scanf_float+0x1d4>
 8007f76:	2d04      	cmp	r5, #4
 8007f78:	f47f af48 	bne.w	8007e0c <_scanf_float+0x64>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	b2ed      	uxtb	r5, r5
 8007f80:	e7d8      	b.n	8007f34 <_scanf_float+0x18c>
 8007f82:	f1ba 0f01 	cmp.w	sl, #1
 8007f86:	f47f af41 	bne.w	8007e0c <_scanf_float+0x64>
 8007f8a:	f04f 0a02 	mov.w	sl, #2
 8007f8e:	e7d1      	b.n	8007f34 <_scanf_float+0x18c>
 8007f90:	b97d      	cbnz	r5, 8007fb2 <_scanf_float+0x20a>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	f47f af3c 	bne.w	8007e12 <_scanf_float+0x6a>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fa4:	f47f af39 	bne.w	8007e1a <_scanf_float+0x72>
 8007fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fac:	2501      	movs	r5, #1
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	e7c0      	b.n	8007f34 <_scanf_float+0x18c>
 8007fb2:	2d03      	cmp	r5, #3
 8007fb4:	d0e2      	beq.n	8007f7c <_scanf_float+0x1d4>
 8007fb6:	2d05      	cmp	r5, #5
 8007fb8:	e7de      	b.n	8007f78 <_scanf_float+0x1d0>
 8007fba:	2d02      	cmp	r5, #2
 8007fbc:	f47f af26 	bne.w	8007e0c <_scanf_float+0x64>
 8007fc0:	2503      	movs	r5, #3
 8007fc2:	e7b7      	b.n	8007f34 <_scanf_float+0x18c>
 8007fc4:	2d06      	cmp	r5, #6
 8007fc6:	f47f af21 	bne.w	8007e0c <_scanf_float+0x64>
 8007fca:	2507      	movs	r5, #7
 8007fcc:	e7b2      	b.n	8007f34 <_scanf_float+0x18c>
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	0591      	lsls	r1, r2, #22
 8007fd2:	f57f af1b 	bpl.w	8007e0c <_scanf_float+0x64>
 8007fd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007fda:	6022      	str	r2, [r4, #0]
 8007fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fe0:	e7a8      	b.n	8007f34 <_scanf_float+0x18c>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007fe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007fec:	d006      	beq.n	8007ffc <_scanf_float+0x254>
 8007fee:	0550      	lsls	r0, r2, #21
 8007ff0:	f57f af0c 	bpl.w	8007e0c <_scanf_float+0x64>
 8007ff4:	f1b9 0f00 	cmp.w	r9, #0
 8007ff8:	f43f af0f 	beq.w	8007e1a <_scanf_float+0x72>
 8007ffc:	0591      	lsls	r1, r2, #22
 8007ffe:	bf58      	it	pl
 8008000:	9901      	ldrpl	r1, [sp, #4]
 8008002:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008006:	bf58      	it	pl
 8008008:	eba9 0101 	subpl.w	r1, r9, r1
 800800c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008010:	f04f 0900 	mov.w	r9, #0
 8008014:	bf58      	it	pl
 8008016:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	e78a      	b.n	8007f34 <_scanf_float+0x18c>
 800801e:	f04f 0a03 	mov.w	sl, #3
 8008022:	e787      	b.n	8007f34 <_scanf_float+0x18c>
 8008024:	4639      	mov	r1, r7
 8008026:	4640      	mov	r0, r8
 8008028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800802c:	4798      	blx	r3
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f aedf 	beq.w	8007df2 <_scanf_float+0x4a>
 8008034:	e6ea      	b.n	8007e0c <_scanf_float+0x64>
 8008036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800803a:	463a      	mov	r2, r7
 800803c:	4640      	mov	r0, r8
 800803e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008042:	4798      	blx	r3
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	3b01      	subs	r3, #1
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	e6ec      	b.n	8007e26 <_scanf_float+0x7e>
 800804c:	1e6b      	subs	r3, r5, #1
 800804e:	2b06      	cmp	r3, #6
 8008050:	d825      	bhi.n	800809e <_scanf_float+0x2f6>
 8008052:	2d02      	cmp	r5, #2
 8008054:	d836      	bhi.n	80080c4 <_scanf_float+0x31c>
 8008056:	455e      	cmp	r6, fp
 8008058:	f67f aee8 	bls.w	8007e2c <_scanf_float+0x84>
 800805c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008060:	463a      	mov	r2, r7
 8008062:	4640      	mov	r0, r8
 8008064:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008068:	4798      	blx	r3
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	3b01      	subs	r3, #1
 800806e:	6123      	str	r3, [r4, #16]
 8008070:	e7f1      	b.n	8008056 <_scanf_float+0x2ae>
 8008072:	9802      	ldr	r0, [sp, #8]
 8008074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008078:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800807c:	463a      	mov	r2, r7
 800807e:	9002      	str	r0, [sp, #8]
 8008080:	4640      	mov	r0, r8
 8008082:	4798      	blx	r3
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	3b01      	subs	r3, #1
 8008088:	6123      	str	r3, [r4, #16]
 800808a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800808e:	fa5f fa8a 	uxtb.w	sl, sl
 8008092:	f1ba 0f02 	cmp.w	sl, #2
 8008096:	d1ec      	bne.n	8008072 <_scanf_float+0x2ca>
 8008098:	3d03      	subs	r5, #3
 800809a:	b2ed      	uxtb	r5, r5
 800809c:	1b76      	subs	r6, r6, r5
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	05da      	lsls	r2, r3, #23
 80080a2:	d52f      	bpl.n	8008104 <_scanf_float+0x35c>
 80080a4:	055b      	lsls	r3, r3, #21
 80080a6:	d510      	bpl.n	80080ca <_scanf_float+0x322>
 80080a8:	455e      	cmp	r6, fp
 80080aa:	f67f aebf 	bls.w	8007e2c <_scanf_float+0x84>
 80080ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080b2:	463a      	mov	r2, r7
 80080b4:	4640      	mov	r0, r8
 80080b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ba:	4798      	blx	r3
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	3b01      	subs	r3, #1
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	e7f1      	b.n	80080a8 <_scanf_float+0x300>
 80080c4:	46aa      	mov	sl, r5
 80080c6:	9602      	str	r6, [sp, #8]
 80080c8:	e7df      	b.n	800808a <_scanf_float+0x2e2>
 80080ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	2965      	cmp	r1, #101	; 0x65
 80080d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80080d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	d00c      	beq.n	80080f8 <_scanf_float+0x350>
 80080de:	2945      	cmp	r1, #69	; 0x45
 80080e0:	d00a      	beq.n	80080f8 <_scanf_float+0x350>
 80080e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080e6:	463a      	mov	r2, r7
 80080e8:	4640      	mov	r0, r8
 80080ea:	4798      	blx	r3
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	1eb5      	subs	r5, r6, #2
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	463a      	mov	r2, r7
 80080fa:	4640      	mov	r0, r8
 80080fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008100:	4798      	blx	r3
 8008102:	462e      	mov	r6, r5
 8008104:	6825      	ldr	r5, [r4, #0]
 8008106:	f015 0510 	ands.w	r5, r5, #16
 800810a:	d155      	bne.n	80081b8 <_scanf_float+0x410>
 800810c:	7035      	strb	r5, [r6, #0]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008118:	d11b      	bne.n	8008152 <_scanf_float+0x3aa>
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	454b      	cmp	r3, r9
 800811e:	eba3 0209 	sub.w	r2, r3, r9
 8008122:	d123      	bne.n	800816c <_scanf_float+0x3c4>
 8008124:	2200      	movs	r2, #0
 8008126:	4659      	mov	r1, fp
 8008128:	4640      	mov	r0, r8
 800812a:	f000 fe89 	bl	8008e40 <_strtod_r>
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	f012 0f02 	tst.w	r2, #2
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	d021      	beq.n	8008182 <_scanf_float+0x3da>
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	9903      	ldr	r1, [sp, #12]
 8008142:	600a      	str	r2, [r1, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	e9c3 6700 	strd	r6, r7, [r3]
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60e3      	str	r3, [r4, #12]
 8008150:	e66d      	b.n	8007e2e <_scanf_float+0x86>
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0e5      	beq.n	8008124 <_scanf_float+0x37c>
 8008158:	9905      	ldr	r1, [sp, #20]
 800815a:	230a      	movs	r3, #10
 800815c:	462a      	mov	r2, r5
 800815e:	4640      	mov	r0, r8
 8008160:	3101      	adds	r1, #1
 8008162:	f000 feef 	bl	8008f44 <_strtol_r>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	9e05      	ldr	r6, [sp, #20]
 800816a:	1ac2      	subs	r2, r0, r3
 800816c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008170:	429e      	cmp	r6, r3
 8008172:	bf28      	it	cs
 8008174:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008178:	4630      	mov	r0, r6
 800817a:	4910      	ldr	r1, [pc, #64]	; (80081bc <_scanf_float+0x414>)
 800817c:	f000 f836 	bl	80081ec <siprintf>
 8008180:	e7d0      	b.n	8008124 <_scanf_float+0x37c>
 8008182:	f012 0f04 	tst.w	r2, #4
 8008186:	f103 0204 	add.w	r2, r3, #4
 800818a:	d1d9      	bne.n	8008140 <_scanf_float+0x398>
 800818c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008190:	f8cc 2000 	str.w	r2, [ip]
 8008194:	f8d3 8000 	ldr.w	r8, [r3]
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	f7f8 fc72 	bl	8000a84 <__aeabi_dcmpun>
 80081a0:	b128      	cbz	r0, 80081ae <_scanf_float+0x406>
 80081a2:	4807      	ldr	r0, [pc, #28]	; (80081c0 <_scanf_float+0x418>)
 80081a4:	f000 f81e 	bl	80081e4 <nanf>
 80081a8:	f8c8 0000 	str.w	r0, [r8]
 80081ac:	e7cd      	b.n	800814a <_scanf_float+0x3a2>
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 fcc5 	bl	8000b40 <__aeabi_d2f>
 80081b6:	e7f7      	b.n	80081a8 <_scanf_float+0x400>
 80081b8:	2500      	movs	r5, #0
 80081ba:	e638      	b.n	8007e2e <_scanf_float+0x86>
 80081bc:	0800bcc4 	.word	0x0800bcc4
 80081c0:	0800c0d0 	.word	0x0800c0d0

080081c4 <_sbrk_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	2300      	movs	r3, #0
 80081c8:	4d05      	ldr	r5, [pc, #20]	; (80081e0 <_sbrk_r+0x1c>)
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f9 f8b4 	bl	800133c <_sbrk>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_sbrk_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_sbrk_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	2000167c 	.word	0x2000167c

080081e4 <nanf>:
 80081e4:	4800      	ldr	r0, [pc, #0]	; (80081e8 <nanf+0x4>)
 80081e6:	4770      	bx	lr
 80081e8:	7fc00000 	.word	0x7fc00000

080081ec <siprintf>:
 80081ec:	b40e      	push	{r1, r2, r3}
 80081ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081f2:	b500      	push	{lr}
 80081f4:	b09c      	sub	sp, #112	; 0x70
 80081f6:	ab1d      	add	r3, sp, #116	; 0x74
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	9006      	str	r0, [sp, #24]
 80081fc:	9107      	str	r1, [sp, #28]
 80081fe:	9104      	str	r1, [sp, #16]
 8008200:	4808      	ldr	r0, [pc, #32]	; (8008224 <siprintf+0x38>)
 8008202:	4909      	ldr	r1, [pc, #36]	; (8008228 <siprintf+0x3c>)
 8008204:	f853 2b04 	ldr.w	r2, [r3], #4
 8008208:	9105      	str	r1, [sp, #20]
 800820a:	6800      	ldr	r0, [r0, #0]
 800820c:	a902      	add	r1, sp, #8
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f002 fe1c 	bl	800ae4c <_svfiprintf_r>
 8008214:	2200      	movs	r2, #0
 8008216:	9b02      	ldr	r3, [sp, #8]
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	b01c      	add	sp, #112	; 0x70
 800821c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008220:	b003      	add	sp, #12
 8008222:	4770      	bx	lr
 8008224:	200001a8 	.word	0x200001a8
 8008228:	ffff0208 	.word	0xffff0208

0800822c <sulp>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	460f      	mov	r7, r1
 8008232:	4690      	mov	r8, r2
 8008234:	f002 fc52 	bl	800aadc <__ulp>
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	f1b8 0f00 	cmp.w	r8, #0
 8008240:	d011      	beq.n	8008266 <sulp+0x3a>
 8008242:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008246:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd0b      	ble.n	8008266 <sulp+0x3a>
 800824e:	2400      	movs	r4, #0
 8008250:	051b      	lsls	r3, r3, #20
 8008252:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008256:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800825a:	4622      	mov	r2, r4
 800825c:	462b      	mov	r3, r5
 800825e:	f7f8 f977 	bl	8000550 <__aeabi_dmul>
 8008262:	4604      	mov	r4, r0
 8008264:	460d      	mov	r5, r1
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008270 <_strtod_l>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	469b      	mov	fp, r3
 8008276:	2300      	movs	r3, #0
 8008278:	b09f      	sub	sp, #124	; 0x7c
 800827a:	931a      	str	r3, [sp, #104]	; 0x68
 800827c:	4b9e      	ldr	r3, [pc, #632]	; (80084f8 <_strtod_l+0x288>)
 800827e:	4682      	mov	sl, r0
 8008280:	681f      	ldr	r7, [r3, #0]
 8008282:	460e      	mov	r6, r1
 8008284:	4638      	mov	r0, r7
 8008286:	9215      	str	r2, [sp, #84]	; 0x54
 8008288:	f7f7 ff9e 	bl	80001c8 <strlen>
 800828c:	f04f 0800 	mov.w	r8, #0
 8008290:	4604      	mov	r4, r0
 8008292:	f04f 0900 	mov.w	r9, #0
 8008296:	9619      	str	r6, [sp, #100]	; 0x64
 8008298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	2a2b      	cmp	r2, #43	; 0x2b
 800829e:	d04c      	beq.n	800833a <_strtod_l+0xca>
 80082a0:	d83a      	bhi.n	8008318 <_strtod_l+0xa8>
 80082a2:	2a0d      	cmp	r2, #13
 80082a4:	d833      	bhi.n	800830e <_strtod_l+0x9e>
 80082a6:	2a08      	cmp	r2, #8
 80082a8:	d833      	bhi.n	8008312 <_strtod_l+0xa2>
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d03d      	beq.n	800832a <_strtod_l+0xba>
 80082ae:	2300      	movs	r3, #0
 80082b0:	930a      	str	r3, [sp, #40]	; 0x28
 80082b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80082b4:	782b      	ldrb	r3, [r5, #0]
 80082b6:	2b30      	cmp	r3, #48	; 0x30
 80082b8:	f040 80aa 	bne.w	8008410 <_strtod_l+0x1a0>
 80082bc:	786b      	ldrb	r3, [r5, #1]
 80082be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082c2:	2b58      	cmp	r3, #88	; 0x58
 80082c4:	d166      	bne.n	8008394 <_strtod_l+0x124>
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	4650      	mov	r0, sl
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	ab1a      	add	r3, sp, #104	; 0x68
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4a8a      	ldr	r2, [pc, #552]	; (80084fc <_strtod_l+0x28c>)
 80082d2:	f8cd b008 	str.w	fp, [sp, #8]
 80082d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80082d8:	a919      	add	r1, sp, #100	; 0x64
 80082da:	f001 fd53 	bl	8009d84 <__gethex>
 80082de:	f010 0607 	ands.w	r6, r0, #7
 80082e2:	4604      	mov	r4, r0
 80082e4:	d005      	beq.n	80082f2 <_strtod_l+0x82>
 80082e6:	2e06      	cmp	r6, #6
 80082e8:	d129      	bne.n	800833e <_strtod_l+0xce>
 80082ea:	2300      	movs	r3, #0
 80082ec:	3501      	adds	r5, #1
 80082ee:	9519      	str	r5, [sp, #100]	; 0x64
 80082f0:	930a      	str	r3, [sp, #40]	; 0x28
 80082f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 858a 	bne.w	8008e0e <_strtod_l+0xb9e>
 80082fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fc:	b1d3      	cbz	r3, 8008334 <_strtod_l+0xc4>
 80082fe:	4642      	mov	r2, r8
 8008300:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	b01f      	add	sp, #124	; 0x7c
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830e:	2a20      	cmp	r2, #32
 8008310:	d1cd      	bne.n	80082ae <_strtod_l+0x3e>
 8008312:	3301      	adds	r3, #1
 8008314:	9319      	str	r3, [sp, #100]	; 0x64
 8008316:	e7bf      	b.n	8008298 <_strtod_l+0x28>
 8008318:	2a2d      	cmp	r2, #45	; 0x2d
 800831a:	d1c8      	bne.n	80082ae <_strtod_l+0x3e>
 800831c:	2201      	movs	r2, #1
 800831e:	920a      	str	r2, [sp, #40]	; 0x28
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	9219      	str	r2, [sp, #100]	; 0x64
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1c3      	bne.n	80082b2 <_strtod_l+0x42>
 800832a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832c:	9619      	str	r6, [sp, #100]	; 0x64
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 856b 	bne.w	8008e0a <_strtod_l+0xb9a>
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	e7e4      	b.n	8008304 <_strtod_l+0x94>
 800833a:	2200      	movs	r2, #0
 800833c:	e7ef      	b.n	800831e <_strtod_l+0xae>
 800833e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008340:	b13a      	cbz	r2, 8008352 <_strtod_l+0xe2>
 8008342:	2135      	movs	r1, #53	; 0x35
 8008344:	a81c      	add	r0, sp, #112	; 0x70
 8008346:	f002 fccd 	bl	800ace4 <__copybits>
 800834a:	4650      	mov	r0, sl
 800834c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800834e:	f002 f895 	bl	800a47c <_Bfree>
 8008352:	3e01      	subs	r6, #1
 8008354:	2e04      	cmp	r6, #4
 8008356:	d806      	bhi.n	8008366 <_strtod_l+0xf6>
 8008358:	e8df f006 	tbb	[pc, r6]
 800835c:	1714030a 	.word	0x1714030a
 8008360:	0a          	.byte	0x0a
 8008361:	00          	.byte	0x00
 8008362:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008366:	0721      	lsls	r1, r4, #28
 8008368:	d5c3      	bpl.n	80082f2 <_strtod_l+0x82>
 800836a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800836e:	e7c0      	b.n	80082f2 <_strtod_l+0x82>
 8008370:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008372:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800837a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800837e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008382:	e7f0      	b.n	8008366 <_strtod_l+0xf6>
 8008384:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008500 <_strtod_l+0x290>
 8008388:	e7ed      	b.n	8008366 <_strtod_l+0xf6>
 800838a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800838e:	f04f 38ff 	mov.w	r8, #4294967295
 8008392:	e7e8      	b.n	8008366 <_strtod_l+0xf6>
 8008394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	9219      	str	r2, [sp, #100]	; 0x64
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b30      	cmp	r3, #48	; 0x30
 800839e:	d0f9      	beq.n	8008394 <_strtod_l+0x124>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0a6      	beq.n	80082f2 <_strtod_l+0x82>
 80083a4:	2301      	movs	r3, #1
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083aa:	220a      	movs	r2, #10
 80083ac:	9308      	str	r3, [sp, #32]
 80083ae:	2300      	movs	r3, #0
 80083b0:	469b      	mov	fp, r3
 80083b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80083b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80083b8:	7805      	ldrb	r5, [r0, #0]
 80083ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80083be:	b2d9      	uxtb	r1, r3
 80083c0:	2909      	cmp	r1, #9
 80083c2:	d927      	bls.n	8008414 <_strtod_l+0x1a4>
 80083c4:	4622      	mov	r2, r4
 80083c6:	4639      	mov	r1, r7
 80083c8:	f002 fe46 	bl	800b058 <strncmp>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d033      	beq.n	8008438 <_strtod_l+0x1c8>
 80083d0:	2000      	movs	r0, #0
 80083d2:	462a      	mov	r2, r5
 80083d4:	465c      	mov	r4, fp
 80083d6:	4603      	mov	r3, r0
 80083d8:	9004      	str	r0, [sp, #16]
 80083da:	2a65      	cmp	r2, #101	; 0x65
 80083dc:	d001      	beq.n	80083e2 <_strtod_l+0x172>
 80083de:	2a45      	cmp	r2, #69	; 0x45
 80083e0:	d114      	bne.n	800840c <_strtod_l+0x19c>
 80083e2:	b91c      	cbnz	r4, 80083ec <_strtod_l+0x17c>
 80083e4:	9a07      	ldr	r2, [sp, #28]
 80083e6:	4302      	orrs	r2, r0
 80083e8:	d09f      	beq.n	800832a <_strtod_l+0xba>
 80083ea:	2400      	movs	r4, #0
 80083ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80083ee:	1c72      	adds	r2, r6, #1
 80083f0:	9219      	str	r2, [sp, #100]	; 0x64
 80083f2:	7872      	ldrb	r2, [r6, #1]
 80083f4:	2a2b      	cmp	r2, #43	; 0x2b
 80083f6:	d079      	beq.n	80084ec <_strtod_l+0x27c>
 80083f8:	2a2d      	cmp	r2, #45	; 0x2d
 80083fa:	f000 8083 	beq.w	8008504 <_strtod_l+0x294>
 80083fe:	2700      	movs	r7, #0
 8008400:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008404:	2909      	cmp	r1, #9
 8008406:	f240 8083 	bls.w	8008510 <_strtod_l+0x2a0>
 800840a:	9619      	str	r6, [sp, #100]	; 0x64
 800840c:	2500      	movs	r5, #0
 800840e:	e09f      	b.n	8008550 <_strtod_l+0x2e0>
 8008410:	2300      	movs	r3, #0
 8008412:	e7c8      	b.n	80083a6 <_strtod_l+0x136>
 8008414:	f1bb 0f08 	cmp.w	fp, #8
 8008418:	bfd5      	itete	le
 800841a:	9906      	ldrle	r1, [sp, #24]
 800841c:	9905      	ldrgt	r1, [sp, #20]
 800841e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008422:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008426:	f100 0001 	add.w	r0, r0, #1
 800842a:	bfd4      	ite	le
 800842c:	9306      	strle	r3, [sp, #24]
 800842e:	9305      	strgt	r3, [sp, #20]
 8008430:	f10b 0b01 	add.w	fp, fp, #1
 8008434:	9019      	str	r0, [sp, #100]	; 0x64
 8008436:	e7be      	b.n	80083b6 <_strtod_l+0x146>
 8008438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800843a:	191a      	adds	r2, r3, r4
 800843c:	9219      	str	r2, [sp, #100]	; 0x64
 800843e:	5d1a      	ldrb	r2, [r3, r4]
 8008440:	f1bb 0f00 	cmp.w	fp, #0
 8008444:	d036      	beq.n	80084b4 <_strtod_l+0x244>
 8008446:	465c      	mov	r4, fp
 8008448:	9004      	str	r0, [sp, #16]
 800844a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800844e:	2b09      	cmp	r3, #9
 8008450:	d912      	bls.n	8008478 <_strtod_l+0x208>
 8008452:	2301      	movs	r3, #1
 8008454:	e7c1      	b.n	80083da <_strtod_l+0x16a>
 8008456:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008458:	3001      	adds	r0, #1
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	9219      	str	r2, [sp, #100]	; 0x64
 800845e:	785a      	ldrb	r2, [r3, #1]
 8008460:	2a30      	cmp	r2, #48	; 0x30
 8008462:	d0f8      	beq.n	8008456 <_strtod_l+0x1e6>
 8008464:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008468:	2b08      	cmp	r3, #8
 800846a:	f200 84d5 	bhi.w	8008e18 <_strtod_l+0xba8>
 800846e:	9004      	str	r0, [sp, #16]
 8008470:	2000      	movs	r0, #0
 8008472:	4604      	mov	r4, r0
 8008474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	3a30      	subs	r2, #48	; 0x30
 800847a:	f100 0301 	add.w	r3, r0, #1
 800847e:	d013      	beq.n	80084a8 <_strtod_l+0x238>
 8008480:	9904      	ldr	r1, [sp, #16]
 8008482:	1905      	adds	r5, r0, r4
 8008484:	4419      	add	r1, r3
 8008486:	9104      	str	r1, [sp, #16]
 8008488:	4623      	mov	r3, r4
 800848a:	210a      	movs	r1, #10
 800848c:	42ab      	cmp	r3, r5
 800848e:	d113      	bne.n	80084b8 <_strtod_l+0x248>
 8008490:	1823      	adds	r3, r4, r0
 8008492:	2b08      	cmp	r3, #8
 8008494:	f104 0401 	add.w	r4, r4, #1
 8008498:	4404      	add	r4, r0
 800849a:	dc1b      	bgt.n	80084d4 <_strtod_l+0x264>
 800849c:	230a      	movs	r3, #10
 800849e:	9906      	ldr	r1, [sp, #24]
 80084a0:	fb03 2301 	mla	r3, r3, r1, r2
 80084a4:	9306      	str	r3, [sp, #24]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084aa:	4618      	mov	r0, r3
 80084ac:	1c51      	adds	r1, r2, #1
 80084ae:	9119      	str	r1, [sp, #100]	; 0x64
 80084b0:	7852      	ldrb	r2, [r2, #1]
 80084b2:	e7ca      	b.n	800844a <_strtod_l+0x1da>
 80084b4:	4658      	mov	r0, fp
 80084b6:	e7d3      	b.n	8008460 <_strtod_l+0x1f0>
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	dc04      	bgt.n	80084c6 <_strtod_l+0x256>
 80084bc:	9f06      	ldr	r7, [sp, #24]
 80084be:	434f      	muls	r7, r1
 80084c0:	9706      	str	r7, [sp, #24]
 80084c2:	3301      	adds	r3, #1
 80084c4:	e7e2      	b.n	800848c <_strtod_l+0x21c>
 80084c6:	1c5f      	adds	r7, r3, #1
 80084c8:	2f10      	cmp	r7, #16
 80084ca:	bfde      	ittt	le
 80084cc:	9f05      	ldrle	r7, [sp, #20]
 80084ce:	434f      	mulle	r7, r1
 80084d0:	9705      	strle	r7, [sp, #20]
 80084d2:	e7f6      	b.n	80084c2 <_strtod_l+0x252>
 80084d4:	2c10      	cmp	r4, #16
 80084d6:	bfdf      	itttt	le
 80084d8:	230a      	movle	r3, #10
 80084da:	9905      	ldrle	r1, [sp, #20]
 80084dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80084e0:	9305      	strle	r3, [sp, #20]
 80084e2:	e7e0      	b.n	80084a6 <_strtod_l+0x236>
 80084e4:	2300      	movs	r3, #0
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	2301      	movs	r3, #1
 80084ea:	e77b      	b.n	80083e4 <_strtod_l+0x174>
 80084ec:	2700      	movs	r7, #0
 80084ee:	1cb2      	adds	r2, r6, #2
 80084f0:	9219      	str	r2, [sp, #100]	; 0x64
 80084f2:	78b2      	ldrb	r2, [r6, #2]
 80084f4:	e784      	b.n	8008400 <_strtod_l+0x190>
 80084f6:	bf00      	nop
 80084f8:	0800bf18 	.word	0x0800bf18
 80084fc:	0800bccc 	.word	0x0800bccc
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	2701      	movs	r7, #1
 8008506:	e7f2      	b.n	80084ee <_strtod_l+0x27e>
 8008508:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800850a:	1c51      	adds	r1, r2, #1
 800850c:	9119      	str	r1, [sp, #100]	; 0x64
 800850e:	7852      	ldrb	r2, [r2, #1]
 8008510:	2a30      	cmp	r2, #48	; 0x30
 8008512:	d0f9      	beq.n	8008508 <_strtod_l+0x298>
 8008514:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008518:	2908      	cmp	r1, #8
 800851a:	f63f af77 	bhi.w	800840c <_strtod_l+0x19c>
 800851e:	f04f 0e0a 	mov.w	lr, #10
 8008522:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008526:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008528:	9209      	str	r2, [sp, #36]	; 0x24
 800852a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800852c:	1c51      	adds	r1, r2, #1
 800852e:	9119      	str	r1, [sp, #100]	; 0x64
 8008530:	7852      	ldrb	r2, [r2, #1]
 8008532:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008536:	2d09      	cmp	r5, #9
 8008538:	d935      	bls.n	80085a6 <_strtod_l+0x336>
 800853a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800853c:	1b49      	subs	r1, r1, r5
 800853e:	2908      	cmp	r1, #8
 8008540:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008544:	dc02      	bgt.n	800854c <_strtod_l+0x2dc>
 8008546:	4565      	cmp	r5, ip
 8008548:	bfa8      	it	ge
 800854a:	4665      	movge	r5, ip
 800854c:	b107      	cbz	r7, 8008550 <_strtod_l+0x2e0>
 800854e:	426d      	negs	r5, r5
 8008550:	2c00      	cmp	r4, #0
 8008552:	d14c      	bne.n	80085ee <_strtod_l+0x37e>
 8008554:	9907      	ldr	r1, [sp, #28]
 8008556:	4301      	orrs	r1, r0
 8008558:	f47f aecb 	bne.w	80082f2 <_strtod_l+0x82>
 800855c:	2b00      	cmp	r3, #0
 800855e:	f47f aee4 	bne.w	800832a <_strtod_l+0xba>
 8008562:	2a69      	cmp	r2, #105	; 0x69
 8008564:	d026      	beq.n	80085b4 <_strtod_l+0x344>
 8008566:	dc23      	bgt.n	80085b0 <_strtod_l+0x340>
 8008568:	2a49      	cmp	r2, #73	; 0x49
 800856a:	d023      	beq.n	80085b4 <_strtod_l+0x344>
 800856c:	2a4e      	cmp	r2, #78	; 0x4e
 800856e:	f47f aedc 	bne.w	800832a <_strtod_l+0xba>
 8008572:	499d      	ldr	r1, [pc, #628]	; (80087e8 <_strtod_l+0x578>)
 8008574:	a819      	add	r0, sp, #100	; 0x64
 8008576:	f001 fe53 	bl	800a220 <__match>
 800857a:	2800      	cmp	r0, #0
 800857c:	f43f aed5 	beq.w	800832a <_strtod_l+0xba>
 8008580:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b28      	cmp	r3, #40	; 0x28
 8008586:	d12c      	bne.n	80085e2 <_strtod_l+0x372>
 8008588:	4998      	ldr	r1, [pc, #608]	; (80087ec <_strtod_l+0x57c>)
 800858a:	aa1c      	add	r2, sp, #112	; 0x70
 800858c:	a819      	add	r0, sp, #100	; 0x64
 800858e:	f001 fe5b 	bl	800a248 <__hexnan>
 8008592:	2805      	cmp	r0, #5
 8008594:	d125      	bne.n	80085e2 <_strtod_l+0x372>
 8008596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008598:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800859c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80085a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80085a4:	e6a5      	b.n	80082f2 <_strtod_l+0x82>
 80085a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80085aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80085ae:	e7bc      	b.n	800852a <_strtod_l+0x2ba>
 80085b0:	2a6e      	cmp	r2, #110	; 0x6e
 80085b2:	e7dc      	b.n	800856e <_strtod_l+0x2fe>
 80085b4:	498e      	ldr	r1, [pc, #568]	; (80087f0 <_strtod_l+0x580>)
 80085b6:	a819      	add	r0, sp, #100	; 0x64
 80085b8:	f001 fe32 	bl	800a220 <__match>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f aeb4 	beq.w	800832a <_strtod_l+0xba>
 80085c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085c4:	498b      	ldr	r1, [pc, #556]	; (80087f4 <_strtod_l+0x584>)
 80085c6:	3b01      	subs	r3, #1
 80085c8:	a819      	add	r0, sp, #100	; 0x64
 80085ca:	9319      	str	r3, [sp, #100]	; 0x64
 80085cc:	f001 fe28 	bl	800a220 <__match>
 80085d0:	b910      	cbnz	r0, 80085d8 <_strtod_l+0x368>
 80085d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085d4:	3301      	adds	r3, #1
 80085d6:	9319      	str	r3, [sp, #100]	; 0x64
 80085d8:	f04f 0800 	mov.w	r8, #0
 80085dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80087f8 <_strtod_l+0x588>
 80085e0:	e687      	b.n	80082f2 <_strtod_l+0x82>
 80085e2:	4886      	ldr	r0, [pc, #536]	; (80087fc <_strtod_l+0x58c>)
 80085e4:	f002 fd32 	bl	800b04c <nan>
 80085e8:	4680      	mov	r8, r0
 80085ea:	4689      	mov	r9, r1
 80085ec:	e681      	b.n	80082f2 <_strtod_l+0x82>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	f1bb 0f00 	cmp.w	fp, #0
 80085f4:	bf08      	it	eq
 80085f6:	46a3      	moveq	fp, r4
 80085f8:	1aeb      	subs	r3, r5, r3
 80085fa:	2c10      	cmp	r4, #16
 80085fc:	9806      	ldr	r0, [sp, #24]
 80085fe:	4626      	mov	r6, r4
 8008600:	9307      	str	r3, [sp, #28]
 8008602:	bfa8      	it	ge
 8008604:	2610      	movge	r6, #16
 8008606:	f7f7 ff29 	bl	800045c <__aeabi_ui2d>
 800860a:	2c09      	cmp	r4, #9
 800860c:	4680      	mov	r8, r0
 800860e:	4689      	mov	r9, r1
 8008610:	dd13      	ble.n	800863a <_strtod_l+0x3ca>
 8008612:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <_strtod_l+0x590>)
 8008614:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008618:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800861c:	f7f7 ff98 	bl	8000550 <__aeabi_dmul>
 8008620:	4680      	mov	r8, r0
 8008622:	9805      	ldr	r0, [sp, #20]
 8008624:	4689      	mov	r9, r1
 8008626:	f7f7 ff19 	bl	800045c <__aeabi_ui2d>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	f7f7 fdd7 	bl	80001e4 <__adddf3>
 8008636:	4680      	mov	r8, r0
 8008638:	4689      	mov	r9, r1
 800863a:	2c0f      	cmp	r4, #15
 800863c:	dc36      	bgt.n	80086ac <_strtod_l+0x43c>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f43f ae56 	beq.w	80082f2 <_strtod_l+0x82>
 8008646:	dd22      	ble.n	800868e <_strtod_l+0x41e>
 8008648:	2b16      	cmp	r3, #22
 800864a:	dc09      	bgt.n	8008660 <_strtod_l+0x3f0>
 800864c:	496c      	ldr	r1, [pc, #432]	; (8008800 <_strtod_l+0x590>)
 800864e:	4642      	mov	r2, r8
 8008650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008654:	464b      	mov	r3, r9
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	f7f7 ff79 	bl	8000550 <__aeabi_dmul>
 800865e:	e7c3      	b.n	80085e8 <_strtod_l+0x378>
 8008660:	9a07      	ldr	r2, [sp, #28]
 8008662:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008666:	4293      	cmp	r3, r2
 8008668:	db20      	blt.n	80086ac <_strtod_l+0x43c>
 800866a:	4d65      	ldr	r5, [pc, #404]	; (8008800 <_strtod_l+0x590>)
 800866c:	f1c4 040f 	rsb	r4, r4, #15
 8008670:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008674:	4642      	mov	r2, r8
 8008676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800867a:	464b      	mov	r3, r9
 800867c:	f7f7 ff68 	bl	8000550 <__aeabi_dmul>
 8008680:	9b07      	ldr	r3, [sp, #28]
 8008682:	1b1c      	subs	r4, r3, r4
 8008684:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800868c:	e7e5      	b.n	800865a <_strtod_l+0x3ea>
 800868e:	9b07      	ldr	r3, [sp, #28]
 8008690:	3316      	adds	r3, #22
 8008692:	db0b      	blt.n	80086ac <_strtod_l+0x43c>
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	4640      	mov	r0, r8
 8008698:	1b5d      	subs	r5, r3, r5
 800869a:	4b59      	ldr	r3, [pc, #356]	; (8008800 <_strtod_l+0x590>)
 800869c:	4649      	mov	r1, r9
 800869e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80086a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086a6:	f7f8 f87d 	bl	80007a4 <__aeabi_ddiv>
 80086aa:	e79d      	b.n	80085e8 <_strtod_l+0x378>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	1ba6      	subs	r6, r4, r6
 80086b0:	441e      	add	r6, r3
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	dd74      	ble.n	80087a0 <_strtod_l+0x530>
 80086b6:	f016 030f 	ands.w	r3, r6, #15
 80086ba:	d00a      	beq.n	80086d2 <_strtod_l+0x462>
 80086bc:	4950      	ldr	r1, [pc, #320]	; (8008800 <_strtod_l+0x590>)
 80086be:	4642      	mov	r2, r8
 80086c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c8:	464b      	mov	r3, r9
 80086ca:	f7f7 ff41 	bl	8000550 <__aeabi_dmul>
 80086ce:	4680      	mov	r8, r0
 80086d0:	4689      	mov	r9, r1
 80086d2:	f036 060f 	bics.w	r6, r6, #15
 80086d6:	d052      	beq.n	800877e <_strtod_l+0x50e>
 80086d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80086dc:	dd27      	ble.n	800872e <_strtod_l+0x4be>
 80086de:	f04f 0b00 	mov.w	fp, #0
 80086e2:	f8cd b010 	str.w	fp, [sp, #16]
 80086e6:	f8cd b020 	str.w	fp, [sp, #32]
 80086ea:	f8cd b018 	str.w	fp, [sp, #24]
 80086ee:	2322      	movs	r3, #34	; 0x22
 80086f0:	f04f 0800 	mov.w	r8, #0
 80086f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80087f8 <_strtod_l+0x588>
 80086f8:	f8ca 3000 	str.w	r3, [sl]
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f43f adf7 	beq.w	80082f2 <_strtod_l+0x82>
 8008704:	4650      	mov	r0, sl
 8008706:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008708:	f001 feb8 	bl	800a47c <_Bfree>
 800870c:	4650      	mov	r0, sl
 800870e:	9906      	ldr	r1, [sp, #24]
 8008710:	f001 feb4 	bl	800a47c <_Bfree>
 8008714:	4650      	mov	r0, sl
 8008716:	9904      	ldr	r1, [sp, #16]
 8008718:	f001 feb0 	bl	800a47c <_Bfree>
 800871c:	4650      	mov	r0, sl
 800871e:	9908      	ldr	r1, [sp, #32]
 8008720:	f001 feac 	bl	800a47c <_Bfree>
 8008724:	4659      	mov	r1, fp
 8008726:	4650      	mov	r0, sl
 8008728:	f001 fea8 	bl	800a47c <_Bfree>
 800872c:	e5e1      	b.n	80082f2 <_strtod_l+0x82>
 800872e:	4b35      	ldr	r3, [pc, #212]	; (8008804 <_strtod_l+0x594>)
 8008730:	4640      	mov	r0, r8
 8008732:	9305      	str	r3, [sp, #20]
 8008734:	2300      	movs	r3, #0
 8008736:	4649      	mov	r1, r9
 8008738:	461f      	mov	r7, r3
 800873a:	1136      	asrs	r6, r6, #4
 800873c:	2e01      	cmp	r6, #1
 800873e:	dc21      	bgt.n	8008784 <_strtod_l+0x514>
 8008740:	b10b      	cbz	r3, 8008746 <_strtod_l+0x4d6>
 8008742:	4680      	mov	r8, r0
 8008744:	4689      	mov	r9, r1
 8008746:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <_strtod_l+0x594>)
 8008748:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800874c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008750:	4642      	mov	r2, r8
 8008752:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008756:	464b      	mov	r3, r9
 8008758:	f7f7 fefa 	bl	8000550 <__aeabi_dmul>
 800875c:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <_strtod_l+0x588>)
 800875e:	460a      	mov	r2, r1
 8008760:	400b      	ands	r3, r1
 8008762:	4929      	ldr	r1, [pc, #164]	; (8008808 <_strtod_l+0x598>)
 8008764:	4680      	mov	r8, r0
 8008766:	428b      	cmp	r3, r1
 8008768:	d8b9      	bhi.n	80086de <_strtod_l+0x46e>
 800876a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800876e:	428b      	cmp	r3, r1
 8008770:	bf86      	itte	hi
 8008772:	f04f 38ff 	movhi.w	r8, #4294967295
 8008776:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800880c <_strtod_l+0x59c>
 800877a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800877e:	2300      	movs	r3, #0
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	e07f      	b.n	8008884 <_strtod_l+0x614>
 8008784:	07f2      	lsls	r2, r6, #31
 8008786:	d505      	bpl.n	8008794 <_strtod_l+0x524>
 8008788:	9b05      	ldr	r3, [sp, #20]
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fedf 	bl	8000550 <__aeabi_dmul>
 8008792:	2301      	movs	r3, #1
 8008794:	9a05      	ldr	r2, [sp, #20]
 8008796:	3701      	adds	r7, #1
 8008798:	3208      	adds	r2, #8
 800879a:	1076      	asrs	r6, r6, #1
 800879c:	9205      	str	r2, [sp, #20]
 800879e:	e7cd      	b.n	800873c <_strtod_l+0x4cc>
 80087a0:	d0ed      	beq.n	800877e <_strtod_l+0x50e>
 80087a2:	4276      	negs	r6, r6
 80087a4:	f016 020f 	ands.w	r2, r6, #15
 80087a8:	d00a      	beq.n	80087c0 <_strtod_l+0x550>
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <_strtod_l+0x590>)
 80087ac:	4640      	mov	r0, r8
 80087ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b2:	4649      	mov	r1, r9
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 fff4 	bl	80007a4 <__aeabi_ddiv>
 80087bc:	4680      	mov	r8, r0
 80087be:	4689      	mov	r9, r1
 80087c0:	1136      	asrs	r6, r6, #4
 80087c2:	d0dc      	beq.n	800877e <_strtod_l+0x50e>
 80087c4:	2e1f      	cmp	r6, #31
 80087c6:	dd23      	ble.n	8008810 <_strtod_l+0x5a0>
 80087c8:	f04f 0b00 	mov.w	fp, #0
 80087cc:	f8cd b010 	str.w	fp, [sp, #16]
 80087d0:	f8cd b020 	str.w	fp, [sp, #32]
 80087d4:	f8cd b018 	str.w	fp, [sp, #24]
 80087d8:	2322      	movs	r3, #34	; 0x22
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	f04f 0900 	mov.w	r9, #0
 80087e2:	f8ca 3000 	str.w	r3, [sl]
 80087e6:	e789      	b.n	80086fc <_strtod_l+0x48c>
 80087e8:	0800bc9d 	.word	0x0800bc9d
 80087ec:	0800bce0 	.word	0x0800bce0
 80087f0:	0800bc95 	.word	0x0800bc95
 80087f4:	0800be24 	.word	0x0800be24
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	0800c0d0 	.word	0x0800c0d0
 8008800:	0800bfb0 	.word	0x0800bfb0
 8008804:	0800bf88 	.word	0x0800bf88
 8008808:	7ca00000 	.word	0x7ca00000
 800880c:	7fefffff 	.word	0x7fefffff
 8008810:	f016 0310 	ands.w	r3, r6, #16
 8008814:	bf18      	it	ne
 8008816:	236a      	movne	r3, #106	; 0x6a
 8008818:	4640      	mov	r0, r8
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4649      	mov	r1, r9
 800881e:	2300      	movs	r3, #0
 8008820:	4fb0      	ldr	r7, [pc, #704]	; (8008ae4 <_strtod_l+0x874>)
 8008822:	07f2      	lsls	r2, r6, #31
 8008824:	d504      	bpl.n	8008830 <_strtod_l+0x5c0>
 8008826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882a:	f7f7 fe91 	bl	8000550 <__aeabi_dmul>
 800882e:	2301      	movs	r3, #1
 8008830:	1076      	asrs	r6, r6, #1
 8008832:	f107 0708 	add.w	r7, r7, #8
 8008836:	d1f4      	bne.n	8008822 <_strtod_l+0x5b2>
 8008838:	b10b      	cbz	r3, 800883e <_strtod_l+0x5ce>
 800883a:	4680      	mov	r8, r0
 800883c:	4689      	mov	r9, r1
 800883e:	9b05      	ldr	r3, [sp, #20]
 8008840:	b1c3      	cbz	r3, 8008874 <_strtod_l+0x604>
 8008842:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008846:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800884a:	2b00      	cmp	r3, #0
 800884c:	4649      	mov	r1, r9
 800884e:	dd11      	ble.n	8008874 <_strtod_l+0x604>
 8008850:	2b1f      	cmp	r3, #31
 8008852:	f340 8127 	ble.w	8008aa4 <_strtod_l+0x834>
 8008856:	2b34      	cmp	r3, #52	; 0x34
 8008858:	bfd8      	it	le
 800885a:	f04f 33ff 	movle.w	r3, #4294967295
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	bfcf      	iteee	gt
 8008864:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800886c:	fa03 f202 	lslle.w	r2, r3, r2
 8008870:	ea02 0901 	andle.w	r9, r2, r1
 8008874:	2200      	movs	r2, #0
 8008876:	2300      	movs	r3, #0
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f8 f8d0 	bl	8000a20 <__aeabi_dcmpeq>
 8008880:	2800      	cmp	r0, #0
 8008882:	d1a1      	bne.n	80087c8 <_strtod_l+0x558>
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	465a      	mov	r2, fp
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4650      	mov	r0, sl
 800888c:	4623      	mov	r3, r4
 800888e:	9908      	ldr	r1, [sp, #32]
 8008890:	f001 fe5c 	bl	800a54c <__s2b>
 8008894:	9008      	str	r0, [sp, #32]
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f af21 	beq.w	80086de <_strtod_l+0x46e>
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	f04f 0b00 	mov.w	fp, #0
 80088a2:	1b5d      	subs	r5, r3, r5
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	f8cd b010 	str.w	fp, [sp, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfb4      	ite	lt
 80088ae:	462b      	movlt	r3, r5
 80088b0:	2300      	movge	r3, #0
 80088b2:	930e      	str	r3, [sp, #56]	; 0x38
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80088ba:	9314      	str	r3, [sp, #80]	; 0x50
 80088bc:	9b08      	ldr	r3, [sp, #32]
 80088be:	4650      	mov	r0, sl
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	f001 fd9b 	bl	800a3fc <_Balloc>
 80088c6:	9006      	str	r0, [sp, #24]
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f43f af10 	beq.w	80086ee <_strtod_l+0x47e>
 80088ce:	9b08      	ldr	r3, [sp, #32]
 80088d0:	300c      	adds	r0, #12
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	f103 010c 	add.w	r1, r3, #12
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f001 fd74 	bl	800a3c8 <memcpy>
 80088e0:	ab1c      	add	r3, sp, #112	; 0x70
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4642      	mov	r2, r8
 80088ea:	464b      	mov	r3, r9
 80088ec:	4650      	mov	r0, sl
 80088ee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80088f2:	f002 f96d 	bl	800abd0 <__d2b>
 80088f6:	901a      	str	r0, [sp, #104]	; 0x68
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f43f aef8 	beq.w	80086ee <_strtod_l+0x47e>
 80088fe:	2101      	movs	r1, #1
 8008900:	4650      	mov	r0, sl
 8008902:	f001 febb 	bl	800a67c <__i2b>
 8008906:	4603      	mov	r3, r0
 8008908:	9004      	str	r0, [sp, #16]
 800890a:	2800      	cmp	r0, #0
 800890c:	f43f aeef 	beq.w	80086ee <_strtod_l+0x47e>
 8008910:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008912:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008914:	2d00      	cmp	r5, #0
 8008916:	bfab      	itete	ge
 8008918:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800891a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800891c:	18ee      	addge	r6, r5, r3
 800891e:	1b5c      	sublt	r4, r3, r5
 8008920:	9b05      	ldr	r3, [sp, #20]
 8008922:	bfa8      	it	ge
 8008924:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008926:	eba5 0503 	sub.w	r5, r5, r3
 800892a:	4415      	add	r5, r2
 800892c:	4b6e      	ldr	r3, [pc, #440]	; (8008ae8 <_strtod_l+0x878>)
 800892e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008932:	bfb8      	it	lt
 8008934:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008936:	429d      	cmp	r5, r3
 8008938:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800893c:	f280 80c4 	bge.w	8008ac8 <_strtod_l+0x858>
 8008940:	1b5b      	subs	r3, r3, r5
 8008942:	2b1f      	cmp	r3, #31
 8008944:	f04f 0701 	mov.w	r7, #1
 8008948:	eba2 0203 	sub.w	r2, r2, r3
 800894c:	f300 80b1 	bgt.w	8008ab2 <_strtod_l+0x842>
 8008950:	2500      	movs	r5, #0
 8008952:	fa07 f303 	lsl.w	r3, r7, r3
 8008956:	930f      	str	r3, [sp, #60]	; 0x3c
 8008958:	18b7      	adds	r7, r6, r2
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	42be      	cmp	r6, r7
 800895e:	4414      	add	r4, r2
 8008960:	441c      	add	r4, r3
 8008962:	4633      	mov	r3, r6
 8008964:	bfa8      	it	ge
 8008966:	463b      	movge	r3, r7
 8008968:	42a3      	cmp	r3, r4
 800896a:	bfa8      	it	ge
 800896c:	4623      	movge	r3, r4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfc2      	ittt	gt
 8008972:	1aff      	subgt	r7, r7, r3
 8008974:	1ae4      	subgt	r4, r4, r3
 8008976:	1af6      	subgt	r6, r6, r3
 8008978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd17      	ble.n	80089ae <_strtod_l+0x73e>
 800897e:	461a      	mov	r2, r3
 8008980:	4650      	mov	r0, sl
 8008982:	9904      	ldr	r1, [sp, #16]
 8008984:	f001 ff38 	bl	800a7f8 <__pow5mult>
 8008988:	9004      	str	r0, [sp, #16]
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f aeaf 	beq.w	80086ee <_strtod_l+0x47e>
 8008990:	4601      	mov	r1, r0
 8008992:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008994:	4650      	mov	r0, sl
 8008996:	f001 fe87 	bl	800a6a8 <__multiply>
 800899a:	9009      	str	r0, [sp, #36]	; 0x24
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f aea6 	beq.w	80086ee <_strtod_l+0x47e>
 80089a2:	4650      	mov	r0, sl
 80089a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089a6:	f001 fd69 	bl	800a47c <_Bfree>
 80089aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ac:	931a      	str	r3, [sp, #104]	; 0x68
 80089ae:	2f00      	cmp	r7, #0
 80089b0:	f300 808e 	bgt.w	8008ad0 <_strtod_l+0x860>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dd08      	ble.n	80089cc <_strtod_l+0x75c>
 80089ba:	4650      	mov	r0, sl
 80089bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089be:	9906      	ldr	r1, [sp, #24]
 80089c0:	f001 ff1a 	bl	800a7f8 <__pow5mult>
 80089c4:	9006      	str	r0, [sp, #24]
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f ae91 	beq.w	80086ee <_strtod_l+0x47e>
 80089cc:	2c00      	cmp	r4, #0
 80089ce:	dd08      	ble.n	80089e2 <_strtod_l+0x772>
 80089d0:	4622      	mov	r2, r4
 80089d2:	4650      	mov	r0, sl
 80089d4:	9906      	ldr	r1, [sp, #24]
 80089d6:	f001 ff69 	bl	800a8ac <__lshift>
 80089da:	9006      	str	r0, [sp, #24]
 80089dc:	2800      	cmp	r0, #0
 80089de:	f43f ae86 	beq.w	80086ee <_strtod_l+0x47e>
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	dd08      	ble.n	80089f8 <_strtod_l+0x788>
 80089e6:	4632      	mov	r2, r6
 80089e8:	4650      	mov	r0, sl
 80089ea:	9904      	ldr	r1, [sp, #16]
 80089ec:	f001 ff5e 	bl	800a8ac <__lshift>
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f43f ae7b 	beq.w	80086ee <_strtod_l+0x47e>
 80089f8:	4650      	mov	r0, sl
 80089fa:	9a06      	ldr	r2, [sp, #24]
 80089fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089fe:	f001 ffe1 	bl	800a9c4 <__mdiff>
 8008a02:	4683      	mov	fp, r0
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f43f ae72 	beq.w	80086ee <_strtod_l+0x47e>
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	68c3      	ldr	r3, [r0, #12]
 8008a0e:	9904      	ldr	r1, [sp, #16]
 8008a10:	60c4      	str	r4, [r0, #12]
 8008a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a14:	f001 ffba 	bl	800a98c <__mcmp>
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	da6b      	bge.n	8008af4 <_strtod_l+0x884>
 8008a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a1e:	ea53 0308 	orrs.w	r3, r3, r8
 8008a22:	f040 8091 	bne.w	8008b48 <_strtod_l+0x8d8>
 8008a26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f040 808c 	bne.w	8008b48 <_strtod_l+0x8d8>
 8008a30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a34:	0d1b      	lsrs	r3, r3, #20
 8008a36:	051b      	lsls	r3, r3, #20
 8008a38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a3c:	f240 8084 	bls.w	8008b48 <_strtod_l+0x8d8>
 8008a40:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008a44:	b91b      	cbnz	r3, 8008a4e <_strtod_l+0x7de>
 8008a46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	dd7c      	ble.n	8008b48 <_strtod_l+0x8d8>
 8008a4e:	4659      	mov	r1, fp
 8008a50:	2201      	movs	r2, #1
 8008a52:	4650      	mov	r0, sl
 8008a54:	f001 ff2a 	bl	800a8ac <__lshift>
 8008a58:	9904      	ldr	r1, [sp, #16]
 8008a5a:	4683      	mov	fp, r0
 8008a5c:	f001 ff96 	bl	800a98c <__mcmp>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	dd71      	ble.n	8008b48 <_strtod_l+0x8d8>
 8008a64:	9905      	ldr	r1, [sp, #20]
 8008a66:	464b      	mov	r3, r9
 8008a68:	4a20      	ldr	r2, [pc, #128]	; (8008aec <_strtod_l+0x87c>)
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	f000 808c 	beq.w	8008b88 <_strtod_l+0x918>
 8008a70:	ea02 0109 	and.w	r1, r2, r9
 8008a74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a78:	f300 8086 	bgt.w	8008b88 <_strtod_l+0x918>
 8008a7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a80:	f77f aeaa 	ble.w	80087d8 <_strtod_l+0x568>
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <_strtod_l+0x880>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fd60 	bl	8000550 <__aeabi_dmul>
 8008a90:	460b      	mov	r3, r1
 8008a92:	4303      	orrs	r3, r0
 8008a94:	bf08      	it	eq
 8008a96:	2322      	moveq	r3, #34	; 0x22
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4689      	mov	r9, r1
 8008a9c:	bf08      	it	eq
 8008a9e:	f8ca 3000 	streq.w	r3, [sl]
 8008aa2:	e62f      	b.n	8008704 <_strtod_l+0x494>
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	ea03 0808 	and.w	r8, r3, r8
 8008ab0:	e6e0      	b.n	8008874 <_strtod_l+0x604>
 8008ab2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008ab6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008aba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008abe:	35e2      	adds	r5, #226	; 0xe2
 8008ac0:	fa07 f505 	lsl.w	r5, r7, r5
 8008ac4:	970f      	str	r7, [sp, #60]	; 0x3c
 8008ac6:	e747      	b.n	8008958 <_strtod_l+0x6e8>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	2500      	movs	r5, #0
 8008acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ace:	e743      	b.n	8008958 <_strtod_l+0x6e8>
 8008ad0:	463a      	mov	r2, r7
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ad6:	f001 fee9 	bl	800a8ac <__lshift>
 8008ada:	901a      	str	r0, [sp, #104]	; 0x68
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f47f af69 	bne.w	80089b4 <_strtod_l+0x744>
 8008ae2:	e604      	b.n	80086ee <_strtod_l+0x47e>
 8008ae4:	0800bcf8 	.word	0x0800bcf8
 8008ae8:	fffffc02 	.word	0xfffffc02
 8008aec:	7ff00000 	.word	0x7ff00000
 8008af0:	39500000 	.word	0x39500000
 8008af4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008af8:	d165      	bne.n	8008bc6 <_strtod_l+0x956>
 8008afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008afc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b00:	b35a      	cbz	r2, 8008b5a <_strtod_l+0x8ea>
 8008b02:	4a99      	ldr	r2, [pc, #612]	; (8008d68 <_strtod_l+0xaf8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d12b      	bne.n	8008b60 <_strtod_l+0x8f0>
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	b303      	cbz	r3, 8008b50 <_strtod_l+0x8e0>
 8008b0e:	464a      	mov	r2, r9
 8008b10:	4b96      	ldr	r3, [pc, #600]	; (8008d6c <_strtod_l+0xafc>)
 8008b12:	4013      	ands	r3, r2
 8008b14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b18:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1c:	d81b      	bhi.n	8008b56 <_strtod_l+0x8e6>
 8008b1e:	0d1b      	lsrs	r3, r3, #20
 8008b20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d119      	bne.n	8008b60 <_strtod_l+0x8f0>
 8008b2c:	4b90      	ldr	r3, [pc, #576]	; (8008d70 <_strtod_l+0xb00>)
 8008b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d102      	bne.n	8008b3a <_strtod_l+0x8ca>
 8008b34:	3101      	adds	r1, #1
 8008b36:	f43f adda 	beq.w	80086ee <_strtod_l+0x47e>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	4b8b      	ldr	r3, [pc, #556]	; (8008d6c <_strtod_l+0xafc>)
 8008b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b42:	401a      	ands	r2, r3
 8008b44:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008b48:	9b05      	ldr	r3, [sp, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d19a      	bne.n	8008a84 <_strtod_l+0x814>
 8008b4e:	e5d9      	b.n	8008704 <_strtod_l+0x494>
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e7e8      	b.n	8008b28 <_strtod_l+0x8b8>
 8008b56:	4613      	mov	r3, r2
 8008b58:	e7e6      	b.n	8008b28 <_strtod_l+0x8b8>
 8008b5a:	ea53 0308 	orrs.w	r3, r3, r8
 8008b5e:	d081      	beq.n	8008a64 <_strtod_l+0x7f4>
 8008b60:	b1e5      	cbz	r5, 8008b9c <_strtod_l+0x92c>
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	421d      	tst	r5, r3
 8008b66:	d0ef      	beq.n	8008b48 <_strtod_l+0x8d8>
 8008b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	9a05      	ldr	r2, [sp, #20]
 8008b70:	b1c3      	cbz	r3, 8008ba4 <_strtod_l+0x934>
 8008b72:	f7ff fb5b 	bl	800822c <sulp>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b7e:	f7f7 fb31 	bl	80001e4 <__adddf3>
 8008b82:	4680      	mov	r8, r0
 8008b84:	4689      	mov	r9, r1
 8008b86:	e7df      	b.n	8008b48 <_strtod_l+0x8d8>
 8008b88:	4013      	ands	r3, r2
 8008b8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b8e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b92:	f04f 38ff 	mov.w	r8, #4294967295
 8008b96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b9a:	e7d5      	b.n	8008b48 <_strtod_l+0x8d8>
 8008b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b9e:	ea13 0f08 	tst.w	r3, r8
 8008ba2:	e7e0      	b.n	8008b66 <_strtod_l+0x8f6>
 8008ba4:	f7ff fb42 	bl	800822c <sulp>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bb0:	f7f7 fb16 	bl	80001e0 <__aeabi_dsub>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4689      	mov	r9, r1
 8008bbc:	f7f7 ff30 	bl	8000a20 <__aeabi_dcmpeq>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d0c1      	beq.n	8008b48 <_strtod_l+0x8d8>
 8008bc4:	e608      	b.n	80087d8 <_strtod_l+0x568>
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	9904      	ldr	r1, [sp, #16]
 8008bca:	f002 f85d 	bl	800ac88 <__ratio>
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	f7f7 ff36 	bl	8000a48 <__aeabi_dcmple>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d070      	beq.n	8008cc2 <_strtod_l+0xa52>
 8008be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d042      	beq.n	8008c6c <_strtod_l+0x9fc>
 8008be6:	2600      	movs	r6, #0
 8008be8:	4f62      	ldr	r7, [pc, #392]	; (8008d74 <_strtod_l+0xb04>)
 8008bea:	4d62      	ldr	r5, [pc, #392]	; (8008d74 <_strtod_l+0xb04>)
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf2:	0d1b      	lsrs	r3, r3, #20
 8008bf4:	051b      	lsls	r3, r3, #20
 8008bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bfa:	4b5f      	ldr	r3, [pc, #380]	; (8008d78 <_strtod_l+0xb08>)
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	f040 80c3 	bne.w	8008d88 <_strtod_l+0xb18>
 8008c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c04:	4640      	mov	r0, r8
 8008c06:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f001 ff66 	bl	800aadc <__ulp>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4630      	mov	r0, r6
 8008c16:	4639      	mov	r1, r7
 8008c18:	f7f7 fc9a 	bl	8000550 <__aeabi_dmul>
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	464b      	mov	r3, r9
 8008c20:	f7f7 fae0 	bl	80001e4 <__adddf3>
 8008c24:	460b      	mov	r3, r1
 8008c26:	4951      	ldr	r1, [pc, #324]	; (8008d6c <_strtod_l+0xafc>)
 8008c28:	4a54      	ldr	r2, [pc, #336]	; (8008d7c <_strtod_l+0xb0c>)
 8008c2a:	4019      	ands	r1, r3
 8008c2c:	4291      	cmp	r1, r2
 8008c2e:	4680      	mov	r8, r0
 8008c30:	d95d      	bls.n	8008cee <_strtod_l+0xa7e>
 8008c32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c34:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <_strtod_l+0xb00>)
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d103      	bne.n	8008c42 <_strtod_l+0x9d2>
 8008c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f43f ad56 	beq.w	80086ee <_strtod_l+0x47e>
 8008c42:	f04f 38ff 	mov.w	r8, #4294967295
 8008c46:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008d70 <_strtod_l+0xb00>
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c4e:	f001 fc15 	bl	800a47c <_Bfree>
 8008c52:	4650      	mov	r0, sl
 8008c54:	9906      	ldr	r1, [sp, #24]
 8008c56:	f001 fc11 	bl	800a47c <_Bfree>
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	f001 fc0d 	bl	800a47c <_Bfree>
 8008c62:	4659      	mov	r1, fp
 8008c64:	4650      	mov	r0, sl
 8008c66:	f001 fc09 	bl	800a47c <_Bfree>
 8008c6a:	e627      	b.n	80088bc <_strtod_l+0x64c>
 8008c6c:	f1b8 0f00 	cmp.w	r8, #0
 8008c70:	d119      	bne.n	8008ca6 <_strtod_l+0xa36>
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c78:	b9e3      	cbnz	r3, 8008cb4 <_strtod_l+0xa44>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4b3c      	ldr	r3, [pc, #240]	; (8008d74 <_strtod_l+0xb04>)
 8008c82:	f7f7 fed7 	bl	8000a34 <__aeabi_dcmplt>
 8008c86:	b9c8      	cbnz	r0, 8008cbc <_strtod_l+0xa4c>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	4b3c      	ldr	r3, [pc, #240]	; (8008d80 <_strtod_l+0xb10>)
 8008c90:	f7f7 fc5e 	bl	8000550 <__aeabi_dmul>
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c9c:	9416      	str	r4, [sp, #88]	; 0x58
 8008c9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ca0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008ca4:	e7a2      	b.n	8008bec <_strtod_l+0x97c>
 8008ca6:	f1b8 0f01 	cmp.w	r8, #1
 8008caa:	d103      	bne.n	8008cb4 <_strtod_l+0xa44>
 8008cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f ad92 	beq.w	80087d8 <_strtod_l+0x568>
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	4f32      	ldr	r7, [pc, #200]	; (8008d84 <_strtod_l+0xb14>)
 8008cba:	e796      	b.n	8008bea <_strtod_l+0x97a>
 8008cbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008cbe:	4d30      	ldr	r5, [pc, #192]	; (8008d80 <_strtod_l+0xb10>)
 8008cc0:	e7ea      	b.n	8008c98 <_strtod_l+0xa28>
 8008cc2:	4b2f      	ldr	r3, [pc, #188]	; (8008d80 <_strtod_l+0xb10>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 fc41 	bl	8000550 <__aeabi_dmul>
 8008cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	b933      	cbnz	r3, 8008ce4 <_strtod_l+0xa74>
 8008cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cda:	9010      	str	r0, [sp, #64]	; 0x40
 8008cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8008cde:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008ce2:	e783      	b.n	8008bec <_strtod_l+0x97c>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008cec:	e7f7      	b.n	8008cde <_strtod_l+0xa6e>
 8008cee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1a8      	bne.n	8008c4a <_strtod_l+0x9da>
 8008cf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cfe:	0d1b      	lsrs	r3, r3, #20
 8008d00:	051b      	lsls	r3, r3, #20
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d1a1      	bne.n	8008c4a <_strtod_l+0x9da>
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 ff81 	bl	8000c10 <__aeabi_d2lz>
 8008d0e:	f7f7 fbf1 	bl	80004f4 <__aeabi_l2d>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 fa61 	bl	80001e0 <__aeabi_dsub>
 8008d1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d24:	ea43 0308 	orr.w	r3, r3, r8
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	d066      	beq.n	8008dfe <_strtod_l+0xb8e>
 8008d30:	a309      	add	r3, pc, #36	; (adr r3, 8008d58 <_strtod_l+0xae8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fe7d 	bl	8000a34 <__aeabi_dcmplt>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f47f ace2 	bne.w	8008704 <_strtod_l+0x494>
 8008d40:	a307      	add	r3, pc, #28	; (adr r3, 8008d60 <_strtod_l+0xaf0>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fe91 	bl	8000a70 <__aeabi_dcmpgt>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f af7b 	beq.w	8008c4a <_strtod_l+0x9da>
 8008d54:	e4d6      	b.n	8008704 <_strtod_l+0x494>
 8008d56:	bf00      	nop
 8008d58:	94a03595 	.word	0x94a03595
 8008d5c:	3fdfffff 	.word	0x3fdfffff
 8008d60:	35afe535 	.word	0x35afe535
 8008d64:	3fe00000 	.word	0x3fe00000
 8008d68:	000fffff 	.word	0x000fffff
 8008d6c:	7ff00000 	.word	0x7ff00000
 8008d70:	7fefffff 	.word	0x7fefffff
 8008d74:	3ff00000 	.word	0x3ff00000
 8008d78:	7fe00000 	.word	0x7fe00000
 8008d7c:	7c9fffff 	.word	0x7c9fffff
 8008d80:	3fe00000 	.word	0x3fe00000
 8008d84:	bff00000 	.word	0xbff00000
 8008d88:	9b05      	ldr	r3, [sp, #20]
 8008d8a:	b313      	cbz	r3, 8008dd2 <_strtod_l+0xb62>
 8008d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d92:	d81e      	bhi.n	8008dd2 <_strtod_l+0xb62>
 8008d94:	a326      	add	r3, pc, #152	; (adr r3, 8008e30 <_strtod_l+0xbc0>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7f7 fe53 	bl	8000a48 <__aeabi_dcmple>
 8008da2:	b190      	cbz	r0, 8008dca <_strtod_l+0xb5a>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7f7 feaa 	bl	8000b00 <__aeabi_d2uiz>
 8008dac:	2801      	cmp	r0, #1
 8008dae:	bf38      	it	cc
 8008db0:	2001      	movcc	r0, #1
 8008db2:	f7f7 fb53 	bl	800045c <__aeabi_ui2d>
 8008db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db8:	4604      	mov	r4, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	b9d3      	cbnz	r3, 8008df4 <_strtod_l+0xb84>
 8008dbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dc2:	9012      	str	r0, [sp, #72]	; 0x48
 8008dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dc6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008dca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dcc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008dd0:	1a9f      	subs	r7, r3, r2
 8008dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dd6:	f001 fe81 	bl	800aadc <__ulp>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4630      	mov	r0, r6
 8008de0:	4639      	mov	r1, r7
 8008de2:	f7f7 fbb5 	bl	8000550 <__aeabi_dmul>
 8008de6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008dea:	f7f7 f9fb 	bl	80001e4 <__adddf3>
 8008dee:	4680      	mov	r8, r0
 8008df0:	4689      	mov	r9, r1
 8008df2:	e77e      	b.n	8008cf2 <_strtod_l+0xa82>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008dfc:	e7e3      	b.n	8008dc6 <_strtod_l+0xb56>
 8008dfe:	a30e      	add	r3, pc, #56	; (adr r3, 8008e38 <_strtod_l+0xbc8>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fe16 	bl	8000a34 <__aeabi_dcmplt>
 8008e08:	e7a1      	b.n	8008d4e <_strtod_l+0xade>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	f7ff ba71 	b.w	80082fa <_strtod_l+0x8a>
 8008e18:	2a65      	cmp	r2, #101	; 0x65
 8008e1a:	f43f ab63 	beq.w	80084e4 <_strtod_l+0x274>
 8008e1e:	2a45      	cmp	r2, #69	; 0x45
 8008e20:	f43f ab60 	beq.w	80084e4 <_strtod_l+0x274>
 8008e24:	2301      	movs	r3, #1
 8008e26:	f7ff bb95 	b.w	8008554 <_strtod_l+0x2e4>
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w
 8008e30:	ffc00000 	.word	0xffc00000
 8008e34:	41dfffff 	.word	0x41dfffff
 8008e38:	94a03595 	.word	0x94a03595
 8008e3c:	3fcfffff 	.word	0x3fcfffff

08008e40 <_strtod_r>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	; (8008e48 <_strtod_r+0x8>)
 8008e42:	f7ff ba15 	b.w	8008270 <_strtod_l>
 8008e46:	bf00      	nop
 8008e48:	20000210 	.word	0x20000210

08008e4c <_strtol_l.constprop.0>:
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e52:	4680      	mov	r8, r0
 8008e54:	d001      	beq.n	8008e5a <_strtol_l.constprop.0+0xe>
 8008e56:	2b24      	cmp	r3, #36	; 0x24
 8008e58:	d906      	bls.n	8008e68 <_strtol_l.constprop.0+0x1c>
 8008e5a:	f7fe fa27 	bl	80072ac <__errno>
 8008e5e:	2316      	movs	r3, #22
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	2000      	movs	r0, #0
 8008e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e68:	460d      	mov	r5, r1
 8008e6a:	4f35      	ldr	r7, [pc, #212]	; (8008f40 <_strtol_l.constprop.0+0xf4>)
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e72:	5de6      	ldrb	r6, [r4, r7]
 8008e74:	f016 0608 	ands.w	r6, r6, #8
 8008e78:	d1f8      	bne.n	8008e6c <_strtol_l.constprop.0+0x20>
 8008e7a:	2c2d      	cmp	r4, #45	; 0x2d
 8008e7c:	d12f      	bne.n	8008ede <_strtol_l.constprop.0+0x92>
 8008e7e:	2601      	movs	r6, #1
 8008e80:	782c      	ldrb	r4, [r5, #0]
 8008e82:	1c85      	adds	r5, r0, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d057      	beq.n	8008f38 <_strtol_l.constprop.0+0xec>
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	d109      	bne.n	8008ea0 <_strtol_l.constprop.0+0x54>
 8008e8c:	2c30      	cmp	r4, #48	; 0x30
 8008e8e:	d107      	bne.n	8008ea0 <_strtol_l.constprop.0+0x54>
 8008e90:	7828      	ldrb	r0, [r5, #0]
 8008e92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e96:	2858      	cmp	r0, #88	; 0x58
 8008e98:	d149      	bne.n	8008f2e <_strtol_l.constprop.0+0xe2>
 8008e9a:	2310      	movs	r3, #16
 8008e9c:	786c      	ldrb	r4, [r5, #1]
 8008e9e:	3502      	adds	r5, #2
 8008ea0:	2700      	movs	r7, #0
 8008ea2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008ea6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008eaa:	fbbe f9f3 	udiv	r9, lr, r3
 8008eae:	4638      	mov	r0, r7
 8008eb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8008eb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008eb8:	f1bc 0f09 	cmp.w	ip, #9
 8008ebc:	d814      	bhi.n	8008ee8 <_strtol_l.constprop.0+0x9c>
 8008ebe:	4664      	mov	r4, ip
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	dd22      	ble.n	8008f0a <_strtol_l.constprop.0+0xbe>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	db1d      	blt.n	8008f04 <_strtol_l.constprop.0+0xb8>
 8008ec8:	4581      	cmp	r9, r0
 8008eca:	d31b      	bcc.n	8008f04 <_strtol_l.constprop.0+0xb8>
 8008ecc:	d101      	bne.n	8008ed2 <_strtol_l.constprop.0+0x86>
 8008ece:	45a2      	cmp	sl, r4
 8008ed0:	db18      	blt.n	8008f04 <_strtol_l.constprop.0+0xb8>
 8008ed2:	2701      	movs	r7, #1
 8008ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8008ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008edc:	e7ea      	b.n	8008eb4 <_strtol_l.constprop.0+0x68>
 8008ede:	2c2b      	cmp	r4, #43	; 0x2b
 8008ee0:	bf04      	itt	eq
 8008ee2:	782c      	ldrbeq	r4, [r5, #0]
 8008ee4:	1c85      	addeq	r5, r0, #2
 8008ee6:	e7cd      	b.n	8008e84 <_strtol_l.constprop.0+0x38>
 8008ee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008eec:	f1bc 0f19 	cmp.w	ip, #25
 8008ef0:	d801      	bhi.n	8008ef6 <_strtol_l.constprop.0+0xaa>
 8008ef2:	3c37      	subs	r4, #55	; 0x37
 8008ef4:	e7e4      	b.n	8008ec0 <_strtol_l.constprop.0+0x74>
 8008ef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008efa:	f1bc 0f19 	cmp.w	ip, #25
 8008efe:	d804      	bhi.n	8008f0a <_strtol_l.constprop.0+0xbe>
 8008f00:	3c57      	subs	r4, #87	; 0x57
 8008f02:	e7dd      	b.n	8008ec0 <_strtol_l.constprop.0+0x74>
 8008f04:	f04f 37ff 	mov.w	r7, #4294967295
 8008f08:	e7e6      	b.n	8008ed8 <_strtol_l.constprop.0+0x8c>
 8008f0a:	2f00      	cmp	r7, #0
 8008f0c:	da07      	bge.n	8008f1e <_strtol_l.constprop.0+0xd2>
 8008f0e:	2322      	movs	r3, #34	; 0x22
 8008f10:	4670      	mov	r0, lr
 8008f12:	f8c8 3000 	str.w	r3, [r8]
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d0a4      	beq.n	8008e64 <_strtol_l.constprop.0+0x18>
 8008f1a:	1e69      	subs	r1, r5, #1
 8008f1c:	e005      	b.n	8008f2a <_strtol_l.constprop.0+0xde>
 8008f1e:	b106      	cbz	r6, 8008f22 <_strtol_l.constprop.0+0xd6>
 8008f20:	4240      	negs	r0, r0
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d09e      	beq.n	8008e64 <_strtol_l.constprop.0+0x18>
 8008f26:	2f00      	cmp	r7, #0
 8008f28:	d1f7      	bne.n	8008f1a <_strtol_l.constprop.0+0xce>
 8008f2a:	6011      	str	r1, [r2, #0]
 8008f2c:	e79a      	b.n	8008e64 <_strtol_l.constprop.0+0x18>
 8008f2e:	2430      	movs	r4, #48	; 0x30
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1b5      	bne.n	8008ea0 <_strtol_l.constprop.0+0x54>
 8008f34:	2308      	movs	r3, #8
 8008f36:	e7b3      	b.n	8008ea0 <_strtol_l.constprop.0+0x54>
 8008f38:	2c30      	cmp	r4, #48	; 0x30
 8008f3a:	d0a9      	beq.n	8008e90 <_strtol_l.constprop.0+0x44>
 8008f3c:	230a      	movs	r3, #10
 8008f3e:	e7af      	b.n	8008ea0 <_strtol_l.constprop.0+0x54>
 8008f40:	0800bd21 	.word	0x0800bd21

08008f44 <_strtol_r>:
 8008f44:	f7ff bf82 	b.w	8008e4c <_strtol_l.constprop.0>

08008f48 <_vsniprintf_r>:
 8008f48:	b530      	push	{r4, r5, lr}
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	461a      	mov	r2, r3
 8008f52:	b09b      	sub	sp, #108	; 0x6c
 8008f54:	da05      	bge.n	8008f62 <_vsniprintf_r+0x1a>
 8008f56:	238b      	movs	r3, #139	; 0x8b
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	b01b      	add	sp, #108	; 0x6c
 8008f60:	bd30      	pop	{r4, r5, pc}
 8008f62:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f6a:	bf0c      	ite	eq
 8008f6c:	4623      	moveq	r3, r4
 8008f6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f72:	9302      	str	r3, [sp, #8]
 8008f74:	9305      	str	r3, [sp, #20]
 8008f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f7a:	9100      	str	r1, [sp, #0]
 8008f7c:	9104      	str	r1, [sp, #16]
 8008f7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f82:	4669      	mov	r1, sp
 8008f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f86:	f001 ff61 	bl	800ae4c <_svfiprintf_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	bfbc      	itt	lt
 8008f8e:	238b      	movlt	r3, #139	; 0x8b
 8008f90:	602b      	strlt	r3, [r5, #0]
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	d0e3      	beq.n	8008f5e <_vsniprintf_r+0x16>
 8008f96:	2200      	movs	r2, #0
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	e7df      	b.n	8008f5e <_vsniprintf_r+0x16>
	...

08008fa0 <vsniprintf>:
 8008fa0:	b507      	push	{r0, r1, r2, lr}
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	4601      	mov	r1, r0
 8008faa:	4803      	ldr	r0, [pc, #12]	; (8008fb8 <vsniprintf+0x18>)
 8008fac:	6800      	ldr	r0, [r0, #0]
 8008fae:	f7ff ffcb 	bl	8008f48 <_vsniprintf_r>
 8008fb2:	b003      	add	sp, #12
 8008fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fb8:	200001a8 	.word	0x200001a8

08008fbc <quorem>:
 8008fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	6903      	ldr	r3, [r0, #16]
 8008fc2:	690c      	ldr	r4, [r1, #16]
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	42a3      	cmp	r3, r4
 8008fc8:	f2c0 8082 	blt.w	80090d0 <quorem+0x114>
 8008fcc:	3c01      	subs	r4, #1
 8008fce:	f100 0514 	add.w	r5, r0, #20
 8008fd2:	f101 0814 	add.w	r8, r1, #20
 8008fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ff4:	d331      	bcc.n	800905a <quorem+0x9e>
 8008ff6:	f04f 0e00 	mov.w	lr, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	46ac      	mov	ip, r5
 8008ffe:	46f2      	mov	sl, lr
 8009000:	f850 2b04 	ldr.w	r2, [r0], #4
 8009004:	b293      	uxth	r3, r2
 8009006:	fb06 e303 	mla	r3, r6, r3, lr
 800900a:	0c12      	lsrs	r2, r2, #16
 800900c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009010:	b29b      	uxth	r3, r3
 8009012:	fb06 e202 	mla	r2, r6, r2, lr
 8009016:	ebaa 0303 	sub.w	r3, sl, r3
 800901a:	f8dc a000 	ldr.w	sl, [ip]
 800901e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009022:	fa1f fa8a 	uxth.w	sl, sl
 8009026:	4453      	add	r3, sl
 8009028:	f8dc a000 	ldr.w	sl, [ip]
 800902c:	b292      	uxth	r2, r2
 800902e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009032:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009036:	b29b      	uxth	r3, r3
 8009038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800903c:	4581      	cmp	r9, r0
 800903e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009042:	f84c 3b04 	str.w	r3, [ip], #4
 8009046:	d2db      	bcs.n	8009000 <quorem+0x44>
 8009048:	f855 300b 	ldr.w	r3, [r5, fp]
 800904c:	b92b      	cbnz	r3, 800905a <quorem+0x9e>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	3b04      	subs	r3, #4
 8009052:	429d      	cmp	r5, r3
 8009054:	461a      	mov	r2, r3
 8009056:	d32f      	bcc.n	80090b8 <quorem+0xfc>
 8009058:	613c      	str	r4, [r7, #16]
 800905a:	4638      	mov	r0, r7
 800905c:	f001 fc96 	bl	800a98c <__mcmp>
 8009060:	2800      	cmp	r0, #0
 8009062:	db25      	blt.n	80090b0 <quorem+0xf4>
 8009064:	4628      	mov	r0, r5
 8009066:	f04f 0c00 	mov.w	ip, #0
 800906a:	3601      	adds	r6, #1
 800906c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009070:	f8d0 e000 	ldr.w	lr, [r0]
 8009074:	b28b      	uxth	r3, r1
 8009076:	ebac 0303 	sub.w	r3, ip, r3
 800907a:	fa1f f28e 	uxth.w	r2, lr
 800907e:	4413      	add	r3, r2
 8009080:	0c0a      	lsrs	r2, r1, #16
 8009082:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009086:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800908a:	b29b      	uxth	r3, r3
 800908c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009090:	45c1      	cmp	r9, r8
 8009092:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009096:	f840 3b04 	str.w	r3, [r0], #4
 800909a:	d2e7      	bcs.n	800906c <quorem+0xb0>
 800909c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a4:	b922      	cbnz	r2, 80090b0 <quorem+0xf4>
 80090a6:	3b04      	subs	r3, #4
 80090a8:	429d      	cmp	r5, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	d30a      	bcc.n	80090c4 <quorem+0x108>
 80090ae:	613c      	str	r4, [r7, #16]
 80090b0:	4630      	mov	r0, r6
 80090b2:	b003      	add	sp, #12
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	3b04      	subs	r3, #4
 80090bc:	2a00      	cmp	r2, #0
 80090be:	d1cb      	bne.n	8009058 <quorem+0x9c>
 80090c0:	3c01      	subs	r4, #1
 80090c2:	e7c6      	b.n	8009052 <quorem+0x96>
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	3b04      	subs	r3, #4
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	d1f0      	bne.n	80090ae <quorem+0xf2>
 80090cc:	3c01      	subs	r4, #1
 80090ce:	e7eb      	b.n	80090a8 <quorem+0xec>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7ee      	b.n	80090b2 <quorem+0xf6>
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4616      	mov	r6, r2
 80090de:	461f      	mov	r7, r3
 80090e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090e2:	b099      	sub	sp, #100	; 0x64
 80090e4:	4605      	mov	r5, r0
 80090e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80090ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80090ee:	b974      	cbnz	r4, 800910e <_dtoa_r+0x36>
 80090f0:	2010      	movs	r0, #16
 80090f2:	f7fe f905 	bl	8007300 <malloc>
 80090f6:	4602      	mov	r2, r0
 80090f8:	6268      	str	r0, [r5, #36]	; 0x24
 80090fa:	b920      	cbnz	r0, 8009106 <_dtoa_r+0x2e>
 80090fc:	21ea      	movs	r1, #234	; 0xea
 80090fe:	4ba8      	ldr	r3, [pc, #672]	; (80093a0 <_dtoa_r+0x2c8>)
 8009100:	48a8      	ldr	r0, [pc, #672]	; (80093a4 <_dtoa_r+0x2cc>)
 8009102:	f001 ffcb 	bl	800b09c <__assert_func>
 8009106:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800910a:	6004      	str	r4, [r0, #0]
 800910c:	60c4      	str	r4, [r0, #12]
 800910e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009110:	6819      	ldr	r1, [r3, #0]
 8009112:	b151      	cbz	r1, 800912a <_dtoa_r+0x52>
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	2301      	movs	r3, #1
 8009118:	4093      	lsls	r3, r2
 800911a:	604a      	str	r2, [r1, #4]
 800911c:	608b      	str	r3, [r1, #8]
 800911e:	4628      	mov	r0, r5
 8009120:	f001 f9ac 	bl	800a47c <_Bfree>
 8009124:	2200      	movs	r2, #0
 8009126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	1e3b      	subs	r3, r7, #0
 800912c:	bfaf      	iteee	ge
 800912e:	2300      	movge	r3, #0
 8009130:	2201      	movlt	r2, #1
 8009132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009136:	9305      	strlt	r3, [sp, #20]
 8009138:	bfa8      	it	ge
 800913a:	f8c8 3000 	strge.w	r3, [r8]
 800913e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009142:	4b99      	ldr	r3, [pc, #612]	; (80093a8 <_dtoa_r+0x2d0>)
 8009144:	bfb8      	it	lt
 8009146:	f8c8 2000 	strlt.w	r2, [r8]
 800914a:	ea33 0309 	bics.w	r3, r3, r9
 800914e:	d119      	bne.n	8009184 <_dtoa_r+0xac>
 8009150:	f242 730f 	movw	r3, #9999	; 0x270f
 8009154:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800915c:	4333      	orrs	r3, r6
 800915e:	f000 857f 	beq.w	8009c60 <_dtoa_r+0xb88>
 8009162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009164:	b953      	cbnz	r3, 800917c <_dtoa_r+0xa4>
 8009166:	4b91      	ldr	r3, [pc, #580]	; (80093ac <_dtoa_r+0x2d4>)
 8009168:	e022      	b.n	80091b0 <_dtoa_r+0xd8>
 800916a:	4b91      	ldr	r3, [pc, #580]	; (80093b0 <_dtoa_r+0x2d8>)
 800916c:	9303      	str	r3, [sp, #12]
 800916e:	3308      	adds	r3, #8
 8009170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	9803      	ldr	r0, [sp, #12]
 8009176:	b019      	add	sp, #100	; 0x64
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	4b8b      	ldr	r3, [pc, #556]	; (80093ac <_dtoa_r+0x2d4>)
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	3303      	adds	r3, #3
 8009182:	e7f5      	b.n	8009170 <_dtoa_r+0x98>
 8009184:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009188:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800918c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009190:	2200      	movs	r2, #0
 8009192:	2300      	movs	r3, #0
 8009194:	f7f7 fc44 	bl	8000a20 <__aeabi_dcmpeq>
 8009198:	4680      	mov	r8, r0
 800919a:	b158      	cbz	r0, 80091b4 <_dtoa_r+0xdc>
 800919c:	2301      	movs	r3, #1
 800919e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8558 	beq.w	8009c5a <_dtoa_r+0xb82>
 80091aa:	4882      	ldr	r0, [pc, #520]	; (80093b4 <_dtoa_r+0x2dc>)
 80091ac:	6018      	str	r0, [r3, #0]
 80091ae:	1e43      	subs	r3, r0, #1
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	e7df      	b.n	8009174 <_dtoa_r+0x9c>
 80091b4:	ab16      	add	r3, sp, #88	; 0x58
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	ab17      	add	r3, sp, #92	; 0x5c
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4628      	mov	r0, r5
 80091be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091c2:	f001 fd05 	bl	800abd0 <__d2b>
 80091c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80091ca:	4683      	mov	fp, r0
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	d07f      	beq.n	80092d0 <_dtoa_r+0x1f8>
 80091d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80091da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80091e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80091e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80091ea:	2200      	movs	r2, #0
 80091ec:	4b72      	ldr	r3, [pc, #456]	; (80093b8 <_dtoa_r+0x2e0>)
 80091ee:	f7f6 fff7 	bl	80001e0 <__aeabi_dsub>
 80091f2:	a365      	add	r3, pc, #404	; (adr r3, 8009388 <_dtoa_r+0x2b0>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f9aa 	bl	8000550 <__aeabi_dmul>
 80091fc:	a364      	add	r3, pc, #400	; (adr r3, 8009390 <_dtoa_r+0x2b8>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f6 ffef 	bl	80001e4 <__adddf3>
 8009206:	4606      	mov	r6, r0
 8009208:	4620      	mov	r0, r4
 800920a:	460f      	mov	r7, r1
 800920c:	f7f7 f936 	bl	800047c <__aeabi_i2d>
 8009210:	a361      	add	r3, pc, #388	; (adr r3, 8009398 <_dtoa_r+0x2c0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f99b 	bl	8000550 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f6 ffdf 	bl	80001e4 <__adddf3>
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	f7f7 fc41 	bl	8000ab0 <__aeabi_d2iz>
 800922e:	2200      	movs	r2, #0
 8009230:	4682      	mov	sl, r0
 8009232:	2300      	movs	r3, #0
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fbfc 	bl	8000a34 <__aeabi_dcmplt>
 800923c:	b148      	cbz	r0, 8009252 <_dtoa_r+0x17a>
 800923e:	4650      	mov	r0, sl
 8009240:	f7f7 f91c 	bl	800047c <__aeabi_i2d>
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	f7f7 fbea 	bl	8000a20 <__aeabi_dcmpeq>
 800924c:	b908      	cbnz	r0, 8009252 <_dtoa_r+0x17a>
 800924e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009252:	f1ba 0f16 	cmp.w	sl, #22
 8009256:	d858      	bhi.n	800930a <_dtoa_r+0x232>
 8009258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800925c:	4b57      	ldr	r3, [pc, #348]	; (80093bc <_dtoa_r+0x2e4>)
 800925e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 fbe5 	bl	8000a34 <__aeabi_dcmplt>
 800926a:	2800      	cmp	r0, #0
 800926c:	d04f      	beq.n	800930e <_dtoa_r+0x236>
 800926e:	2300      	movs	r3, #0
 8009270:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009274:	930f      	str	r3, [sp, #60]	; 0x3c
 8009276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009278:	1b1c      	subs	r4, r3, r4
 800927a:	1e63      	subs	r3, r4, #1
 800927c:	9309      	str	r3, [sp, #36]	; 0x24
 800927e:	bf49      	itett	mi
 8009280:	f1c4 0301 	rsbmi	r3, r4, #1
 8009284:	2300      	movpl	r3, #0
 8009286:	9306      	strmi	r3, [sp, #24]
 8009288:	2300      	movmi	r3, #0
 800928a:	bf54      	ite	pl
 800928c:	9306      	strpl	r3, [sp, #24]
 800928e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	db3d      	blt.n	8009312 <_dtoa_r+0x23a>
 8009296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009298:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800929c:	4453      	add	r3, sl
 800929e:	9309      	str	r3, [sp, #36]	; 0x24
 80092a0:	2300      	movs	r3, #0
 80092a2:	930a      	str	r3, [sp, #40]	; 0x28
 80092a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	f200 808c 	bhi.w	80093c4 <_dtoa_r+0x2ec>
 80092ac:	2b05      	cmp	r3, #5
 80092ae:	bfc4      	itt	gt
 80092b0:	3b04      	subgt	r3, #4
 80092b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80092b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092b6:	bfc8      	it	gt
 80092b8:	2400      	movgt	r4, #0
 80092ba:	f1a3 0302 	sub.w	r3, r3, #2
 80092be:	bfd8      	it	le
 80092c0:	2401      	movle	r4, #1
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	f200 808a 	bhi.w	80093dc <_dtoa_r+0x304>
 80092c8:	e8df f003 	tbb	[pc, r3]
 80092cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80092d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80092d4:	441c      	add	r4, r3
 80092d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80092da:	2b20      	cmp	r3, #32
 80092dc:	bfc3      	ittte	gt
 80092de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80092e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80092ea:	f1c3 0320 	rsble	r3, r3, #32
 80092ee:	bfc6      	itte	gt
 80092f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092f4:	4318      	orrgt	r0, r3
 80092f6:	fa06 f003 	lslle.w	r0, r6, r3
 80092fa:	f7f7 f8af 	bl	800045c <__aeabi_ui2d>
 80092fe:	2301      	movs	r3, #1
 8009300:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009304:	3c01      	subs	r4, #1
 8009306:	9313      	str	r3, [sp, #76]	; 0x4c
 8009308:	e76f      	b.n	80091ea <_dtoa_r+0x112>
 800930a:	2301      	movs	r3, #1
 800930c:	e7b2      	b.n	8009274 <_dtoa_r+0x19c>
 800930e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009310:	e7b1      	b.n	8009276 <_dtoa_r+0x19e>
 8009312:	9b06      	ldr	r3, [sp, #24]
 8009314:	eba3 030a 	sub.w	r3, r3, sl
 8009318:	9306      	str	r3, [sp, #24]
 800931a:	f1ca 0300 	rsb	r3, sl, #0
 800931e:	930a      	str	r3, [sp, #40]	; 0x28
 8009320:	2300      	movs	r3, #0
 8009322:	930e      	str	r3, [sp, #56]	; 0x38
 8009324:	e7be      	b.n	80092a4 <_dtoa_r+0x1cc>
 8009326:	2300      	movs	r3, #0
 8009328:	930b      	str	r3, [sp, #44]	; 0x2c
 800932a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc58      	bgt.n	80093e2 <_dtoa_r+0x30a>
 8009330:	f04f 0901 	mov.w	r9, #1
 8009334:	464b      	mov	r3, r9
 8009336:	f8cd 9020 	str.w	r9, [sp, #32]
 800933a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800933e:	2200      	movs	r2, #0
 8009340:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009342:	6042      	str	r2, [r0, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	f102 0614 	add.w	r6, r2, #20
 800934a:	429e      	cmp	r6, r3
 800934c:	6841      	ldr	r1, [r0, #4]
 800934e:	d94e      	bls.n	80093ee <_dtoa_r+0x316>
 8009350:	4628      	mov	r0, r5
 8009352:	f001 f853 	bl	800a3fc <_Balloc>
 8009356:	9003      	str	r0, [sp, #12]
 8009358:	2800      	cmp	r0, #0
 800935a:	d14c      	bne.n	80093f6 <_dtoa_r+0x31e>
 800935c:	4602      	mov	r2, r0
 800935e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009362:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <_dtoa_r+0x2e8>)
 8009364:	e6cc      	b.n	8009100 <_dtoa_r+0x28>
 8009366:	2301      	movs	r3, #1
 8009368:	e7de      	b.n	8009328 <_dtoa_r+0x250>
 800936a:	2300      	movs	r3, #0
 800936c:	930b      	str	r3, [sp, #44]	; 0x2c
 800936e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009370:	eb0a 0903 	add.w	r9, sl, r3
 8009374:	f109 0301 	add.w	r3, r9, #1
 8009378:	2b01      	cmp	r3, #1
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	bfb8      	it	lt
 800937e:	2301      	movlt	r3, #1
 8009380:	e7dd      	b.n	800933e <_dtoa_r+0x266>
 8009382:	2301      	movs	r3, #1
 8009384:	e7f2      	b.n	800936c <_dtoa_r+0x294>
 8009386:	bf00      	nop
 8009388:	636f4361 	.word	0x636f4361
 800938c:	3fd287a7 	.word	0x3fd287a7
 8009390:	8b60c8b3 	.word	0x8b60c8b3
 8009394:	3fc68a28 	.word	0x3fc68a28
 8009398:	509f79fb 	.word	0x509f79fb
 800939c:	3fd34413 	.word	0x3fd34413
 80093a0:	0800be2e 	.word	0x0800be2e
 80093a4:	0800be45 	.word	0x0800be45
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	0800be2a 	.word	0x0800be2a
 80093b0:	0800be21 	.word	0x0800be21
 80093b4:	0800bca1 	.word	0x0800bca1
 80093b8:	3ff80000 	.word	0x3ff80000
 80093bc:	0800bfb0 	.word	0x0800bfb0
 80093c0:	0800bea0 	.word	0x0800bea0
 80093c4:	2401      	movs	r4, #1
 80093c6:	2300      	movs	r3, #0
 80093c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80093ca:	9322      	str	r3, [sp, #136]	; 0x88
 80093cc:	f04f 39ff 	mov.w	r9, #4294967295
 80093d0:	2200      	movs	r2, #0
 80093d2:	2312      	movs	r3, #18
 80093d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80093d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80093da:	e7b0      	b.n	800933e <_dtoa_r+0x266>
 80093dc:	2301      	movs	r3, #1
 80093de:	930b      	str	r3, [sp, #44]	; 0x2c
 80093e0:	e7f4      	b.n	80093cc <_dtoa_r+0x2f4>
 80093e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80093e6:	464b      	mov	r3, r9
 80093e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80093ec:	e7a7      	b.n	800933e <_dtoa_r+0x266>
 80093ee:	3101      	adds	r1, #1
 80093f0:	6041      	str	r1, [r0, #4]
 80093f2:	0052      	lsls	r2, r2, #1
 80093f4:	e7a7      	b.n	8009346 <_dtoa_r+0x26e>
 80093f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093f8:	9a03      	ldr	r2, [sp, #12]
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	2b0e      	cmp	r3, #14
 8009400:	f200 80a8 	bhi.w	8009554 <_dtoa_r+0x47c>
 8009404:	2c00      	cmp	r4, #0
 8009406:	f000 80a5 	beq.w	8009554 <_dtoa_r+0x47c>
 800940a:	f1ba 0f00 	cmp.w	sl, #0
 800940e:	dd34      	ble.n	800947a <_dtoa_r+0x3a2>
 8009410:	4a9a      	ldr	r2, [pc, #616]	; (800967c <_dtoa_r+0x5a4>)
 8009412:	f00a 030f 	and.w	r3, sl, #15
 8009416:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800941a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800941e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009422:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009426:	ea4f 142a 	mov.w	r4, sl, asr #4
 800942a:	d016      	beq.n	800945a <_dtoa_r+0x382>
 800942c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009430:	4b93      	ldr	r3, [pc, #588]	; (8009680 <_dtoa_r+0x5a8>)
 8009432:	2703      	movs	r7, #3
 8009434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009438:	f7f7 f9b4 	bl	80007a4 <__aeabi_ddiv>
 800943c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009440:	f004 040f 	and.w	r4, r4, #15
 8009444:	4e8e      	ldr	r6, [pc, #568]	; (8009680 <_dtoa_r+0x5a8>)
 8009446:	b954      	cbnz	r4, 800945e <_dtoa_r+0x386>
 8009448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800944c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009450:	f7f7 f9a8 	bl	80007a4 <__aeabi_ddiv>
 8009454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009458:	e029      	b.n	80094ae <_dtoa_r+0x3d6>
 800945a:	2702      	movs	r7, #2
 800945c:	e7f2      	b.n	8009444 <_dtoa_r+0x36c>
 800945e:	07e1      	lsls	r1, r4, #31
 8009460:	d508      	bpl.n	8009474 <_dtoa_r+0x39c>
 8009462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009466:	e9d6 2300 	ldrd	r2, r3, [r6]
 800946a:	f7f7 f871 	bl	8000550 <__aeabi_dmul>
 800946e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009472:	3701      	adds	r7, #1
 8009474:	1064      	asrs	r4, r4, #1
 8009476:	3608      	adds	r6, #8
 8009478:	e7e5      	b.n	8009446 <_dtoa_r+0x36e>
 800947a:	f000 80a5 	beq.w	80095c8 <_dtoa_r+0x4f0>
 800947e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009482:	f1ca 0400 	rsb	r4, sl, #0
 8009486:	4b7d      	ldr	r3, [pc, #500]	; (800967c <_dtoa_r+0x5a4>)
 8009488:	f004 020f 	and.w	r2, r4, #15
 800948c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f7f7 f85c 	bl	8000550 <__aeabi_dmul>
 8009498:	2702      	movs	r7, #2
 800949a:	2300      	movs	r3, #0
 800949c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094a0:	4e77      	ldr	r6, [pc, #476]	; (8009680 <_dtoa_r+0x5a8>)
 80094a2:	1124      	asrs	r4, r4, #4
 80094a4:	2c00      	cmp	r4, #0
 80094a6:	f040 8084 	bne.w	80095b2 <_dtoa_r+0x4da>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1d2      	bne.n	8009454 <_dtoa_r+0x37c>
 80094ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 808b 	beq.w	80095cc <_dtoa_r+0x4f4>
 80094b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80094ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80094be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094c2:	2200      	movs	r2, #0
 80094c4:	4b6f      	ldr	r3, [pc, #444]	; (8009684 <_dtoa_r+0x5ac>)
 80094c6:	f7f7 fab5 	bl	8000a34 <__aeabi_dcmplt>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d07e      	beq.n	80095cc <_dtoa_r+0x4f4>
 80094ce:	9b08      	ldr	r3, [sp, #32]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d07b      	beq.n	80095cc <_dtoa_r+0x4f4>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	dd38      	ble.n	800954c <_dtoa_r+0x474>
 80094da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094de:	2200      	movs	r2, #0
 80094e0:	4b69      	ldr	r3, [pc, #420]	; (8009688 <_dtoa_r+0x5b0>)
 80094e2:	f7f7 f835 	bl	8000550 <__aeabi_dmul>
 80094e6:	464c      	mov	r4, r9
 80094e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80094f0:	3701      	adds	r7, #1
 80094f2:	4638      	mov	r0, r7
 80094f4:	f7f6 ffc2 	bl	800047c <__aeabi_i2d>
 80094f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094fc:	f7f7 f828 	bl	8000550 <__aeabi_dmul>
 8009500:	2200      	movs	r2, #0
 8009502:	4b62      	ldr	r3, [pc, #392]	; (800968c <_dtoa_r+0x5b4>)
 8009504:	f7f6 fe6e 	bl	80001e4 <__adddf3>
 8009508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800950c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009510:	9611      	str	r6, [sp, #68]	; 0x44
 8009512:	2c00      	cmp	r4, #0
 8009514:	d15d      	bne.n	80095d2 <_dtoa_r+0x4fa>
 8009516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800951a:	2200      	movs	r2, #0
 800951c:	4b5c      	ldr	r3, [pc, #368]	; (8009690 <_dtoa_r+0x5b8>)
 800951e:	f7f6 fe5f 	bl	80001e0 <__aeabi_dsub>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800952a:	4633      	mov	r3, r6
 800952c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800952e:	f7f7 fa9f 	bl	8000a70 <__aeabi_dcmpgt>
 8009532:	2800      	cmp	r0, #0
 8009534:	f040 829c 	bne.w	8009a70 <_dtoa_r+0x998>
 8009538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800953c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800953e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009542:	f7f7 fa77 	bl	8000a34 <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 8290 	bne.w	8009a6c <_dtoa_r+0x994>
 800954c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009556:	2b00      	cmp	r3, #0
 8009558:	f2c0 8152 	blt.w	8009800 <_dtoa_r+0x728>
 800955c:	f1ba 0f0e 	cmp.w	sl, #14
 8009560:	f300 814e 	bgt.w	8009800 <_dtoa_r+0x728>
 8009564:	4b45      	ldr	r3, [pc, #276]	; (800967c <_dtoa_r+0x5a4>)
 8009566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800956a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800956e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009574:	2b00      	cmp	r3, #0
 8009576:	f280 80db 	bge.w	8009730 <_dtoa_r+0x658>
 800957a:	9b08      	ldr	r3, [sp, #32]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f300 80d7 	bgt.w	8009730 <_dtoa_r+0x658>
 8009582:	f040 8272 	bne.w	8009a6a <_dtoa_r+0x992>
 8009586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958a:	2200      	movs	r2, #0
 800958c:	4b40      	ldr	r3, [pc, #256]	; (8009690 <_dtoa_r+0x5b8>)
 800958e:	f7f6 ffdf 	bl	8000550 <__aeabi_dmul>
 8009592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009596:	f7f7 fa61 	bl	8000a5c <__aeabi_dcmpge>
 800959a:	9c08      	ldr	r4, [sp, #32]
 800959c:	4626      	mov	r6, r4
 800959e:	2800      	cmp	r0, #0
 80095a0:	f040 8248 	bne.w	8009a34 <_dtoa_r+0x95c>
 80095a4:	2331      	movs	r3, #49	; 0x31
 80095a6:	9f03      	ldr	r7, [sp, #12]
 80095a8:	f10a 0a01 	add.w	sl, sl, #1
 80095ac:	f807 3b01 	strb.w	r3, [r7], #1
 80095b0:	e244      	b.n	8009a3c <_dtoa_r+0x964>
 80095b2:	07e2      	lsls	r2, r4, #31
 80095b4:	d505      	bpl.n	80095c2 <_dtoa_r+0x4ea>
 80095b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095ba:	f7f6 ffc9 	bl	8000550 <__aeabi_dmul>
 80095be:	2301      	movs	r3, #1
 80095c0:	3701      	adds	r7, #1
 80095c2:	1064      	asrs	r4, r4, #1
 80095c4:	3608      	adds	r6, #8
 80095c6:	e76d      	b.n	80094a4 <_dtoa_r+0x3cc>
 80095c8:	2702      	movs	r7, #2
 80095ca:	e770      	b.n	80094ae <_dtoa_r+0x3d6>
 80095cc:	46d0      	mov	r8, sl
 80095ce:	9c08      	ldr	r4, [sp, #32]
 80095d0:	e78f      	b.n	80094f2 <_dtoa_r+0x41a>
 80095d2:	9903      	ldr	r1, [sp, #12]
 80095d4:	4b29      	ldr	r3, [pc, #164]	; (800967c <_dtoa_r+0x5a4>)
 80095d6:	4421      	add	r1, r4
 80095d8:	9112      	str	r1, [sp, #72]	; 0x48
 80095da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80095e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095e8:	2900      	cmp	r1, #0
 80095ea:	d055      	beq.n	8009698 <_dtoa_r+0x5c0>
 80095ec:	2000      	movs	r0, #0
 80095ee:	4929      	ldr	r1, [pc, #164]	; (8009694 <_dtoa_r+0x5bc>)
 80095f0:	f7f7 f8d8 	bl	80007a4 <__aeabi_ddiv>
 80095f4:	463b      	mov	r3, r7
 80095f6:	4632      	mov	r2, r6
 80095f8:	f7f6 fdf2 	bl	80001e0 <__aeabi_dsub>
 80095fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009600:	9f03      	ldr	r7, [sp, #12]
 8009602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009606:	f7f7 fa53 	bl	8000ab0 <__aeabi_d2iz>
 800960a:	4604      	mov	r4, r0
 800960c:	f7f6 ff36 	bl	800047c <__aeabi_i2d>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009618:	f7f6 fde2 	bl	80001e0 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	3430      	adds	r4, #48	; 0x30
 8009622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800962a:	f807 4b01 	strb.w	r4, [r7], #1
 800962e:	f7f7 fa01 	bl	8000a34 <__aeabi_dcmplt>
 8009632:	2800      	cmp	r0, #0
 8009634:	d174      	bne.n	8009720 <_dtoa_r+0x648>
 8009636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963a:	2000      	movs	r0, #0
 800963c:	4911      	ldr	r1, [pc, #68]	; (8009684 <_dtoa_r+0x5ac>)
 800963e:	f7f6 fdcf 	bl	80001e0 <__aeabi_dsub>
 8009642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009646:	f7f7 f9f5 	bl	8000a34 <__aeabi_dcmplt>
 800964a:	2800      	cmp	r0, #0
 800964c:	f040 80b7 	bne.w	80097be <_dtoa_r+0x6e6>
 8009650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009652:	429f      	cmp	r7, r3
 8009654:	f43f af7a 	beq.w	800954c <_dtoa_r+0x474>
 8009658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800965c:	2200      	movs	r2, #0
 800965e:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <_dtoa_r+0x5b0>)
 8009660:	f7f6 ff76 	bl	8000550 <__aeabi_dmul>
 8009664:	2200      	movs	r2, #0
 8009666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800966a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <_dtoa_r+0x5b0>)
 8009670:	f7f6 ff6e 	bl	8000550 <__aeabi_dmul>
 8009674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009678:	e7c3      	b.n	8009602 <_dtoa_r+0x52a>
 800967a:	bf00      	nop
 800967c:	0800bfb0 	.word	0x0800bfb0
 8009680:	0800bf88 	.word	0x0800bf88
 8009684:	3ff00000 	.word	0x3ff00000
 8009688:	40240000 	.word	0x40240000
 800968c:	401c0000 	.word	0x401c0000
 8009690:	40140000 	.word	0x40140000
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f6 ff58 	bl	8000550 <__aeabi_dmul>
 80096a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096a6:	9c03      	ldr	r4, [sp, #12]
 80096a8:	9314      	str	r3, [sp, #80]	; 0x50
 80096aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ae:	f7f7 f9ff 	bl	8000ab0 <__aeabi_d2iz>
 80096b2:	9015      	str	r0, [sp, #84]	; 0x54
 80096b4:	f7f6 fee2 	bl	800047c <__aeabi_i2d>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096c0:	f7f6 fd8e 	bl	80001e0 <__aeabi_dsub>
 80096c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096c6:	4606      	mov	r6, r0
 80096c8:	3330      	adds	r3, #48	; 0x30
 80096ca:	f804 3b01 	strb.w	r3, [r4], #1
 80096ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096d0:	460f      	mov	r7, r1
 80096d2:	429c      	cmp	r4, r3
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	d124      	bne.n	8009724 <_dtoa_r+0x64c>
 80096da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096de:	4bb0      	ldr	r3, [pc, #704]	; (80099a0 <_dtoa_r+0x8c8>)
 80096e0:	f7f6 fd80 	bl	80001e4 <__adddf3>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 f9c0 	bl	8000a70 <__aeabi_dcmpgt>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d163      	bne.n	80097bc <_dtoa_r+0x6e4>
 80096f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096f8:	2000      	movs	r0, #0
 80096fa:	49a9      	ldr	r1, [pc, #676]	; (80099a0 <_dtoa_r+0x8c8>)
 80096fc:	f7f6 fd70 	bl	80001e0 <__aeabi_dsub>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f7f7 f994 	bl	8000a34 <__aeabi_dcmplt>
 800970c:	2800      	cmp	r0, #0
 800970e:	f43f af1d 	beq.w	800954c <_dtoa_r+0x474>
 8009712:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009714:	1e7b      	subs	r3, r7, #1
 8009716:	9314      	str	r3, [sp, #80]	; 0x50
 8009718:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800971c:	2b30      	cmp	r3, #48	; 0x30
 800971e:	d0f8      	beq.n	8009712 <_dtoa_r+0x63a>
 8009720:	46c2      	mov	sl, r8
 8009722:	e03b      	b.n	800979c <_dtoa_r+0x6c4>
 8009724:	4b9f      	ldr	r3, [pc, #636]	; (80099a4 <_dtoa_r+0x8cc>)
 8009726:	f7f6 ff13 	bl	8000550 <__aeabi_dmul>
 800972a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972e:	e7bc      	b.n	80096aa <_dtoa_r+0x5d2>
 8009730:	9f03      	ldr	r7, [sp, #12]
 8009732:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	f7f7 f831 	bl	80007a4 <__aeabi_ddiv>
 8009742:	f7f7 f9b5 	bl	8000ab0 <__aeabi_d2iz>
 8009746:	4604      	mov	r4, r0
 8009748:	f7f6 fe98 	bl	800047c <__aeabi_i2d>
 800974c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009750:	f7f6 fefe 	bl	8000550 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f6 fd40 	bl	80001e0 <__aeabi_dsub>
 8009760:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009764:	f807 6b01 	strb.w	r6, [r7], #1
 8009768:	9e03      	ldr	r6, [sp, #12]
 800976a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800976e:	1bbe      	subs	r6, r7, r6
 8009770:	45b4      	cmp	ip, r6
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	d136      	bne.n	80097e6 <_dtoa_r+0x70e>
 8009778:	f7f6 fd34 	bl	80001e4 <__adddf3>
 800977c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009780:	4680      	mov	r8, r0
 8009782:	4689      	mov	r9, r1
 8009784:	f7f7 f974 	bl	8000a70 <__aeabi_dcmpgt>
 8009788:	bb58      	cbnz	r0, 80097e2 <_dtoa_r+0x70a>
 800978a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800978e:	4640      	mov	r0, r8
 8009790:	4649      	mov	r1, r9
 8009792:	f7f7 f945 	bl	8000a20 <__aeabi_dcmpeq>
 8009796:	b108      	cbz	r0, 800979c <_dtoa_r+0x6c4>
 8009798:	07e1      	lsls	r1, r4, #31
 800979a:	d422      	bmi.n	80097e2 <_dtoa_r+0x70a>
 800979c:	4628      	mov	r0, r5
 800979e:	4659      	mov	r1, fp
 80097a0:	f000 fe6c 	bl	800a47c <_Bfree>
 80097a4:	2300      	movs	r3, #0
 80097a6:	703b      	strb	r3, [r7, #0]
 80097a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80097aa:	f10a 0001 	add.w	r0, sl, #1
 80097ae:	6018      	str	r0, [r3, #0]
 80097b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f43f acde 	beq.w	8009174 <_dtoa_r+0x9c>
 80097b8:	601f      	str	r7, [r3, #0]
 80097ba:	e4db      	b.n	8009174 <_dtoa_r+0x9c>
 80097bc:	4627      	mov	r7, r4
 80097be:	463b      	mov	r3, r7
 80097c0:	461f      	mov	r7, r3
 80097c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097c6:	2a39      	cmp	r2, #57	; 0x39
 80097c8:	d107      	bne.n	80097da <_dtoa_r+0x702>
 80097ca:	9a03      	ldr	r2, [sp, #12]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1f7      	bne.n	80097c0 <_dtoa_r+0x6e8>
 80097d0:	2230      	movs	r2, #48	; 0x30
 80097d2:	9903      	ldr	r1, [sp, #12]
 80097d4:	f108 0801 	add.w	r8, r8, #1
 80097d8:	700a      	strb	r2, [r1, #0]
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	3201      	adds	r2, #1
 80097de:	701a      	strb	r2, [r3, #0]
 80097e0:	e79e      	b.n	8009720 <_dtoa_r+0x648>
 80097e2:	46d0      	mov	r8, sl
 80097e4:	e7eb      	b.n	80097be <_dtoa_r+0x6e6>
 80097e6:	2200      	movs	r2, #0
 80097e8:	4b6e      	ldr	r3, [pc, #440]	; (80099a4 <_dtoa_r+0x8cc>)
 80097ea:	f7f6 feb1 	bl	8000550 <__aeabi_dmul>
 80097ee:	2200      	movs	r2, #0
 80097f0:	2300      	movs	r3, #0
 80097f2:	4680      	mov	r8, r0
 80097f4:	4689      	mov	r9, r1
 80097f6:	f7f7 f913 	bl	8000a20 <__aeabi_dcmpeq>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d09b      	beq.n	8009736 <_dtoa_r+0x65e>
 80097fe:	e7cd      	b.n	800979c <_dtoa_r+0x6c4>
 8009800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009802:	2a00      	cmp	r2, #0
 8009804:	f000 80d0 	beq.w	80099a8 <_dtoa_r+0x8d0>
 8009808:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800980a:	2a01      	cmp	r2, #1
 800980c:	f300 80ae 	bgt.w	800996c <_dtoa_r+0x894>
 8009810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009812:	2a00      	cmp	r2, #0
 8009814:	f000 80a6 	beq.w	8009964 <_dtoa_r+0x88c>
 8009818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800981c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800981e:	9f06      	ldr	r7, [sp, #24]
 8009820:	9a06      	ldr	r2, [sp, #24]
 8009822:	2101      	movs	r1, #1
 8009824:	441a      	add	r2, r3
 8009826:	9206      	str	r2, [sp, #24]
 8009828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800982a:	4628      	mov	r0, r5
 800982c:	441a      	add	r2, r3
 800982e:	9209      	str	r2, [sp, #36]	; 0x24
 8009830:	f000 ff24 	bl	800a67c <__i2b>
 8009834:	4606      	mov	r6, r0
 8009836:	2f00      	cmp	r7, #0
 8009838:	dd0c      	ble.n	8009854 <_dtoa_r+0x77c>
 800983a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	dd09      	ble.n	8009854 <_dtoa_r+0x77c>
 8009840:	42bb      	cmp	r3, r7
 8009842:	bfa8      	it	ge
 8009844:	463b      	movge	r3, r7
 8009846:	9a06      	ldr	r2, [sp, #24]
 8009848:	1aff      	subs	r7, r7, r3
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	9206      	str	r2, [sp, #24]
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009856:	b1f3      	cbz	r3, 8009896 <_dtoa_r+0x7be>
 8009858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 80a8 	beq.w	80099b0 <_dtoa_r+0x8d8>
 8009860:	2c00      	cmp	r4, #0
 8009862:	dd10      	ble.n	8009886 <_dtoa_r+0x7ae>
 8009864:	4631      	mov	r1, r6
 8009866:	4622      	mov	r2, r4
 8009868:	4628      	mov	r0, r5
 800986a:	f000 ffc5 	bl	800a7f8 <__pow5mult>
 800986e:	465a      	mov	r2, fp
 8009870:	4601      	mov	r1, r0
 8009872:	4606      	mov	r6, r0
 8009874:	4628      	mov	r0, r5
 8009876:	f000 ff17 	bl	800a6a8 <__multiply>
 800987a:	4680      	mov	r8, r0
 800987c:	4659      	mov	r1, fp
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fdfc 	bl	800a47c <_Bfree>
 8009884:	46c3      	mov	fp, r8
 8009886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009888:	1b1a      	subs	r2, r3, r4
 800988a:	d004      	beq.n	8009896 <_dtoa_r+0x7be>
 800988c:	4659      	mov	r1, fp
 800988e:	4628      	mov	r0, r5
 8009890:	f000 ffb2 	bl	800a7f8 <__pow5mult>
 8009894:	4683      	mov	fp, r0
 8009896:	2101      	movs	r1, #1
 8009898:	4628      	mov	r0, r5
 800989a:	f000 feef 	bl	800a67c <__i2b>
 800989e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098a0:	4604      	mov	r4, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f340 8086 	ble.w	80099b4 <_dtoa_r+0x8dc>
 80098a8:	461a      	mov	r2, r3
 80098aa:	4601      	mov	r1, r0
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 ffa3 	bl	800a7f8 <__pow5mult>
 80098b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098b4:	4604      	mov	r4, r0
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	dd7f      	ble.n	80099ba <_dtoa_r+0x8e2>
 80098ba:	f04f 0800 	mov.w	r8, #0
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098c4:	6918      	ldr	r0, [r3, #16]
 80098c6:	f000 fe8b 	bl	800a5e0 <__hi0bits>
 80098ca:	f1c0 0020 	rsb	r0, r0, #32
 80098ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d0:	4418      	add	r0, r3
 80098d2:	f010 001f 	ands.w	r0, r0, #31
 80098d6:	f000 8092 	beq.w	80099fe <_dtoa_r+0x926>
 80098da:	f1c0 0320 	rsb	r3, r0, #32
 80098de:	2b04      	cmp	r3, #4
 80098e0:	f340 808a 	ble.w	80099f8 <_dtoa_r+0x920>
 80098e4:	f1c0 001c 	rsb	r0, r0, #28
 80098e8:	9b06      	ldr	r3, [sp, #24]
 80098ea:	4407      	add	r7, r0
 80098ec:	4403      	add	r3, r0
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	4403      	add	r3, r0
 80098f4:	9309      	str	r3, [sp, #36]	; 0x24
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	dd05      	ble.n	8009908 <_dtoa_r+0x830>
 80098fc:	4659      	mov	r1, fp
 80098fe:	461a      	mov	r2, r3
 8009900:	4628      	mov	r0, r5
 8009902:	f000 ffd3 	bl	800a8ac <__lshift>
 8009906:	4683      	mov	fp, r0
 8009908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x842>
 800990e:	4621      	mov	r1, r4
 8009910:	461a      	mov	r2, r3
 8009912:	4628      	mov	r0, r5
 8009914:	f000 ffca 	bl	800a8ac <__lshift>
 8009918:	4604      	mov	r4, r0
 800991a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d070      	beq.n	8009a02 <_dtoa_r+0x92a>
 8009920:	4621      	mov	r1, r4
 8009922:	4658      	mov	r0, fp
 8009924:	f001 f832 	bl	800a98c <__mcmp>
 8009928:	2800      	cmp	r0, #0
 800992a:	da6a      	bge.n	8009a02 <_dtoa_r+0x92a>
 800992c:	2300      	movs	r3, #0
 800992e:	4659      	mov	r1, fp
 8009930:	220a      	movs	r2, #10
 8009932:	4628      	mov	r0, r5
 8009934:	f000 fdc4 	bl	800a4c0 <__multadd>
 8009938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800993a:	4683      	mov	fp, r0
 800993c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8194 	beq.w	8009c6e <_dtoa_r+0xb96>
 8009946:	4631      	mov	r1, r6
 8009948:	2300      	movs	r3, #0
 800994a:	220a      	movs	r2, #10
 800994c:	4628      	mov	r0, r5
 800994e:	f000 fdb7 	bl	800a4c0 <__multadd>
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	4606      	mov	r6, r0
 8009958:	f300 8093 	bgt.w	8009a82 <_dtoa_r+0x9aa>
 800995c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800995e:	2b02      	cmp	r3, #2
 8009960:	dc57      	bgt.n	8009a12 <_dtoa_r+0x93a>
 8009962:	e08e      	b.n	8009a82 <_dtoa_r+0x9aa>
 8009964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800996a:	e757      	b.n	800981c <_dtoa_r+0x744>
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	1e5c      	subs	r4, r3, #1
 8009970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009972:	42a3      	cmp	r3, r4
 8009974:	bfb7      	itett	lt
 8009976:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009978:	1b1c      	subge	r4, r3, r4
 800997a:	1ae2      	sublt	r2, r4, r3
 800997c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800997e:	bfbe      	ittt	lt
 8009980:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009982:	189b      	addlt	r3, r3, r2
 8009984:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009986:	9b08      	ldr	r3, [sp, #32]
 8009988:	bfb8      	it	lt
 800998a:	2400      	movlt	r4, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfbb      	ittet	lt
 8009990:	9b06      	ldrlt	r3, [sp, #24]
 8009992:	9a08      	ldrlt	r2, [sp, #32]
 8009994:	9f06      	ldrge	r7, [sp, #24]
 8009996:	1a9f      	sublt	r7, r3, r2
 8009998:	bfac      	ite	ge
 800999a:	9b08      	ldrge	r3, [sp, #32]
 800999c:	2300      	movlt	r3, #0
 800999e:	e73f      	b.n	8009820 <_dtoa_r+0x748>
 80099a0:	3fe00000 	.word	0x3fe00000
 80099a4:	40240000 	.word	0x40240000
 80099a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80099aa:	9f06      	ldr	r7, [sp, #24]
 80099ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80099ae:	e742      	b.n	8009836 <_dtoa_r+0x75e>
 80099b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099b2:	e76b      	b.n	800988c <_dtoa_r+0x7b4>
 80099b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	dc19      	bgt.n	80099ee <_dtoa_r+0x916>
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	b9bb      	cbnz	r3, 80099ee <_dtoa_r+0x916>
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c4:	b99b      	cbnz	r3, 80099ee <_dtoa_r+0x916>
 80099c6:	9b05      	ldr	r3, [sp, #20]
 80099c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099cc:	0d1b      	lsrs	r3, r3, #20
 80099ce:	051b      	lsls	r3, r3, #20
 80099d0:	b183      	cbz	r3, 80099f4 <_dtoa_r+0x91c>
 80099d2:	f04f 0801 	mov.w	r8, #1
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	3301      	adds	r3, #1
 80099da:	9306      	str	r3, [sp, #24]
 80099dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099de:	3301      	adds	r3, #1
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f47f af6a 	bne.w	80098be <_dtoa_r+0x7e6>
 80099ea:	2001      	movs	r0, #1
 80099ec:	e76f      	b.n	80098ce <_dtoa_r+0x7f6>
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	e7f6      	b.n	80099e2 <_dtoa_r+0x90a>
 80099f4:	4698      	mov	r8, r3
 80099f6:	e7f4      	b.n	80099e2 <_dtoa_r+0x90a>
 80099f8:	f43f af7d 	beq.w	80098f6 <_dtoa_r+0x81e>
 80099fc:	4618      	mov	r0, r3
 80099fe:	301c      	adds	r0, #28
 8009a00:	e772      	b.n	80098e8 <_dtoa_r+0x810>
 8009a02:	9b08      	ldr	r3, [sp, #32]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dc36      	bgt.n	8009a76 <_dtoa_r+0x99e>
 8009a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	dd33      	ble.n	8009a76 <_dtoa_r+0x99e>
 8009a0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	d10d      	bne.n	8009a34 <_dtoa_r+0x95c>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	2205      	movs	r2, #5
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 fd4e 	bl	800a4c0 <__multadd>
 8009a24:	4601      	mov	r1, r0
 8009a26:	4604      	mov	r4, r0
 8009a28:	4658      	mov	r0, fp
 8009a2a:	f000 ffaf 	bl	800a98c <__mcmp>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f73f adb8 	bgt.w	80095a4 <_dtoa_r+0x4cc>
 8009a34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a36:	9f03      	ldr	r7, [sp, #12]
 8009a38:	ea6f 0a03 	mvn.w	sl, r3
 8009a3c:	f04f 0800 	mov.w	r8, #0
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 fd1a 	bl	800a47c <_Bfree>
 8009a48:	2e00      	cmp	r6, #0
 8009a4a:	f43f aea7 	beq.w	800979c <_dtoa_r+0x6c4>
 8009a4e:	f1b8 0f00 	cmp.w	r8, #0
 8009a52:	d005      	beq.n	8009a60 <_dtoa_r+0x988>
 8009a54:	45b0      	cmp	r8, r6
 8009a56:	d003      	beq.n	8009a60 <_dtoa_r+0x988>
 8009a58:	4641      	mov	r1, r8
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 fd0e 	bl	800a47c <_Bfree>
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 fd0a 	bl	800a47c <_Bfree>
 8009a68:	e698      	b.n	800979c <_dtoa_r+0x6c4>
 8009a6a:	2400      	movs	r4, #0
 8009a6c:	4626      	mov	r6, r4
 8009a6e:	e7e1      	b.n	8009a34 <_dtoa_r+0x95c>
 8009a70:	46c2      	mov	sl, r8
 8009a72:	4626      	mov	r6, r4
 8009a74:	e596      	b.n	80095a4 <_dtoa_r+0x4cc>
 8009a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80fd 	beq.w	8009c7c <_dtoa_r+0xba4>
 8009a82:	2f00      	cmp	r7, #0
 8009a84:	dd05      	ble.n	8009a92 <_dtoa_r+0x9ba>
 8009a86:	4631      	mov	r1, r6
 8009a88:	463a      	mov	r2, r7
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 ff0e 	bl	800a8ac <__lshift>
 8009a90:	4606      	mov	r6, r0
 8009a92:	f1b8 0f00 	cmp.w	r8, #0
 8009a96:	d05c      	beq.n	8009b52 <_dtoa_r+0xa7a>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	6871      	ldr	r1, [r6, #4]
 8009a9c:	f000 fcae 	bl	800a3fc <_Balloc>
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	b928      	cbnz	r0, 8009ab0 <_dtoa_r+0x9d8>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aaa:	4b7f      	ldr	r3, [pc, #508]	; (8009ca8 <_dtoa_r+0xbd0>)
 8009aac:	f7ff bb28 	b.w	8009100 <_dtoa_r+0x28>
 8009ab0:	6932      	ldr	r2, [r6, #16]
 8009ab2:	f106 010c 	add.w	r1, r6, #12
 8009ab6:	3202      	adds	r2, #2
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	300c      	adds	r0, #12
 8009abc:	f000 fc84 	bl	800a3c8 <memcpy>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f000 fef1 	bl	800a8ac <__lshift>
 8009aca:	46b0      	mov	r8, r6
 8009acc:	4606      	mov	r6, r0
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9308      	str	r3, [sp, #32]
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	444b      	add	r3, r9
 8009ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	4658      	mov	r0, fp
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	f7ff fa66 	bl	8008fbc <quorem>
 8009af0:	4603      	mov	r3, r0
 8009af2:	4641      	mov	r1, r8
 8009af4:	3330      	adds	r3, #48	; 0x30
 8009af6:	9006      	str	r0, [sp, #24]
 8009af8:	4658      	mov	r0, fp
 8009afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009afc:	f000 ff46 	bl	800a98c <__mcmp>
 8009b00:	4632      	mov	r2, r6
 8009b02:	4681      	mov	r9, r0
 8009b04:	4621      	mov	r1, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 ff5c 	bl	800a9c4 <__mdiff>
 8009b0c:	68c2      	ldr	r2, [r0, #12]
 8009b0e:	4607      	mov	r7, r0
 8009b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b12:	bb02      	cbnz	r2, 8009b56 <_dtoa_r+0xa7e>
 8009b14:	4601      	mov	r1, r0
 8009b16:	4658      	mov	r0, fp
 8009b18:	f000 ff38 	bl	800a98c <__mcmp>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b20:	4639      	mov	r1, r7
 8009b22:	4628      	mov	r0, r5
 8009b24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009b28:	f000 fca8 	bl	800a47c <_Bfree>
 8009b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b30:	9f08      	ldr	r7, [sp, #32]
 8009b32:	ea43 0102 	orr.w	r1, r3, r2
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b3c:	d10d      	bne.n	8009b5a <_dtoa_r+0xa82>
 8009b3e:	2b39      	cmp	r3, #57	; 0x39
 8009b40:	d029      	beq.n	8009b96 <_dtoa_r+0xabe>
 8009b42:	f1b9 0f00 	cmp.w	r9, #0
 8009b46:	dd01      	ble.n	8009b4c <_dtoa_r+0xa74>
 8009b48:	9b06      	ldr	r3, [sp, #24]
 8009b4a:	3331      	adds	r3, #49	; 0x31
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	7013      	strb	r3, [r2, #0]
 8009b50:	e776      	b.n	8009a40 <_dtoa_r+0x968>
 8009b52:	4630      	mov	r0, r6
 8009b54:	e7b9      	b.n	8009aca <_dtoa_r+0x9f2>
 8009b56:	2201      	movs	r2, #1
 8009b58:	e7e2      	b.n	8009b20 <_dtoa_r+0xa48>
 8009b5a:	f1b9 0f00 	cmp.w	r9, #0
 8009b5e:	db06      	blt.n	8009b6e <_dtoa_r+0xa96>
 8009b60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009b62:	ea41 0909 	orr.w	r9, r1, r9
 8009b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b68:	ea59 0101 	orrs.w	r1, r9, r1
 8009b6c:	d120      	bne.n	8009bb0 <_dtoa_r+0xad8>
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	ddec      	ble.n	8009b4c <_dtoa_r+0xa74>
 8009b72:	4659      	mov	r1, fp
 8009b74:	2201      	movs	r2, #1
 8009b76:	4628      	mov	r0, r5
 8009b78:	9308      	str	r3, [sp, #32]
 8009b7a:	f000 fe97 	bl	800a8ac <__lshift>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4683      	mov	fp, r0
 8009b82:	f000 ff03 	bl	800a98c <__mcmp>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	9b08      	ldr	r3, [sp, #32]
 8009b8a:	dc02      	bgt.n	8009b92 <_dtoa_r+0xaba>
 8009b8c:	d1de      	bne.n	8009b4c <_dtoa_r+0xa74>
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d5dc      	bpl.n	8009b4c <_dtoa_r+0xa74>
 8009b92:	2b39      	cmp	r3, #57	; 0x39
 8009b94:	d1d8      	bne.n	8009b48 <_dtoa_r+0xa70>
 8009b96:	2339      	movs	r3, #57	; 0x39
 8009b98:	9a04      	ldr	r2, [sp, #16]
 8009b9a:	7013      	strb	r3, [r2, #0]
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2a39      	cmp	r2, #57	; 0x39
 8009ba8:	d050      	beq.n	8009c4c <_dtoa_r+0xb74>
 8009baa:	3201      	adds	r2, #1
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	e747      	b.n	8009a40 <_dtoa_r+0x968>
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	dd03      	ble.n	8009bbc <_dtoa_r+0xae4>
 8009bb4:	2b39      	cmp	r3, #57	; 0x39
 8009bb6:	d0ee      	beq.n	8009b96 <_dtoa_r+0xabe>
 8009bb8:	3301      	adds	r3, #1
 8009bba:	e7c7      	b.n	8009b4c <_dtoa_r+0xa74>
 8009bbc:	9a08      	ldr	r2, [sp, #32]
 8009bbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009bc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc4:	428a      	cmp	r2, r1
 8009bc6:	d02a      	beq.n	8009c1e <_dtoa_r+0xb46>
 8009bc8:	4659      	mov	r1, fp
 8009bca:	2300      	movs	r3, #0
 8009bcc:	220a      	movs	r2, #10
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 fc76 	bl	800a4c0 <__multadd>
 8009bd4:	45b0      	cmp	r8, r6
 8009bd6:	4683      	mov	fp, r0
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	f04f 020a 	mov.w	r2, #10
 8009be0:	4641      	mov	r1, r8
 8009be2:	4628      	mov	r0, r5
 8009be4:	d107      	bne.n	8009bf6 <_dtoa_r+0xb1e>
 8009be6:	f000 fc6b 	bl	800a4c0 <__multadd>
 8009bea:	4680      	mov	r8, r0
 8009bec:	4606      	mov	r6, r0
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	e775      	b.n	8009ae2 <_dtoa_r+0xa0a>
 8009bf6:	f000 fc63 	bl	800a4c0 <__multadd>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	220a      	movs	r2, #10
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 fc5c 	bl	800a4c0 <__multadd>
 8009c08:	4606      	mov	r6, r0
 8009c0a:	e7f0      	b.n	8009bee <_dtoa_r+0xb16>
 8009c0c:	f1b9 0f00 	cmp.w	r9, #0
 8009c10:	bfcc      	ite	gt
 8009c12:	464f      	movgt	r7, r9
 8009c14:	2701      	movle	r7, #1
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	9a03      	ldr	r2, [sp, #12]
 8009c1c:	4417      	add	r7, r2
 8009c1e:	4659      	mov	r1, fp
 8009c20:	2201      	movs	r2, #1
 8009c22:	4628      	mov	r0, r5
 8009c24:	9308      	str	r3, [sp, #32]
 8009c26:	f000 fe41 	bl	800a8ac <__lshift>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4683      	mov	fp, r0
 8009c2e:	f000 fead 	bl	800a98c <__mcmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	dcb2      	bgt.n	8009b9c <_dtoa_r+0xac4>
 8009c36:	d102      	bne.n	8009c3e <_dtoa_r+0xb66>
 8009c38:	9b08      	ldr	r3, [sp, #32]
 8009c3a:	07db      	lsls	r3, r3, #31
 8009c3c:	d4ae      	bmi.n	8009b9c <_dtoa_r+0xac4>
 8009c3e:	463b      	mov	r3, r7
 8009c40:	461f      	mov	r7, r3
 8009c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c46:	2a30      	cmp	r2, #48	; 0x30
 8009c48:	d0fa      	beq.n	8009c40 <_dtoa_r+0xb68>
 8009c4a:	e6f9      	b.n	8009a40 <_dtoa_r+0x968>
 8009c4c:	9a03      	ldr	r2, [sp, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d1a5      	bne.n	8009b9e <_dtoa_r+0xac6>
 8009c52:	2331      	movs	r3, #49	; 0x31
 8009c54:	f10a 0a01 	add.w	sl, sl, #1
 8009c58:	e779      	b.n	8009b4e <_dtoa_r+0xa76>
 8009c5a:	4b14      	ldr	r3, [pc, #80]	; (8009cac <_dtoa_r+0xbd4>)
 8009c5c:	f7ff baa8 	b.w	80091b0 <_dtoa_r+0xd8>
 8009c60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f47f aa81 	bne.w	800916a <_dtoa_r+0x92>
 8009c68:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <_dtoa_r+0xbd8>)
 8009c6a:	f7ff baa1 	b.w	80091b0 <_dtoa_r+0xd8>
 8009c6e:	f1b9 0f00 	cmp.w	r9, #0
 8009c72:	dc03      	bgt.n	8009c7c <_dtoa_r+0xba4>
 8009c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	f73f aecb 	bgt.w	8009a12 <_dtoa_r+0x93a>
 8009c7c:	9f03      	ldr	r7, [sp, #12]
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4658      	mov	r0, fp
 8009c82:	f7ff f99b 	bl	8008fbc <quorem>
 8009c86:	9a03      	ldr	r2, [sp, #12]
 8009c88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c8c:	f807 3b01 	strb.w	r3, [r7], #1
 8009c90:	1aba      	subs	r2, r7, r2
 8009c92:	4591      	cmp	r9, r2
 8009c94:	ddba      	ble.n	8009c0c <_dtoa_r+0xb34>
 8009c96:	4659      	mov	r1, fp
 8009c98:	2300      	movs	r3, #0
 8009c9a:	220a      	movs	r2, #10
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 fc0f 	bl	800a4c0 <__multadd>
 8009ca2:	4683      	mov	fp, r0
 8009ca4:	e7eb      	b.n	8009c7e <_dtoa_r+0xba6>
 8009ca6:	bf00      	nop
 8009ca8:	0800bea0 	.word	0x0800bea0
 8009cac:	0800bca0 	.word	0x0800bca0
 8009cb0:	0800be21 	.word	0x0800be21

08009cb4 <rshift>:
 8009cb4:	6903      	ldr	r3, [r0, #16]
 8009cb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cbe:	f100 0414 	add.w	r4, r0, #20
 8009cc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cc6:	dd46      	ble.n	8009d56 <rshift+0xa2>
 8009cc8:	f011 011f 	ands.w	r1, r1, #31
 8009ccc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd4:	d10c      	bne.n	8009cf0 <rshift+0x3c>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f100 0710 	add.w	r7, r0, #16
 8009cdc:	42b1      	cmp	r1, r6
 8009cde:	d335      	bcc.n	8009d4c <rshift+0x98>
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	1eea      	subs	r2, r5, #3
 8009ce6:	4296      	cmp	r6, r2
 8009ce8:	bf38      	it	cc
 8009cea:	2300      	movcc	r3, #0
 8009cec:	4423      	add	r3, r4
 8009cee:	e015      	b.n	8009d1c <rshift+0x68>
 8009cf0:	46a1      	mov	r9, r4
 8009cf2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf6:	f1c1 0820 	rsb	r8, r1, #32
 8009cfa:	40cf      	lsrs	r7, r1
 8009cfc:	f105 0e04 	add.w	lr, r5, #4
 8009d00:	4576      	cmp	r6, lr
 8009d02:	46f4      	mov	ip, lr
 8009d04:	d816      	bhi.n	8009d34 <rshift+0x80>
 8009d06:	1a9a      	subs	r2, r3, r2
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	3a04      	subs	r2, #4
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	bf38      	it	cc
 8009d12:	2200      	movcc	r2, #0
 8009d14:	18a3      	adds	r3, r4, r2
 8009d16:	50a7      	str	r7, [r4, r2]
 8009d18:	b107      	cbz	r7, 8009d1c <rshift+0x68>
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	eba3 0204 	sub.w	r2, r3, r4
 8009d22:	bf08      	it	eq
 8009d24:	2300      	moveq	r3, #0
 8009d26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d2a:	6102      	str	r2, [r0, #16]
 8009d2c:	bf08      	it	eq
 8009d2e:	6143      	streq	r3, [r0, #20]
 8009d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d34:	f8dc c000 	ldr.w	ip, [ip]
 8009d38:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d3c:	ea4c 0707 	orr.w	r7, ip, r7
 8009d40:	f849 7b04 	str.w	r7, [r9], #4
 8009d44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d48:	40cf      	lsrs	r7, r1
 8009d4a:	e7d9      	b.n	8009d00 <rshift+0x4c>
 8009d4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d50:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d54:	e7c2      	b.n	8009cdc <rshift+0x28>
 8009d56:	4623      	mov	r3, r4
 8009d58:	e7e0      	b.n	8009d1c <rshift+0x68>

08009d5a <__hexdig_fun>:
 8009d5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d802      	bhi.n	8009d68 <__hexdig_fun+0xe>
 8009d62:	3820      	subs	r0, #32
 8009d64:	b2c0      	uxtb	r0, r0
 8009d66:	4770      	bx	lr
 8009d68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d801      	bhi.n	8009d74 <__hexdig_fun+0x1a>
 8009d70:	3847      	subs	r0, #71	; 0x47
 8009d72:	e7f7      	b.n	8009d64 <__hexdig_fun+0xa>
 8009d74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d78:	2b05      	cmp	r3, #5
 8009d7a:	d801      	bhi.n	8009d80 <__hexdig_fun+0x26>
 8009d7c:	3827      	subs	r0, #39	; 0x27
 8009d7e:	e7f1      	b.n	8009d64 <__hexdig_fun+0xa>
 8009d80:	2000      	movs	r0, #0
 8009d82:	4770      	bx	lr

08009d84 <__gethex>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	b08b      	sub	sp, #44	; 0x2c
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	4bb2      	ldr	r3, [pc, #712]	; (800a058 <__gethex+0x2d4>)
 8009d8e:	9002      	str	r0, [sp, #8]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	468b      	mov	fp, r1
 8009d94:	4618      	mov	r0, r3
 8009d96:	4690      	mov	r8, r2
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	f7f6 fa15 	bl	80001c8 <strlen>
 8009d9e:	4682      	mov	sl, r0
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	f8db 2000 	ldr.w	r2, [fp]
 8009da6:	4403      	add	r3, r0
 8009da8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009dac:	9306      	str	r3, [sp, #24]
 8009dae:	1c93      	adds	r3, r2, #2
 8009db0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009db4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009db8:	32fe      	adds	r2, #254	; 0xfe
 8009dba:	18d1      	adds	r1, r2, r3
 8009dbc:	461f      	mov	r7, r3
 8009dbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dc2:	9101      	str	r1, [sp, #4]
 8009dc4:	2830      	cmp	r0, #48	; 0x30
 8009dc6:	d0f8      	beq.n	8009dba <__gethex+0x36>
 8009dc8:	f7ff ffc7 	bl	8009d5a <__hexdig_fun>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d13a      	bne.n	8009e48 <__gethex+0xc4>
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	9903      	ldr	r1, [sp, #12]
 8009dd8:	f001 f93e 	bl	800b058 <strncmp>
 8009ddc:	4605      	mov	r5, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d166      	bne.n	8009eb0 <__gethex+0x12c>
 8009de2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009de6:	eb07 060a 	add.w	r6, r7, sl
 8009dea:	f7ff ffb6 	bl	8009d5a <__hexdig_fun>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d060      	beq.n	8009eb4 <__gethex+0x130>
 8009df2:	4633      	mov	r3, r6
 8009df4:	7818      	ldrb	r0, [r3, #0]
 8009df6:	461f      	mov	r7, r3
 8009df8:	2830      	cmp	r0, #48	; 0x30
 8009dfa:	f103 0301 	add.w	r3, r3, #1
 8009dfe:	d0f9      	beq.n	8009df4 <__gethex+0x70>
 8009e00:	f7ff ffab 	bl	8009d5a <__hexdig_fun>
 8009e04:	2301      	movs	r3, #1
 8009e06:	fab0 f480 	clz	r4, r0
 8009e0a:	4635      	mov	r5, r6
 8009e0c:	0964      	lsrs	r4, r4, #5
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	463a      	mov	r2, r7
 8009e12:	4616      	mov	r6, r2
 8009e14:	7830      	ldrb	r0, [r6, #0]
 8009e16:	3201      	adds	r2, #1
 8009e18:	f7ff ff9f 	bl	8009d5a <__hexdig_fun>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d1f8      	bne.n	8009e12 <__gethex+0x8e>
 8009e20:	4652      	mov	r2, sl
 8009e22:	4630      	mov	r0, r6
 8009e24:	9903      	ldr	r1, [sp, #12]
 8009e26:	f001 f917 	bl	800b058 <strncmp>
 8009e2a:	b980      	cbnz	r0, 8009e4e <__gethex+0xca>
 8009e2c:	b94d      	cbnz	r5, 8009e42 <__gethex+0xbe>
 8009e2e:	eb06 050a 	add.w	r5, r6, sl
 8009e32:	462a      	mov	r2, r5
 8009e34:	4616      	mov	r6, r2
 8009e36:	7830      	ldrb	r0, [r6, #0]
 8009e38:	3201      	adds	r2, #1
 8009e3a:	f7ff ff8e 	bl	8009d5a <__hexdig_fun>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d1f8      	bne.n	8009e34 <__gethex+0xb0>
 8009e42:	1bad      	subs	r5, r5, r6
 8009e44:	00ad      	lsls	r5, r5, #2
 8009e46:	e004      	b.n	8009e52 <__gethex+0xce>
 8009e48:	2400      	movs	r4, #0
 8009e4a:	4625      	mov	r5, r4
 8009e4c:	e7e0      	b.n	8009e10 <__gethex+0x8c>
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	d1f7      	bne.n	8009e42 <__gethex+0xbe>
 8009e52:	7833      	ldrb	r3, [r6, #0]
 8009e54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e58:	2b50      	cmp	r3, #80	; 0x50
 8009e5a:	d139      	bne.n	8009ed0 <__gethex+0x14c>
 8009e5c:	7873      	ldrb	r3, [r6, #1]
 8009e5e:	2b2b      	cmp	r3, #43	; 0x2b
 8009e60:	d02a      	beq.n	8009eb8 <__gethex+0x134>
 8009e62:	2b2d      	cmp	r3, #45	; 0x2d
 8009e64:	d02c      	beq.n	8009ec0 <__gethex+0x13c>
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	1c71      	adds	r1, r6, #1
 8009e6c:	7808      	ldrb	r0, [r1, #0]
 8009e6e:	f7ff ff74 	bl	8009d5a <__hexdig_fun>
 8009e72:	1e43      	subs	r3, r0, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b18      	cmp	r3, #24
 8009e78:	d82a      	bhi.n	8009ed0 <__gethex+0x14c>
 8009e7a:	f1a0 0210 	sub.w	r2, r0, #16
 8009e7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e82:	f7ff ff6a 	bl	8009d5a <__hexdig_fun>
 8009e86:	1e43      	subs	r3, r0, #1
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b18      	cmp	r3, #24
 8009e8c:	d91b      	bls.n	8009ec6 <__gethex+0x142>
 8009e8e:	f1b9 0f00 	cmp.w	r9, #0
 8009e92:	d000      	beq.n	8009e96 <__gethex+0x112>
 8009e94:	4252      	negs	r2, r2
 8009e96:	4415      	add	r5, r2
 8009e98:	f8cb 1000 	str.w	r1, [fp]
 8009e9c:	b1d4      	cbz	r4, 8009ed4 <__gethex+0x150>
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bf14      	ite	ne
 8009ea4:	2700      	movne	r7, #0
 8009ea6:	2706      	moveq	r7, #6
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	b00b      	add	sp, #44	; 0x2c
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	463e      	mov	r6, r7
 8009eb2:	4625      	mov	r5, r4
 8009eb4:	2401      	movs	r4, #1
 8009eb6:	e7cc      	b.n	8009e52 <__gethex+0xce>
 8009eb8:	f04f 0900 	mov.w	r9, #0
 8009ebc:	1cb1      	adds	r1, r6, #2
 8009ebe:	e7d5      	b.n	8009e6c <__gethex+0xe8>
 8009ec0:	f04f 0901 	mov.w	r9, #1
 8009ec4:	e7fa      	b.n	8009ebc <__gethex+0x138>
 8009ec6:	230a      	movs	r3, #10
 8009ec8:	fb03 0202 	mla	r2, r3, r2, r0
 8009ecc:	3a10      	subs	r2, #16
 8009ece:	e7d6      	b.n	8009e7e <__gethex+0xfa>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	e7e1      	b.n	8009e98 <__gethex+0x114>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	1bf3      	subs	r3, r6, r7
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	2b07      	cmp	r3, #7
 8009edc:	dc0a      	bgt.n	8009ef4 <__gethex+0x170>
 8009ede:	9802      	ldr	r0, [sp, #8]
 8009ee0:	f000 fa8c 	bl	800a3fc <_Balloc>
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	b940      	cbnz	r0, 8009efa <__gethex+0x176>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	21de      	movs	r1, #222	; 0xde
 8009eec:	4b5b      	ldr	r3, [pc, #364]	; (800a05c <__gethex+0x2d8>)
 8009eee:	485c      	ldr	r0, [pc, #368]	; (800a060 <__gethex+0x2dc>)
 8009ef0:	f001 f8d4 	bl	800b09c <__assert_func>
 8009ef4:	3101      	adds	r1, #1
 8009ef6:	105b      	asrs	r3, r3, #1
 8009ef8:	e7ef      	b.n	8009eda <__gethex+0x156>
 8009efa:	f04f 0b00 	mov.w	fp, #0
 8009efe:	f100 0914 	add.w	r9, r0, #20
 8009f02:	f1ca 0301 	rsb	r3, sl, #1
 8009f06:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f0a:	f8cd b004 	str.w	fp, [sp, #4]
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	42b7      	cmp	r7, r6
 8009f12:	d33f      	bcc.n	8009f94 <__gethex+0x210>
 8009f14:	9f04      	ldr	r7, [sp, #16]
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	f847 3b04 	str.w	r3, [r7], #4
 8009f1c:	eba7 0709 	sub.w	r7, r7, r9
 8009f20:	10bf      	asrs	r7, r7, #2
 8009f22:	6127      	str	r7, [r4, #16]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fb5b 	bl	800a5e0 <__hi0bits>
 8009f2a:	017f      	lsls	r7, r7, #5
 8009f2c:	f8d8 6000 	ldr.w	r6, [r8]
 8009f30:	1a3f      	subs	r7, r7, r0
 8009f32:	42b7      	cmp	r7, r6
 8009f34:	dd62      	ble.n	8009ffc <__gethex+0x278>
 8009f36:	1bbf      	subs	r7, r7, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fef5 	bl	800ad2a <__any_on>
 8009f40:	4682      	mov	sl, r0
 8009f42:	b1a8      	cbz	r0, 8009f70 <__gethex+0x1ec>
 8009f44:	f04f 0a01 	mov.w	sl, #1
 8009f48:	1e7b      	subs	r3, r7, #1
 8009f4a:	1159      	asrs	r1, r3, #5
 8009f4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f50:	f003 021f 	and.w	r2, r3, #31
 8009f54:	fa0a f202 	lsl.w	r2, sl, r2
 8009f58:	420a      	tst	r2, r1
 8009f5a:	d009      	beq.n	8009f70 <__gethex+0x1ec>
 8009f5c:	4553      	cmp	r3, sl
 8009f5e:	dd05      	ble.n	8009f6c <__gethex+0x1e8>
 8009f60:	4620      	mov	r0, r4
 8009f62:	1eb9      	subs	r1, r7, #2
 8009f64:	f000 fee1 	bl	800ad2a <__any_on>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d144      	bne.n	8009ff6 <__gethex+0x272>
 8009f6c:	f04f 0a02 	mov.w	sl, #2
 8009f70:	4639      	mov	r1, r7
 8009f72:	4620      	mov	r0, r4
 8009f74:	f7ff fe9e 	bl	8009cb4 <rshift>
 8009f78:	443d      	add	r5, r7
 8009f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f7e:	42ab      	cmp	r3, r5
 8009f80:	da4a      	bge.n	800a018 <__gethex+0x294>
 8009f82:	4621      	mov	r1, r4
 8009f84:	9802      	ldr	r0, [sp, #8]
 8009f86:	f000 fa79 	bl	800a47c <_Bfree>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f8e:	27a3      	movs	r7, #163	; 0xa3
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	e789      	b.n	8009ea8 <__gethex+0x124>
 8009f94:	1e73      	subs	r3, r6, #1
 8009f96:	9a06      	ldr	r2, [sp, #24]
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d019      	beq.n	8009fd6 <__gethex+0x252>
 8009fa2:	f1bb 0f20 	cmp.w	fp, #32
 8009fa6:	d107      	bne.n	8009fb8 <__gethex+0x234>
 8009fa8:	9b04      	ldr	r3, [sp, #16]
 8009faa:	9a01      	ldr	r2, [sp, #4]
 8009fac:	f843 2b04 	str.w	r2, [r3], #4
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fbc:	f7ff fecd 	bl	8009d5a <__hexdig_fun>
 8009fc0:	9b01      	ldr	r3, [sp, #4]
 8009fc2:	f000 000f 	and.w	r0, r0, #15
 8009fc6:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fca:	4303      	orrs	r3, r0
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	f10b 0b04 	add.w	fp, fp, #4
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	e00d      	b.n	8009ff2 <__gethex+0x26e>
 8009fd6:	9a08      	ldr	r2, [sp, #32]
 8009fd8:	1e73      	subs	r3, r6, #1
 8009fda:	4413      	add	r3, r2
 8009fdc:	42bb      	cmp	r3, r7
 8009fde:	d3e0      	bcc.n	8009fa2 <__gethex+0x21e>
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	4652      	mov	r2, sl
 8009fe4:	9903      	ldr	r1, [sp, #12]
 8009fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe8:	f001 f836 	bl	800b058 <strncmp>
 8009fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d1d7      	bne.n	8009fa2 <__gethex+0x21e>
 8009ff2:	461e      	mov	r6, r3
 8009ff4:	e78c      	b.n	8009f10 <__gethex+0x18c>
 8009ff6:	f04f 0a03 	mov.w	sl, #3
 8009ffa:	e7b9      	b.n	8009f70 <__gethex+0x1ec>
 8009ffc:	da09      	bge.n	800a012 <__gethex+0x28e>
 8009ffe:	1bf7      	subs	r7, r6, r7
 800a000:	4621      	mov	r1, r4
 800a002:	463a      	mov	r2, r7
 800a004:	9802      	ldr	r0, [sp, #8]
 800a006:	f000 fc51 	bl	800a8ac <__lshift>
 800a00a:	4604      	mov	r4, r0
 800a00c:	1bed      	subs	r5, r5, r7
 800a00e:	f100 0914 	add.w	r9, r0, #20
 800a012:	f04f 0a00 	mov.w	sl, #0
 800a016:	e7b0      	b.n	8009f7a <__gethex+0x1f6>
 800a018:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a01c:	42a8      	cmp	r0, r5
 800a01e:	dd72      	ble.n	800a106 <__gethex+0x382>
 800a020:	1b45      	subs	r5, r0, r5
 800a022:	42ae      	cmp	r6, r5
 800a024:	dc35      	bgt.n	800a092 <__gethex+0x30e>
 800a026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d029      	beq.n	800a082 <__gethex+0x2fe>
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d02b      	beq.n	800a08a <__gethex+0x306>
 800a032:	2b01      	cmp	r3, #1
 800a034:	d11c      	bne.n	800a070 <__gethex+0x2ec>
 800a036:	42ae      	cmp	r6, r5
 800a038:	d11a      	bne.n	800a070 <__gethex+0x2ec>
 800a03a:	2e01      	cmp	r6, #1
 800a03c:	d112      	bne.n	800a064 <__gethex+0x2e0>
 800a03e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a042:	9a05      	ldr	r2, [sp, #20]
 800a044:	2762      	movs	r7, #98	; 0x62
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	2301      	movs	r3, #1
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	f8c9 3000 	str.w	r3, [r9]
 800a050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a052:	601c      	str	r4, [r3, #0]
 800a054:	e728      	b.n	8009ea8 <__gethex+0x124>
 800a056:	bf00      	nop
 800a058:	0800bf18 	.word	0x0800bf18
 800a05c:	0800bea0 	.word	0x0800bea0
 800a060:	0800beb1 	.word	0x0800beb1
 800a064:	4620      	mov	r0, r4
 800a066:	1e71      	subs	r1, r6, #1
 800a068:	f000 fe5f 	bl	800ad2a <__any_on>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d1e6      	bne.n	800a03e <__gethex+0x2ba>
 800a070:	4621      	mov	r1, r4
 800a072:	9802      	ldr	r0, [sp, #8]
 800a074:	f000 fa02 	bl	800a47c <_Bfree>
 800a078:	2300      	movs	r3, #0
 800a07a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a07c:	2750      	movs	r7, #80	; 0x50
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e712      	b.n	8009ea8 <__gethex+0x124>
 800a082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1f3      	bne.n	800a070 <__gethex+0x2ec>
 800a088:	e7d9      	b.n	800a03e <__gethex+0x2ba>
 800a08a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1d6      	bne.n	800a03e <__gethex+0x2ba>
 800a090:	e7ee      	b.n	800a070 <__gethex+0x2ec>
 800a092:	1e6f      	subs	r7, r5, #1
 800a094:	f1ba 0f00 	cmp.w	sl, #0
 800a098:	d132      	bne.n	800a100 <__gethex+0x37c>
 800a09a:	b127      	cbz	r7, 800a0a6 <__gethex+0x322>
 800a09c:	4639      	mov	r1, r7
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 fe43 	bl	800ad2a <__any_on>
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	117b      	asrs	r3, r7, #5
 800a0aa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a0ae:	f007 071f 	and.w	r7, r7, #31
 800a0b2:	fa01 f707 	lsl.w	r7, r1, r7
 800a0b6:	421f      	tst	r7, r3
 800a0b8:	f04f 0702 	mov.w	r7, #2
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4620      	mov	r0, r4
 800a0c0:	bf18      	it	ne
 800a0c2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0c6:	1b76      	subs	r6, r6, r5
 800a0c8:	f7ff fdf4 	bl	8009cb4 <rshift>
 800a0cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0d0:	f1ba 0f00 	cmp.w	sl, #0
 800a0d4:	d048      	beq.n	800a168 <__gethex+0x3e4>
 800a0d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d015      	beq.n	800a10a <__gethex+0x386>
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d017      	beq.n	800a112 <__gethex+0x38e>
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d109      	bne.n	800a0fa <__gethex+0x376>
 800a0e6:	f01a 0f02 	tst.w	sl, #2
 800a0ea:	d006      	beq.n	800a0fa <__gethex+0x376>
 800a0ec:	f8d9 0000 	ldr.w	r0, [r9]
 800a0f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a0f4:	f01a 0f01 	tst.w	sl, #1
 800a0f8:	d10e      	bne.n	800a118 <__gethex+0x394>
 800a0fa:	f047 0710 	orr.w	r7, r7, #16
 800a0fe:	e033      	b.n	800a168 <__gethex+0x3e4>
 800a100:	f04f 0a01 	mov.w	sl, #1
 800a104:	e7cf      	b.n	800a0a6 <__gethex+0x322>
 800a106:	2701      	movs	r7, #1
 800a108:	e7e2      	b.n	800a0d0 <__gethex+0x34c>
 800a10a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a10c:	f1c3 0301 	rsb	r3, r3, #1
 800a110:	9315      	str	r3, [sp, #84]	; 0x54
 800a112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0f0      	beq.n	800a0fa <__gethex+0x376>
 800a118:	f04f 0c00 	mov.w	ip, #0
 800a11c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a120:	f104 0314 	add.w	r3, r4, #20
 800a124:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a128:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a132:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a136:	d01c      	beq.n	800a172 <__gethex+0x3ee>
 800a138:	3201      	adds	r2, #1
 800a13a:	6002      	str	r2, [r0, #0]
 800a13c:	2f02      	cmp	r7, #2
 800a13e:	f104 0314 	add.w	r3, r4, #20
 800a142:	d13d      	bne.n	800a1c0 <__gethex+0x43c>
 800a144:	f8d8 2000 	ldr.w	r2, [r8]
 800a148:	3a01      	subs	r2, #1
 800a14a:	42b2      	cmp	r2, r6
 800a14c:	d10a      	bne.n	800a164 <__gethex+0x3e0>
 800a14e:	2201      	movs	r2, #1
 800a150:	1171      	asrs	r1, r6, #5
 800a152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a156:	f006 061f 	and.w	r6, r6, #31
 800a15a:	fa02 f606 	lsl.w	r6, r2, r6
 800a15e:	421e      	tst	r6, r3
 800a160:	bf18      	it	ne
 800a162:	4617      	movne	r7, r2
 800a164:	f047 0720 	orr.w	r7, r7, #32
 800a168:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a16a:	601c      	str	r4, [r3, #0]
 800a16c:	9b05      	ldr	r3, [sp, #20]
 800a16e:	601d      	str	r5, [r3, #0]
 800a170:	e69a      	b.n	8009ea8 <__gethex+0x124>
 800a172:	4299      	cmp	r1, r3
 800a174:	f843 cc04 	str.w	ip, [r3, #-4]
 800a178:	d8d8      	bhi.n	800a12c <__gethex+0x3a8>
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	459b      	cmp	fp, r3
 800a17e:	db17      	blt.n	800a1b0 <__gethex+0x42c>
 800a180:	6861      	ldr	r1, [r4, #4]
 800a182:	9802      	ldr	r0, [sp, #8]
 800a184:	3101      	adds	r1, #1
 800a186:	f000 f939 	bl	800a3fc <_Balloc>
 800a18a:	4681      	mov	r9, r0
 800a18c:	b918      	cbnz	r0, 800a196 <__gethex+0x412>
 800a18e:	4602      	mov	r2, r0
 800a190:	2184      	movs	r1, #132	; 0x84
 800a192:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <__gethex+0x474>)
 800a194:	e6ab      	b.n	8009eee <__gethex+0x16a>
 800a196:	6922      	ldr	r2, [r4, #16]
 800a198:	f104 010c 	add.w	r1, r4, #12
 800a19c:	3202      	adds	r2, #2
 800a19e:	0092      	lsls	r2, r2, #2
 800a1a0:	300c      	adds	r0, #12
 800a1a2:	f000 f911 	bl	800a3c8 <memcpy>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	9802      	ldr	r0, [sp, #8]
 800a1aa:	f000 f967 	bl	800a47c <_Bfree>
 800a1ae:	464c      	mov	r4, r9
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	6122      	str	r2, [r4, #16]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1bc:	615a      	str	r2, [r3, #20]
 800a1be:	e7bd      	b.n	800a13c <__gethex+0x3b8>
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	455a      	cmp	r2, fp
 800a1c4:	dd0b      	ble.n	800a1de <__gethex+0x45a>
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f7ff fd73 	bl	8009cb4 <rshift>
 800a1ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1d2:	3501      	adds	r5, #1
 800a1d4:	42ab      	cmp	r3, r5
 800a1d6:	f6ff aed4 	blt.w	8009f82 <__gethex+0x1fe>
 800a1da:	2701      	movs	r7, #1
 800a1dc:	e7c2      	b.n	800a164 <__gethex+0x3e0>
 800a1de:	f016 061f 	ands.w	r6, r6, #31
 800a1e2:	d0fa      	beq.n	800a1da <__gethex+0x456>
 800a1e4:	4453      	add	r3, sl
 800a1e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1ea:	f000 f9f9 	bl	800a5e0 <__hi0bits>
 800a1ee:	f1c6 0620 	rsb	r6, r6, #32
 800a1f2:	42b0      	cmp	r0, r6
 800a1f4:	dbe7      	blt.n	800a1c6 <__gethex+0x442>
 800a1f6:	e7f0      	b.n	800a1da <__gethex+0x456>
 800a1f8:	0800bea0 	.word	0x0800bea0

0800a1fc <L_shift>:
 800a1fc:	f1c2 0208 	rsb	r2, r2, #8
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	b570      	push	{r4, r5, r6, lr}
 800a204:	f1c2 0620 	rsb	r6, r2, #32
 800a208:	6843      	ldr	r3, [r0, #4]
 800a20a:	6804      	ldr	r4, [r0, #0]
 800a20c:	fa03 f506 	lsl.w	r5, r3, r6
 800a210:	432c      	orrs	r4, r5
 800a212:	40d3      	lsrs	r3, r2
 800a214:	6004      	str	r4, [r0, #0]
 800a216:	f840 3f04 	str.w	r3, [r0, #4]!
 800a21a:	4288      	cmp	r0, r1
 800a21c:	d3f4      	bcc.n	800a208 <L_shift+0xc>
 800a21e:	bd70      	pop	{r4, r5, r6, pc}

0800a220 <__match>:
 800a220:	b530      	push	{r4, r5, lr}
 800a222:	6803      	ldr	r3, [r0, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a22a:	b914      	cbnz	r4, 800a232 <__match+0x12>
 800a22c:	6003      	str	r3, [r0, #0]
 800a22e:	2001      	movs	r0, #1
 800a230:	bd30      	pop	{r4, r5, pc}
 800a232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a23a:	2d19      	cmp	r5, #25
 800a23c:	bf98      	it	ls
 800a23e:	3220      	addls	r2, #32
 800a240:	42a2      	cmp	r2, r4
 800a242:	d0f0      	beq.n	800a226 <__match+0x6>
 800a244:	2000      	movs	r0, #0
 800a246:	e7f3      	b.n	800a230 <__match+0x10>

0800a248 <__hexnan>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	2500      	movs	r5, #0
 800a24e:	680b      	ldr	r3, [r1, #0]
 800a250:	4682      	mov	sl, r0
 800a252:	115e      	asrs	r6, r3, #5
 800a254:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a258:	f013 031f 	ands.w	r3, r3, #31
 800a25c:	bf18      	it	ne
 800a25e:	3604      	addne	r6, #4
 800a260:	1f37      	subs	r7, r6, #4
 800a262:	46b9      	mov	r9, r7
 800a264:	463c      	mov	r4, r7
 800a266:	46ab      	mov	fp, r5
 800a268:	b087      	sub	sp, #28
 800a26a:	4690      	mov	r8, r2
 800a26c:	6802      	ldr	r2, [r0, #0]
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	f846 5c04 	str.w	r5, [r6, #-4]
 800a274:	9502      	str	r5, [sp, #8]
 800a276:	7851      	ldrb	r1, [r2, #1]
 800a278:	1c53      	adds	r3, r2, #1
 800a27a:	9303      	str	r3, [sp, #12]
 800a27c:	b341      	cbz	r1, 800a2d0 <__hexnan+0x88>
 800a27e:	4608      	mov	r0, r1
 800a280:	9205      	str	r2, [sp, #20]
 800a282:	9104      	str	r1, [sp, #16]
 800a284:	f7ff fd69 	bl	8009d5a <__hexdig_fun>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d14f      	bne.n	800a32c <__hexnan+0xe4>
 800a28c:	9904      	ldr	r1, [sp, #16]
 800a28e:	9a05      	ldr	r2, [sp, #20]
 800a290:	2920      	cmp	r1, #32
 800a292:	d818      	bhi.n	800a2c6 <__hexnan+0x7e>
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	459b      	cmp	fp, r3
 800a298:	dd13      	ble.n	800a2c2 <__hexnan+0x7a>
 800a29a:	454c      	cmp	r4, r9
 800a29c:	d206      	bcs.n	800a2ac <__hexnan+0x64>
 800a29e:	2d07      	cmp	r5, #7
 800a2a0:	dc04      	bgt.n	800a2ac <__hexnan+0x64>
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7ff ffa8 	bl	800a1fc <L_shift>
 800a2ac:	4544      	cmp	r4, r8
 800a2ae:	d950      	bls.n	800a352 <__hexnan+0x10a>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a2b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2ba:	461d      	mov	r5, r3
 800a2bc:	464c      	mov	r4, r9
 800a2be:	f8cd b008 	str.w	fp, [sp, #8]
 800a2c2:	9a03      	ldr	r2, [sp, #12]
 800a2c4:	e7d7      	b.n	800a276 <__hexnan+0x2e>
 800a2c6:	2929      	cmp	r1, #41	; 0x29
 800a2c8:	d156      	bne.n	800a378 <__hexnan+0x130>
 800a2ca:	3202      	adds	r2, #2
 800a2cc:	f8ca 2000 	str.w	r2, [sl]
 800a2d0:	f1bb 0f00 	cmp.w	fp, #0
 800a2d4:	d050      	beq.n	800a378 <__hexnan+0x130>
 800a2d6:	454c      	cmp	r4, r9
 800a2d8:	d206      	bcs.n	800a2e8 <__hexnan+0xa0>
 800a2da:	2d07      	cmp	r5, #7
 800a2dc:	dc04      	bgt.n	800a2e8 <__hexnan+0xa0>
 800a2de:	462a      	mov	r2, r5
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f7ff ff8a 	bl	800a1fc <L_shift>
 800a2e8:	4544      	cmp	r4, r8
 800a2ea:	d934      	bls.n	800a356 <__hexnan+0x10e>
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	f1a8 0204 	sub.w	r2, r8, #4
 800a2f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2f6:	429f      	cmp	r7, r3
 800a2f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2fc:	d2f9      	bcs.n	800a2f2 <__hexnan+0xaa>
 800a2fe:	1b3b      	subs	r3, r7, r4
 800a300:	f023 0303 	bic.w	r3, r3, #3
 800a304:	3304      	adds	r3, #4
 800a306:	3401      	adds	r4, #1
 800a308:	3e03      	subs	r6, #3
 800a30a:	42b4      	cmp	r4, r6
 800a30c:	bf88      	it	hi
 800a30e:	2304      	movhi	r3, #4
 800a310:	2200      	movs	r2, #0
 800a312:	4443      	add	r3, r8
 800a314:	f843 2b04 	str.w	r2, [r3], #4
 800a318:	429f      	cmp	r7, r3
 800a31a:	d2fb      	bcs.n	800a314 <__hexnan+0xcc>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	b91b      	cbnz	r3, 800a328 <__hexnan+0xe0>
 800a320:	4547      	cmp	r7, r8
 800a322:	d127      	bne.n	800a374 <__hexnan+0x12c>
 800a324:	2301      	movs	r3, #1
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	2005      	movs	r0, #5
 800a32a:	e026      	b.n	800a37a <__hexnan+0x132>
 800a32c:	3501      	adds	r5, #1
 800a32e:	2d08      	cmp	r5, #8
 800a330:	f10b 0b01 	add.w	fp, fp, #1
 800a334:	dd06      	ble.n	800a344 <__hexnan+0xfc>
 800a336:	4544      	cmp	r4, r8
 800a338:	d9c3      	bls.n	800a2c2 <__hexnan+0x7a>
 800a33a:	2300      	movs	r3, #0
 800a33c:	2501      	movs	r5, #1
 800a33e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a342:	3c04      	subs	r4, #4
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	f000 000f 	and.w	r0, r0, #15
 800a34a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a34e:	6022      	str	r2, [r4, #0]
 800a350:	e7b7      	b.n	800a2c2 <__hexnan+0x7a>
 800a352:	2508      	movs	r5, #8
 800a354:	e7b5      	b.n	800a2c2 <__hexnan+0x7a>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0df      	beq.n	800a31c <__hexnan+0xd4>
 800a35c:	f04f 32ff 	mov.w	r2, #4294967295
 800a360:	f1c3 0320 	rsb	r3, r3, #32
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a36c:	401a      	ands	r2, r3
 800a36e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a372:	e7d3      	b.n	800a31c <__hexnan+0xd4>
 800a374:	3f04      	subs	r7, #4
 800a376:	e7d1      	b.n	800a31c <__hexnan+0xd4>
 800a378:	2004      	movs	r0, #4
 800a37a:	b007      	add	sp, #28
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a380 <_localeconv_r>:
 800a380:	4800      	ldr	r0, [pc, #0]	; (800a384 <_localeconv_r+0x4>)
 800a382:	4770      	bx	lr
 800a384:	20000300 	.word	0x20000300

0800a388 <__ascii_mbtowc>:
 800a388:	b082      	sub	sp, #8
 800a38a:	b901      	cbnz	r1, 800a38e <__ascii_mbtowc+0x6>
 800a38c:	a901      	add	r1, sp, #4
 800a38e:	b142      	cbz	r2, 800a3a2 <__ascii_mbtowc+0x1a>
 800a390:	b14b      	cbz	r3, 800a3a6 <__ascii_mbtowc+0x1e>
 800a392:	7813      	ldrb	r3, [r2, #0]
 800a394:	600b      	str	r3, [r1, #0]
 800a396:	7812      	ldrb	r2, [r2, #0]
 800a398:	1e10      	subs	r0, r2, #0
 800a39a:	bf18      	it	ne
 800a39c:	2001      	movne	r0, #1
 800a39e:	b002      	add	sp, #8
 800a3a0:	4770      	bx	lr
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	e7fb      	b.n	800a39e <__ascii_mbtowc+0x16>
 800a3a6:	f06f 0001 	mvn.w	r0, #1
 800a3aa:	e7f8      	b.n	800a39e <__ascii_mbtowc+0x16>

0800a3ac <memchr>:
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	b2c9      	uxtb	r1, r1
 800a3b2:	4402      	add	r2, r0
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	d101      	bne.n	800a3be <memchr+0x12>
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e003      	b.n	800a3c6 <memchr+0x1a>
 800a3be:	7804      	ldrb	r4, [r0, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	428c      	cmp	r4, r1
 800a3c4:	d1f6      	bne.n	800a3b4 <memchr+0x8>
 800a3c6:	bd10      	pop	{r4, pc}

0800a3c8 <memcpy>:
 800a3c8:	440a      	add	r2, r1
 800a3ca:	4291      	cmp	r1, r2
 800a3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d0:	d100      	bne.n	800a3d4 <memcpy+0xc>
 800a3d2:	4770      	bx	lr
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e0:	d1f9      	bne.n	800a3d6 <memcpy+0xe>
 800a3e2:	bd10      	pop	{r4, pc}

0800a3e4 <__malloc_lock>:
 800a3e4:	4801      	ldr	r0, [pc, #4]	; (800a3ec <__malloc_lock+0x8>)
 800a3e6:	f000 be8a 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800a3ea:	bf00      	nop
 800a3ec:	20001680 	.word	0x20001680

0800a3f0 <__malloc_unlock>:
 800a3f0:	4801      	ldr	r0, [pc, #4]	; (800a3f8 <__malloc_unlock+0x8>)
 800a3f2:	f000 be85 	b.w	800b100 <__retarget_lock_release_recursive>
 800a3f6:	bf00      	nop
 800a3f8:	20001680 	.word	0x20001680

0800a3fc <_Balloc>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a400:	4604      	mov	r4, r0
 800a402:	460d      	mov	r5, r1
 800a404:	b976      	cbnz	r6, 800a424 <_Balloc+0x28>
 800a406:	2010      	movs	r0, #16
 800a408:	f7fc ff7a 	bl	8007300 <malloc>
 800a40c:	4602      	mov	r2, r0
 800a40e:	6260      	str	r0, [r4, #36]	; 0x24
 800a410:	b920      	cbnz	r0, 800a41c <_Balloc+0x20>
 800a412:	2166      	movs	r1, #102	; 0x66
 800a414:	4b17      	ldr	r3, [pc, #92]	; (800a474 <_Balloc+0x78>)
 800a416:	4818      	ldr	r0, [pc, #96]	; (800a478 <_Balloc+0x7c>)
 800a418:	f000 fe40 	bl	800b09c <__assert_func>
 800a41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a420:	6006      	str	r6, [r0, #0]
 800a422:	60c6      	str	r6, [r0, #12]
 800a424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a426:	68f3      	ldr	r3, [r6, #12]
 800a428:	b183      	cbz	r3, 800a44c <_Balloc+0x50>
 800a42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a432:	b9b8      	cbnz	r0, 800a464 <_Balloc+0x68>
 800a434:	2101      	movs	r1, #1
 800a436:	fa01 f605 	lsl.w	r6, r1, r5
 800a43a:	1d72      	adds	r2, r6, #5
 800a43c:	4620      	mov	r0, r4
 800a43e:	0092      	lsls	r2, r2, #2
 800a440:	f000 fc94 	bl	800ad6c <_calloc_r>
 800a444:	b160      	cbz	r0, 800a460 <_Balloc+0x64>
 800a446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a44a:	e00e      	b.n	800a46a <_Balloc+0x6e>
 800a44c:	2221      	movs	r2, #33	; 0x21
 800a44e:	2104      	movs	r1, #4
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fc8b 	bl	800ad6c <_calloc_r>
 800a456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a458:	60f0      	str	r0, [r6, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e4      	bne.n	800a42a <_Balloc+0x2e>
 800a460:	2000      	movs	r0, #0
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	6802      	ldr	r2, [r0, #0]
 800a466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a46a:	2300      	movs	r3, #0
 800a46c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a470:	e7f7      	b.n	800a462 <_Balloc+0x66>
 800a472:	bf00      	nop
 800a474:	0800be2e 	.word	0x0800be2e
 800a478:	0800bf2c 	.word	0x0800bf2c

0800a47c <_Bfree>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b976      	cbnz	r6, 800a4a4 <_Bfree+0x28>
 800a486:	2010      	movs	r0, #16
 800a488:	f7fc ff3a 	bl	8007300 <malloc>
 800a48c:	4602      	mov	r2, r0
 800a48e:	6268      	str	r0, [r5, #36]	; 0x24
 800a490:	b920      	cbnz	r0, 800a49c <_Bfree+0x20>
 800a492:	218a      	movs	r1, #138	; 0x8a
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <_Bfree+0x3c>)
 800a496:	4809      	ldr	r0, [pc, #36]	; (800a4bc <_Bfree+0x40>)
 800a498:	f000 fe00 	bl	800b09c <__assert_func>
 800a49c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4a0:	6006      	str	r6, [r0, #0]
 800a4a2:	60c6      	str	r6, [r0, #12]
 800a4a4:	b13c      	cbz	r4, 800a4b6 <_Bfree+0x3a>
 800a4a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4a8:	6862      	ldr	r2, [r4, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4b0:	6021      	str	r1, [r4, #0]
 800a4b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	0800be2e 	.word	0x0800be2e
 800a4bc:	0800bf2c 	.word	0x0800bf2c

0800a4c0 <__multadd>:
 800a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	461e      	mov	r6, r3
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	690d      	ldr	r5, [r1, #16]
 800a4ce:	f101 0c14 	add.w	ip, r1, #20
 800a4d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	b299      	uxth	r1, r3
 800a4da:	fb02 6101 	mla	r1, r2, r1, r6
 800a4de:	0c1e      	lsrs	r6, r3, #16
 800a4e0:	0c0b      	lsrs	r3, r1, #16
 800a4e2:	fb02 3306 	mla	r3, r2, r6, r3
 800a4e6:	b289      	uxth	r1, r1
 800a4e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4ec:	4285      	cmp	r5, r0
 800a4ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4f6:	dcec      	bgt.n	800a4d2 <__multadd+0x12>
 800a4f8:	b30e      	cbz	r6, 800a53e <__multadd+0x7e>
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	dc19      	bgt.n	800a534 <__multadd+0x74>
 800a500:	6861      	ldr	r1, [r4, #4]
 800a502:	4638      	mov	r0, r7
 800a504:	3101      	adds	r1, #1
 800a506:	f7ff ff79 	bl	800a3fc <_Balloc>
 800a50a:	4680      	mov	r8, r0
 800a50c:	b928      	cbnz	r0, 800a51a <__multadd+0x5a>
 800a50e:	4602      	mov	r2, r0
 800a510:	21b5      	movs	r1, #181	; 0xb5
 800a512:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <__multadd+0x84>)
 800a514:	480c      	ldr	r0, [pc, #48]	; (800a548 <__multadd+0x88>)
 800a516:	f000 fdc1 	bl	800b09c <__assert_func>
 800a51a:	6922      	ldr	r2, [r4, #16]
 800a51c:	f104 010c 	add.w	r1, r4, #12
 800a520:	3202      	adds	r2, #2
 800a522:	0092      	lsls	r2, r2, #2
 800a524:	300c      	adds	r0, #12
 800a526:	f7ff ff4f 	bl	800a3c8 <memcpy>
 800a52a:	4621      	mov	r1, r4
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff ffa5 	bl	800a47c <_Bfree>
 800a532:	4644      	mov	r4, r8
 800a534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a538:	3501      	adds	r5, #1
 800a53a:	615e      	str	r6, [r3, #20]
 800a53c:	6125      	str	r5, [r4, #16]
 800a53e:	4620      	mov	r0, r4
 800a540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a544:	0800bea0 	.word	0x0800bea0
 800a548:	0800bf2c 	.word	0x0800bf2c

0800a54c <__s2b>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	4615      	mov	r5, r2
 800a552:	2209      	movs	r2, #9
 800a554:	461f      	mov	r7, r3
 800a556:	3308      	adds	r3, #8
 800a558:	460c      	mov	r4, r1
 800a55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a55e:	4606      	mov	r6, r0
 800a560:	2201      	movs	r2, #1
 800a562:	2100      	movs	r1, #0
 800a564:	429a      	cmp	r2, r3
 800a566:	db09      	blt.n	800a57c <__s2b+0x30>
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff ff47 	bl	800a3fc <_Balloc>
 800a56e:	b940      	cbnz	r0, 800a582 <__s2b+0x36>
 800a570:	4602      	mov	r2, r0
 800a572:	21ce      	movs	r1, #206	; 0xce
 800a574:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <__s2b+0x8c>)
 800a576:	4819      	ldr	r0, [pc, #100]	; (800a5dc <__s2b+0x90>)
 800a578:	f000 fd90 	bl	800b09c <__assert_func>
 800a57c:	0052      	lsls	r2, r2, #1
 800a57e:	3101      	adds	r1, #1
 800a580:	e7f0      	b.n	800a564 <__s2b+0x18>
 800a582:	9b08      	ldr	r3, [sp, #32]
 800a584:	2d09      	cmp	r5, #9
 800a586:	6143      	str	r3, [r0, #20]
 800a588:	f04f 0301 	mov.w	r3, #1
 800a58c:	6103      	str	r3, [r0, #16]
 800a58e:	dd16      	ble.n	800a5be <__s2b+0x72>
 800a590:	f104 0909 	add.w	r9, r4, #9
 800a594:	46c8      	mov	r8, r9
 800a596:	442c      	add	r4, r5
 800a598:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a59c:	4601      	mov	r1, r0
 800a59e:	220a      	movs	r2, #10
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	3b30      	subs	r3, #48	; 0x30
 800a5a4:	f7ff ff8c 	bl	800a4c0 <__multadd>
 800a5a8:	45a0      	cmp	r8, r4
 800a5aa:	d1f5      	bne.n	800a598 <__s2b+0x4c>
 800a5ac:	f1a5 0408 	sub.w	r4, r5, #8
 800a5b0:	444c      	add	r4, r9
 800a5b2:	1b2d      	subs	r5, r5, r4
 800a5b4:	1963      	adds	r3, r4, r5
 800a5b6:	42bb      	cmp	r3, r7
 800a5b8:	db04      	blt.n	800a5c4 <__s2b+0x78>
 800a5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5be:	2509      	movs	r5, #9
 800a5c0:	340a      	adds	r4, #10
 800a5c2:	e7f6      	b.n	800a5b2 <__s2b+0x66>
 800a5c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	220a      	movs	r2, #10
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	3b30      	subs	r3, #48	; 0x30
 800a5d0:	f7ff ff76 	bl	800a4c0 <__multadd>
 800a5d4:	e7ee      	b.n	800a5b4 <__s2b+0x68>
 800a5d6:	bf00      	nop
 800a5d8:	0800bea0 	.word	0x0800bea0
 800a5dc:	0800bf2c 	.word	0x0800bf2c

0800a5e0 <__hi0bits>:
 800a5e0:	0c02      	lsrs	r2, r0, #16
 800a5e2:	0412      	lsls	r2, r2, #16
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	b9ca      	cbnz	r2, 800a61c <__hi0bits+0x3c>
 800a5e8:	0403      	lsls	r3, r0, #16
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a5f0:	bf04      	itt	eq
 800a5f2:	021b      	lsleq	r3, r3, #8
 800a5f4:	3008      	addeq	r0, #8
 800a5f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a5fa:	bf04      	itt	eq
 800a5fc:	011b      	lsleq	r3, r3, #4
 800a5fe:	3004      	addeq	r0, #4
 800a600:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a604:	bf04      	itt	eq
 800a606:	009b      	lsleq	r3, r3, #2
 800a608:	3002      	addeq	r0, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db05      	blt.n	800a61a <__hi0bits+0x3a>
 800a60e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a612:	f100 0001 	add.w	r0, r0, #1
 800a616:	bf08      	it	eq
 800a618:	2020      	moveq	r0, #32
 800a61a:	4770      	bx	lr
 800a61c:	2000      	movs	r0, #0
 800a61e:	e7e5      	b.n	800a5ec <__hi0bits+0xc>

0800a620 <__lo0bits>:
 800a620:	6803      	ldr	r3, [r0, #0]
 800a622:	4602      	mov	r2, r0
 800a624:	f013 0007 	ands.w	r0, r3, #7
 800a628:	d00b      	beq.n	800a642 <__lo0bits+0x22>
 800a62a:	07d9      	lsls	r1, r3, #31
 800a62c:	d421      	bmi.n	800a672 <__lo0bits+0x52>
 800a62e:	0798      	lsls	r0, r3, #30
 800a630:	bf49      	itett	mi
 800a632:	085b      	lsrmi	r3, r3, #1
 800a634:	089b      	lsrpl	r3, r3, #2
 800a636:	2001      	movmi	r0, #1
 800a638:	6013      	strmi	r3, [r2, #0]
 800a63a:	bf5c      	itt	pl
 800a63c:	2002      	movpl	r0, #2
 800a63e:	6013      	strpl	r3, [r2, #0]
 800a640:	4770      	bx	lr
 800a642:	b299      	uxth	r1, r3
 800a644:	b909      	cbnz	r1, 800a64a <__lo0bits+0x2a>
 800a646:	2010      	movs	r0, #16
 800a648:	0c1b      	lsrs	r3, r3, #16
 800a64a:	b2d9      	uxtb	r1, r3
 800a64c:	b909      	cbnz	r1, 800a652 <__lo0bits+0x32>
 800a64e:	3008      	adds	r0, #8
 800a650:	0a1b      	lsrs	r3, r3, #8
 800a652:	0719      	lsls	r1, r3, #28
 800a654:	bf04      	itt	eq
 800a656:	091b      	lsreq	r3, r3, #4
 800a658:	3004      	addeq	r0, #4
 800a65a:	0799      	lsls	r1, r3, #30
 800a65c:	bf04      	itt	eq
 800a65e:	089b      	lsreq	r3, r3, #2
 800a660:	3002      	addeq	r0, #2
 800a662:	07d9      	lsls	r1, r3, #31
 800a664:	d403      	bmi.n	800a66e <__lo0bits+0x4e>
 800a666:	085b      	lsrs	r3, r3, #1
 800a668:	f100 0001 	add.w	r0, r0, #1
 800a66c:	d003      	beq.n	800a676 <__lo0bits+0x56>
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	4770      	bx	lr
 800a672:	2000      	movs	r0, #0
 800a674:	4770      	bx	lr
 800a676:	2020      	movs	r0, #32
 800a678:	4770      	bx	lr
	...

0800a67c <__i2b>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	460c      	mov	r4, r1
 800a680:	2101      	movs	r1, #1
 800a682:	f7ff febb 	bl	800a3fc <_Balloc>
 800a686:	4602      	mov	r2, r0
 800a688:	b928      	cbnz	r0, 800a696 <__i2b+0x1a>
 800a68a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a68e:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <__i2b+0x24>)
 800a690:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <__i2b+0x28>)
 800a692:	f000 fd03 	bl	800b09c <__assert_func>
 800a696:	2301      	movs	r3, #1
 800a698:	6144      	str	r4, [r0, #20]
 800a69a:	6103      	str	r3, [r0, #16]
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	bf00      	nop
 800a6a0:	0800bea0 	.word	0x0800bea0
 800a6a4:	0800bf2c 	.word	0x0800bf2c

0800a6a8 <__multiply>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	4691      	mov	r9, r2
 800a6ae:	690a      	ldr	r2, [r1, #16]
 800a6b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	bfbe      	ittt	lt
 800a6ba:	460b      	movlt	r3, r1
 800a6bc:	464c      	movlt	r4, r9
 800a6be:	4699      	movlt	r9, r3
 800a6c0:	6927      	ldr	r7, [r4, #16]
 800a6c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	6861      	ldr	r1, [r4, #4]
 800a6ca:	eb07 060a 	add.w	r6, r7, sl
 800a6ce:	42b3      	cmp	r3, r6
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	bfb8      	it	lt
 800a6d4:	3101      	addlt	r1, #1
 800a6d6:	f7ff fe91 	bl	800a3fc <_Balloc>
 800a6da:	b930      	cbnz	r0, 800a6ea <__multiply+0x42>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	f240 115d 	movw	r1, #349	; 0x15d
 800a6e2:	4b43      	ldr	r3, [pc, #268]	; (800a7f0 <__multiply+0x148>)
 800a6e4:	4843      	ldr	r0, [pc, #268]	; (800a7f4 <__multiply+0x14c>)
 800a6e6:	f000 fcd9 	bl	800b09c <__assert_func>
 800a6ea:	f100 0514 	add.w	r5, r0, #20
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6f6:	4543      	cmp	r3, r8
 800a6f8:	d321      	bcc.n	800a73e <__multiply+0x96>
 800a6fa:	f104 0314 	add.w	r3, r4, #20
 800a6fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a702:	f109 0314 	add.w	r3, r9, #20
 800a706:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a70a:	9202      	str	r2, [sp, #8]
 800a70c:	1b3a      	subs	r2, r7, r4
 800a70e:	3a15      	subs	r2, #21
 800a710:	f022 0203 	bic.w	r2, r2, #3
 800a714:	3204      	adds	r2, #4
 800a716:	f104 0115 	add.w	r1, r4, #21
 800a71a:	428f      	cmp	r7, r1
 800a71c:	bf38      	it	cc
 800a71e:	2204      	movcc	r2, #4
 800a720:	9201      	str	r2, [sp, #4]
 800a722:	9a02      	ldr	r2, [sp, #8]
 800a724:	9303      	str	r3, [sp, #12]
 800a726:	429a      	cmp	r2, r3
 800a728:	d80c      	bhi.n	800a744 <__multiply+0x9c>
 800a72a:	2e00      	cmp	r6, #0
 800a72c:	dd03      	ble.n	800a736 <__multiply+0x8e>
 800a72e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a732:	2b00      	cmp	r3, #0
 800a734:	d059      	beq.n	800a7ea <__multiply+0x142>
 800a736:	6106      	str	r6, [r0, #16]
 800a738:	b005      	add	sp, #20
 800a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73e:	f843 2b04 	str.w	r2, [r3], #4
 800a742:	e7d8      	b.n	800a6f6 <__multiply+0x4e>
 800a744:	f8b3 a000 	ldrh.w	sl, [r3]
 800a748:	f1ba 0f00 	cmp.w	sl, #0
 800a74c:	d023      	beq.n	800a796 <__multiply+0xee>
 800a74e:	46a9      	mov	r9, r5
 800a750:	f04f 0c00 	mov.w	ip, #0
 800a754:	f104 0e14 	add.w	lr, r4, #20
 800a758:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a75c:	f8d9 1000 	ldr.w	r1, [r9]
 800a760:	fa1f fb82 	uxth.w	fp, r2
 800a764:	b289      	uxth	r1, r1
 800a766:	fb0a 110b 	mla	r1, sl, fp, r1
 800a76a:	4461      	add	r1, ip
 800a76c:	f8d9 c000 	ldr.w	ip, [r9]
 800a770:	0c12      	lsrs	r2, r2, #16
 800a772:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a776:	fb0a c202 	mla	r2, sl, r2, ip
 800a77a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a77e:	b289      	uxth	r1, r1
 800a780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a784:	4577      	cmp	r7, lr
 800a786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a78a:	f849 1b04 	str.w	r1, [r9], #4
 800a78e:	d8e3      	bhi.n	800a758 <__multiply+0xb0>
 800a790:	9a01      	ldr	r2, [sp, #4]
 800a792:	f845 c002 	str.w	ip, [r5, r2]
 800a796:	9a03      	ldr	r2, [sp, #12]
 800a798:	3304      	adds	r3, #4
 800a79a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a79e:	f1b9 0f00 	cmp.w	r9, #0
 800a7a2:	d020      	beq.n	800a7e6 <__multiply+0x13e>
 800a7a4:	46ae      	mov	lr, r5
 800a7a6:	f04f 0a00 	mov.w	sl, #0
 800a7aa:	6829      	ldr	r1, [r5, #0]
 800a7ac:	f104 0c14 	add.w	ip, r4, #20
 800a7b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a7b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7b8:	b289      	uxth	r1, r1
 800a7ba:	fb09 220b 	mla	r2, r9, fp, r2
 800a7be:	4492      	add	sl, r2
 800a7c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a7c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7cc:	f8be 1000 	ldrh.w	r1, [lr]
 800a7d0:	0c12      	lsrs	r2, r2, #16
 800a7d2:	fb09 1102 	mla	r1, r9, r2, r1
 800a7d6:	4567      	cmp	r7, ip
 800a7d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7e0:	d8e6      	bhi.n	800a7b0 <__multiply+0x108>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	50a9      	str	r1, [r5, r2]
 800a7e6:	3504      	adds	r5, #4
 800a7e8:	e79b      	b.n	800a722 <__multiply+0x7a>
 800a7ea:	3e01      	subs	r6, #1
 800a7ec:	e79d      	b.n	800a72a <__multiply+0x82>
 800a7ee:	bf00      	nop
 800a7f0:	0800bea0 	.word	0x0800bea0
 800a7f4:	0800bf2c 	.word	0x0800bf2c

0800a7f8 <__pow5mult>:
 800a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7fc:	4615      	mov	r5, r2
 800a7fe:	f012 0203 	ands.w	r2, r2, #3
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	d007      	beq.n	800a818 <__pow5mult+0x20>
 800a808:	4c25      	ldr	r4, [pc, #148]	; (800a8a0 <__pow5mult+0xa8>)
 800a80a:	3a01      	subs	r2, #1
 800a80c:	2300      	movs	r3, #0
 800a80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a812:	f7ff fe55 	bl	800a4c0 <__multadd>
 800a816:	4607      	mov	r7, r0
 800a818:	10ad      	asrs	r5, r5, #2
 800a81a:	d03d      	beq.n	800a898 <__pow5mult+0xa0>
 800a81c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a81e:	b97c      	cbnz	r4, 800a840 <__pow5mult+0x48>
 800a820:	2010      	movs	r0, #16
 800a822:	f7fc fd6d 	bl	8007300 <malloc>
 800a826:	4602      	mov	r2, r0
 800a828:	6270      	str	r0, [r6, #36]	; 0x24
 800a82a:	b928      	cbnz	r0, 800a838 <__pow5mult+0x40>
 800a82c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a830:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <__pow5mult+0xac>)
 800a832:	481d      	ldr	r0, [pc, #116]	; (800a8a8 <__pow5mult+0xb0>)
 800a834:	f000 fc32 	bl	800b09c <__assert_func>
 800a838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a83c:	6004      	str	r4, [r0, #0]
 800a83e:	60c4      	str	r4, [r0, #12]
 800a840:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a848:	b94c      	cbnz	r4, 800a85e <__pow5mult+0x66>
 800a84a:	f240 2171 	movw	r1, #625	; 0x271
 800a84e:	4630      	mov	r0, r6
 800a850:	f7ff ff14 	bl	800a67c <__i2b>
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	f8c8 0008 	str.w	r0, [r8, #8]
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	f04f 0900 	mov.w	r9, #0
 800a862:	07eb      	lsls	r3, r5, #31
 800a864:	d50a      	bpl.n	800a87c <__pow5mult+0x84>
 800a866:	4639      	mov	r1, r7
 800a868:	4622      	mov	r2, r4
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff ff1c 	bl	800a6a8 <__multiply>
 800a870:	4680      	mov	r8, r0
 800a872:	4639      	mov	r1, r7
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff fe01 	bl	800a47c <_Bfree>
 800a87a:	4647      	mov	r7, r8
 800a87c:	106d      	asrs	r5, r5, #1
 800a87e:	d00b      	beq.n	800a898 <__pow5mult+0xa0>
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	b938      	cbnz	r0, 800a894 <__pow5mult+0x9c>
 800a884:	4622      	mov	r2, r4
 800a886:	4621      	mov	r1, r4
 800a888:	4630      	mov	r0, r6
 800a88a:	f7ff ff0d 	bl	800a6a8 <__multiply>
 800a88e:	6020      	str	r0, [r4, #0]
 800a890:	f8c0 9000 	str.w	r9, [r0]
 800a894:	4604      	mov	r4, r0
 800a896:	e7e4      	b.n	800a862 <__pow5mult+0x6a>
 800a898:	4638      	mov	r0, r7
 800a89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800c078 	.word	0x0800c078
 800a8a4:	0800be2e 	.word	0x0800be2e
 800a8a8:	0800bf2c 	.word	0x0800bf2c

0800a8ac <__lshift>:
 800a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	4691      	mov	r9, r2
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	6849      	ldr	r1, [r1, #4]
 800a8ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8c4:	f108 0601 	add.w	r6, r8, #1
 800a8c8:	42b3      	cmp	r3, r6
 800a8ca:	db0b      	blt.n	800a8e4 <__lshift+0x38>
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff fd95 	bl	800a3fc <_Balloc>
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	b948      	cbnz	r0, 800a8ea <__lshift+0x3e>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <__lshift+0xd8>)
 800a8de:	482a      	ldr	r0, [pc, #168]	; (800a988 <__lshift+0xdc>)
 800a8e0:	f000 fbdc 	bl	800b09c <__assert_func>
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	e7ee      	b.n	800a8c8 <__lshift+0x1c>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f100 0114 	add.w	r1, r0, #20
 800a8f0:	f100 0210 	add.w	r2, r0, #16
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	4553      	cmp	r3, sl
 800a8f8:	db37      	blt.n	800a96a <__lshift+0xbe>
 800a8fa:	6920      	ldr	r0, [r4, #16]
 800a8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a900:	f104 0314 	add.w	r3, r4, #20
 800a904:	f019 091f 	ands.w	r9, r9, #31
 800a908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a90c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a910:	d02f      	beq.n	800a972 <__lshift+0xc6>
 800a912:	468a      	mov	sl, r1
 800a914:	f04f 0c00 	mov.w	ip, #0
 800a918:	f1c9 0e20 	rsb	lr, r9, #32
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	fa02 f209 	lsl.w	r2, r2, r9
 800a922:	ea42 020c 	orr.w	r2, r2, ip
 800a926:	f84a 2b04 	str.w	r2, [sl], #4
 800a92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a92e:	4298      	cmp	r0, r3
 800a930:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a934:	d8f2      	bhi.n	800a91c <__lshift+0x70>
 800a936:	1b03      	subs	r3, r0, r4
 800a938:	3b15      	subs	r3, #21
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	3304      	adds	r3, #4
 800a940:	f104 0215 	add.w	r2, r4, #21
 800a944:	4290      	cmp	r0, r2
 800a946:	bf38      	it	cc
 800a948:	2304      	movcc	r3, #4
 800a94a:	f841 c003 	str.w	ip, [r1, r3]
 800a94e:	f1bc 0f00 	cmp.w	ip, #0
 800a952:	d001      	beq.n	800a958 <__lshift+0xac>
 800a954:	f108 0602 	add.w	r6, r8, #2
 800a958:	3e01      	subs	r6, #1
 800a95a:	4638      	mov	r0, r7
 800a95c:	4621      	mov	r1, r4
 800a95e:	612e      	str	r6, [r5, #16]
 800a960:	f7ff fd8c 	bl	800a47c <_Bfree>
 800a964:	4628      	mov	r0, r5
 800a966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a96e:	3301      	adds	r3, #1
 800a970:	e7c1      	b.n	800a8f6 <__lshift+0x4a>
 800a972:	3904      	subs	r1, #4
 800a974:	f853 2b04 	ldr.w	r2, [r3], #4
 800a978:	4298      	cmp	r0, r3
 800a97a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a97e:	d8f9      	bhi.n	800a974 <__lshift+0xc8>
 800a980:	e7ea      	b.n	800a958 <__lshift+0xac>
 800a982:	bf00      	nop
 800a984:	0800bea0 	.word	0x0800bea0
 800a988:	0800bf2c 	.word	0x0800bf2c

0800a98c <__mcmp>:
 800a98c:	4603      	mov	r3, r0
 800a98e:	690a      	ldr	r2, [r1, #16]
 800a990:	6900      	ldr	r0, [r0, #16]
 800a992:	b530      	push	{r4, r5, lr}
 800a994:	1a80      	subs	r0, r0, r2
 800a996:	d10d      	bne.n	800a9b4 <__mcmp+0x28>
 800a998:	3314      	adds	r3, #20
 800a99a:	3114      	adds	r1, #20
 800a99c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9ac:	4295      	cmp	r5, r2
 800a9ae:	d002      	beq.n	800a9b6 <__mcmp+0x2a>
 800a9b0:	d304      	bcc.n	800a9bc <__mcmp+0x30>
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	bd30      	pop	{r4, r5, pc}
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	d3f4      	bcc.n	800a9a4 <__mcmp+0x18>
 800a9ba:	e7fb      	b.n	800a9b4 <__mcmp+0x28>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	e7f8      	b.n	800a9b4 <__mcmp+0x28>
	...

0800a9c4 <__mdiff>:
 800a9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	f7ff ffdb 	bl	800a98c <__mcmp>
 800a9d6:	1e06      	subs	r6, r0, #0
 800a9d8:	d111      	bne.n	800a9fe <__mdiff+0x3a>
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f7ff fd0d 	bl	800a3fc <_Balloc>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	b928      	cbnz	r0, 800a9f2 <__mdiff+0x2e>
 800a9e6:	f240 2132 	movw	r1, #562	; 0x232
 800a9ea:	4b3a      	ldr	r3, [pc, #232]	; (800aad4 <__mdiff+0x110>)
 800a9ec:	483a      	ldr	r0, [pc, #232]	; (800aad8 <__mdiff+0x114>)
 800a9ee:	f000 fb55 	bl	800b09c <__assert_func>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fe:	bfa4      	itt	ge
 800aa00:	4623      	movge	r3, r4
 800aa02:	462c      	movge	r4, r5
 800aa04:	4638      	mov	r0, r7
 800aa06:	6861      	ldr	r1, [r4, #4]
 800aa08:	bfa6      	itte	ge
 800aa0a:	461d      	movge	r5, r3
 800aa0c:	2600      	movge	r6, #0
 800aa0e:	2601      	movlt	r6, #1
 800aa10:	f7ff fcf4 	bl	800a3fc <_Balloc>
 800aa14:	4602      	mov	r2, r0
 800aa16:	b918      	cbnz	r0, 800aa20 <__mdiff+0x5c>
 800aa18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa1c:	4b2d      	ldr	r3, [pc, #180]	; (800aad4 <__mdiff+0x110>)
 800aa1e:	e7e5      	b.n	800a9ec <__mdiff+0x28>
 800aa20:	f102 0814 	add.w	r8, r2, #20
 800aa24:	46c2      	mov	sl, r8
 800aa26:	f04f 0c00 	mov.w	ip, #0
 800aa2a:	6927      	ldr	r7, [r4, #16]
 800aa2c:	60c6      	str	r6, [r0, #12]
 800aa2e:	692e      	ldr	r6, [r5, #16]
 800aa30:	f104 0014 	add.w	r0, r4, #20
 800aa34:	f105 0914 	add.w	r9, r5, #20
 800aa38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800aa3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa40:	3410      	adds	r4, #16
 800aa42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aa46:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa4a:	fa1f f18b 	uxth.w	r1, fp
 800aa4e:	448c      	add	ip, r1
 800aa50:	b299      	uxth	r1, r3
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	ebac 0101 	sub.w	r1, ip, r1
 800aa58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aa60:	b289      	uxth	r1, r1
 800aa62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aa66:	454e      	cmp	r6, r9
 800aa68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aa6c:	f84a 3b04 	str.w	r3, [sl], #4
 800aa70:	d8e7      	bhi.n	800aa42 <__mdiff+0x7e>
 800aa72:	1b73      	subs	r3, r6, r5
 800aa74:	3b15      	subs	r3, #21
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	3515      	adds	r5, #21
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	42ae      	cmp	r6, r5
 800aa80:	bf38      	it	cc
 800aa82:	2304      	movcc	r3, #4
 800aa84:	4418      	add	r0, r3
 800aa86:	4443      	add	r3, r8
 800aa88:	461e      	mov	r6, r3
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	4575      	cmp	r5, lr
 800aa8e:	d30e      	bcc.n	800aaae <__mdiff+0xea>
 800aa90:	f10e 0103 	add.w	r1, lr, #3
 800aa94:	1a09      	subs	r1, r1, r0
 800aa96:	f021 0103 	bic.w	r1, r1, #3
 800aa9a:	3803      	subs	r0, #3
 800aa9c:	4586      	cmp	lr, r0
 800aa9e:	bf38      	it	cc
 800aaa0:	2100      	movcc	r1, #0
 800aaa2:	4419      	add	r1, r3
 800aaa4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aaa8:	b18b      	cbz	r3, 800aace <__mdiff+0x10a>
 800aaaa:	6117      	str	r7, [r2, #16]
 800aaac:	e7a4      	b.n	800a9f8 <__mdiff+0x34>
 800aaae:	f855 8b04 	ldr.w	r8, [r5], #4
 800aab2:	fa1f f188 	uxth.w	r1, r8
 800aab6:	4461      	add	r1, ip
 800aab8:	140c      	asrs	r4, r1, #16
 800aaba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aabe:	b289      	uxth	r1, r1
 800aac0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aac4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800aac8:	f846 1b04 	str.w	r1, [r6], #4
 800aacc:	e7de      	b.n	800aa8c <__mdiff+0xc8>
 800aace:	3f01      	subs	r7, #1
 800aad0:	e7e8      	b.n	800aaa4 <__mdiff+0xe0>
 800aad2:	bf00      	nop
 800aad4:	0800bea0 	.word	0x0800bea0
 800aad8:	0800bf2c 	.word	0x0800bf2c

0800aadc <__ulp>:
 800aadc:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <__ulp+0x48>)
 800aade:	400b      	ands	r3, r1
 800aae0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dd02      	ble.n	800aaee <__ulp+0x12>
 800aae8:	2000      	movs	r0, #0
 800aaea:	4619      	mov	r1, r3
 800aaec:	4770      	bx	lr
 800aaee:	425b      	negs	r3, r3
 800aaf0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aaf4:	f04f 0000 	mov.w	r0, #0
 800aaf8:	f04f 0100 	mov.w	r1, #0
 800aafc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab00:	da04      	bge.n	800ab0c <__ulp+0x30>
 800ab02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab06:	fa43 f102 	asr.w	r1, r3, r2
 800ab0a:	4770      	bx	lr
 800ab0c:	f1a2 0314 	sub.w	r3, r2, #20
 800ab10:	2b1e      	cmp	r3, #30
 800ab12:	bfd6      	itet	le
 800ab14:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab18:	2301      	movgt	r3, #1
 800ab1a:	fa22 f303 	lsrle.w	r3, r2, r3
 800ab1e:	4618      	mov	r0, r3
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	7ff00000 	.word	0x7ff00000

0800ab28 <__b2d>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	6907      	ldr	r7, [r0, #16]
 800ab2e:	f100 0914 	add.w	r9, r0, #20
 800ab32:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ab36:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ab3a:	f1a7 0804 	sub.w	r8, r7, #4
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7ff fd4e 	bl	800a5e0 <__hi0bits>
 800ab44:	f1c0 0320 	rsb	r3, r0, #32
 800ab48:	280a      	cmp	r0, #10
 800ab4a:	600b      	str	r3, [r1, #0]
 800ab4c:	491f      	ldr	r1, [pc, #124]	; (800abcc <__b2d+0xa4>)
 800ab4e:	dc17      	bgt.n	800ab80 <__b2d+0x58>
 800ab50:	45c1      	cmp	r9, r8
 800ab52:	bf28      	it	cs
 800ab54:	2200      	movcs	r2, #0
 800ab56:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab5a:	fa26 f30c 	lsr.w	r3, r6, ip
 800ab5e:	bf38      	it	cc
 800ab60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ab64:	ea43 0501 	orr.w	r5, r3, r1
 800ab68:	f100 0315 	add.w	r3, r0, #21
 800ab6c:	fa06 f303 	lsl.w	r3, r6, r3
 800ab70:	fa22 f20c 	lsr.w	r2, r2, ip
 800ab74:	ea43 0402 	orr.w	r4, r3, r2
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab80:	45c1      	cmp	r9, r8
 800ab82:	bf2e      	itee	cs
 800ab84:	2200      	movcs	r2, #0
 800ab86:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ab8a:	f1a7 0808 	subcc.w	r8, r7, #8
 800ab8e:	f1b0 030b 	subs.w	r3, r0, #11
 800ab92:	d016      	beq.n	800abc2 <__b2d+0x9a>
 800ab94:	f1c3 0720 	rsb	r7, r3, #32
 800ab98:	fa22 f107 	lsr.w	r1, r2, r7
 800ab9c:	45c8      	cmp	r8, r9
 800ab9e:	fa06 f603 	lsl.w	r6, r6, r3
 800aba2:	ea46 0601 	orr.w	r6, r6, r1
 800aba6:	bf94      	ite	ls
 800aba8:	2100      	movls	r1, #0
 800abaa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800abae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800abb2:	fa02 f003 	lsl.w	r0, r2, r3
 800abb6:	40f9      	lsrs	r1, r7
 800abb8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800abbc:	ea40 0401 	orr.w	r4, r0, r1
 800abc0:	e7da      	b.n	800ab78 <__b2d+0x50>
 800abc2:	4614      	mov	r4, r2
 800abc4:	ea46 0501 	orr.w	r5, r6, r1
 800abc8:	e7d6      	b.n	800ab78 <__b2d+0x50>
 800abca:	bf00      	nop
 800abcc:	3ff00000 	.word	0x3ff00000

0800abd0 <__d2b>:
 800abd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800abd4:	2101      	movs	r1, #1
 800abd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800abda:	4690      	mov	r8, r2
 800abdc:	461d      	mov	r5, r3
 800abde:	f7ff fc0d 	bl	800a3fc <_Balloc>
 800abe2:	4604      	mov	r4, r0
 800abe4:	b930      	cbnz	r0, 800abf4 <__d2b+0x24>
 800abe6:	4602      	mov	r2, r0
 800abe8:	f240 310a 	movw	r1, #778	; 0x30a
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__d2b+0xb0>)
 800abee:	4825      	ldr	r0, [pc, #148]	; (800ac84 <__d2b+0xb4>)
 800abf0:	f000 fa54 	bl	800b09c <__assert_func>
 800abf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800abf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800abfc:	bb2d      	cbnz	r5, 800ac4a <__d2b+0x7a>
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	f1b8 0300 	subs.w	r3, r8, #0
 800ac04:	d026      	beq.n	800ac54 <__d2b+0x84>
 800ac06:	4668      	mov	r0, sp
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	f7ff fd09 	bl	800a620 <__lo0bits>
 800ac0e:	9900      	ldr	r1, [sp, #0]
 800ac10:	b1f0      	cbz	r0, 800ac50 <__d2b+0x80>
 800ac12:	9a01      	ldr	r2, [sp, #4]
 800ac14:	f1c0 0320 	rsb	r3, r0, #32
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	40c2      	lsrs	r2, r0
 800ac20:	6163      	str	r3, [r4, #20]
 800ac22:	9201      	str	r2, [sp, #4]
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2102      	movne	r1, #2
 800ac2c:	2101      	moveq	r1, #1
 800ac2e:	61a3      	str	r3, [r4, #24]
 800ac30:	6121      	str	r1, [r4, #16]
 800ac32:	b1c5      	cbz	r5, 800ac66 <__d2b+0x96>
 800ac34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac38:	4405      	add	r5, r0
 800ac3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac3e:	603d      	str	r5, [r7, #0]
 800ac40:	6030      	str	r0, [r6, #0]
 800ac42:	4620      	mov	r0, r4
 800ac44:	b002      	add	sp, #8
 800ac46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac4e:	e7d6      	b.n	800abfe <__d2b+0x2e>
 800ac50:	6161      	str	r1, [r4, #20]
 800ac52:	e7e7      	b.n	800ac24 <__d2b+0x54>
 800ac54:	a801      	add	r0, sp, #4
 800ac56:	f7ff fce3 	bl	800a620 <__lo0bits>
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	6121      	str	r1, [r4, #16]
 800ac60:	6163      	str	r3, [r4, #20]
 800ac62:	3020      	adds	r0, #32
 800ac64:	e7e5      	b.n	800ac32 <__d2b+0x62>
 800ac66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ac6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac6e:	6038      	str	r0, [r7, #0]
 800ac70:	6918      	ldr	r0, [r3, #16]
 800ac72:	f7ff fcb5 	bl	800a5e0 <__hi0bits>
 800ac76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ac7a:	6031      	str	r1, [r6, #0]
 800ac7c:	e7e1      	b.n	800ac42 <__d2b+0x72>
 800ac7e:	bf00      	nop
 800ac80:	0800bea0 	.word	0x0800bea0
 800ac84:	0800bf2c 	.word	0x0800bf2c

0800ac88 <__ratio>:
 800ac88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4688      	mov	r8, r1
 800ac8e:	4669      	mov	r1, sp
 800ac90:	4681      	mov	r9, r0
 800ac92:	f7ff ff49 	bl	800ab28 <__b2d>
 800ac96:	460f      	mov	r7, r1
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	a901      	add	r1, sp, #4
 800aca0:	f7ff ff42 	bl	800ab28 <__b2d>
 800aca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800acac:	468b      	mov	fp, r1
 800acae:	eba3 0c02 	sub.w	ip, r3, r2
 800acb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfd5      	itete	le
 800acc0:	460a      	movle	r2, r1
 800acc2:	462a      	movgt	r2, r5
 800acc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acc8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800accc:	bfd8      	it	le
 800acce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800acd2:	465b      	mov	r3, fp
 800acd4:	4602      	mov	r2, r0
 800acd6:	4639      	mov	r1, r7
 800acd8:	4620      	mov	r0, r4
 800acda:	f7f5 fd63 	bl	80007a4 <__aeabi_ddiv>
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ace4 <__copybits>:
 800ace4:	3901      	subs	r1, #1
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	1149      	asrs	r1, r1, #5
 800acea:	6914      	ldr	r4, [r2, #16]
 800acec:	3101      	adds	r1, #1
 800acee:	f102 0314 	add.w	r3, r2, #20
 800acf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acfa:	1f05      	subs	r5, r0, #4
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	d30c      	bcc.n	800ad1a <__copybits+0x36>
 800ad00:	1aa3      	subs	r3, r4, r2
 800ad02:	3b11      	subs	r3, #17
 800ad04:	f023 0303 	bic.w	r3, r3, #3
 800ad08:	3211      	adds	r2, #17
 800ad0a:	42a2      	cmp	r2, r4
 800ad0c:	bf88      	it	hi
 800ad0e:	2300      	movhi	r3, #0
 800ad10:	4418      	add	r0, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	4288      	cmp	r0, r1
 800ad16:	d305      	bcc.n	800ad24 <__copybits+0x40>
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad22:	e7eb      	b.n	800acfc <__copybits+0x18>
 800ad24:	f840 3b04 	str.w	r3, [r0], #4
 800ad28:	e7f4      	b.n	800ad14 <__copybits+0x30>

0800ad2a <__any_on>:
 800ad2a:	f100 0214 	add.w	r2, r0, #20
 800ad2e:	6900      	ldr	r0, [r0, #16]
 800ad30:	114b      	asrs	r3, r1, #5
 800ad32:	4298      	cmp	r0, r3
 800ad34:	b510      	push	{r4, lr}
 800ad36:	db11      	blt.n	800ad5c <__any_on+0x32>
 800ad38:	dd0a      	ble.n	800ad50 <__any_on+0x26>
 800ad3a:	f011 011f 	ands.w	r1, r1, #31
 800ad3e:	d007      	beq.n	800ad50 <__any_on+0x26>
 800ad40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad44:	fa24 f001 	lsr.w	r0, r4, r1
 800ad48:	fa00 f101 	lsl.w	r1, r0, r1
 800ad4c:	428c      	cmp	r4, r1
 800ad4e:	d10b      	bne.n	800ad68 <__any_on+0x3e>
 800ad50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d803      	bhi.n	800ad60 <__any_on+0x36>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	bd10      	pop	{r4, pc}
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	e7f7      	b.n	800ad50 <__any_on+0x26>
 800ad60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d0f5      	beq.n	800ad54 <__any_on+0x2a>
 800ad68:	2001      	movs	r0, #1
 800ad6a:	e7f6      	b.n	800ad5a <__any_on+0x30>

0800ad6c <_calloc_r>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	fba1 5402 	umull	r5, r4, r1, r2
 800ad72:	b934      	cbnz	r4, 800ad82 <_calloc_r+0x16>
 800ad74:	4629      	mov	r1, r5
 800ad76:	f7fc fb43 	bl	8007400 <_malloc_r>
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	b928      	cbnz	r0, 800ad8a <_calloc_r+0x1e>
 800ad7e:	4630      	mov	r0, r6
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
 800ad82:	220c      	movs	r2, #12
 800ad84:	2600      	movs	r6, #0
 800ad86:	6002      	str	r2, [r0, #0]
 800ad88:	e7f9      	b.n	800ad7e <_calloc_r+0x12>
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f7fc fac7 	bl	8007320 <memset>
 800ad92:	e7f4      	b.n	800ad7e <_calloc_r+0x12>

0800ad94 <__ssputs_r>:
 800ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	688e      	ldr	r6, [r1, #8]
 800ad9a:	4682      	mov	sl, r0
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	460c      	mov	r4, r1
 800ada0:	4690      	mov	r8, r2
 800ada2:	461f      	mov	r7, r3
 800ada4:	d838      	bhi.n	800ae18 <__ssputs_r+0x84>
 800ada6:	898a      	ldrh	r2, [r1, #12]
 800ada8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adac:	d032      	beq.n	800ae14 <__ssputs_r+0x80>
 800adae:	6825      	ldr	r5, [r4, #0]
 800adb0:	6909      	ldr	r1, [r1, #16]
 800adb2:	3301      	adds	r3, #1
 800adb4:	eba5 0901 	sub.w	r9, r5, r1
 800adb8:	6965      	ldr	r5, [r4, #20]
 800adba:	444b      	add	r3, r9
 800adbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adc4:	106d      	asrs	r5, r5, #1
 800adc6:	429d      	cmp	r5, r3
 800adc8:	bf38      	it	cc
 800adca:	461d      	movcc	r5, r3
 800adcc:	0553      	lsls	r3, r2, #21
 800adce:	d531      	bpl.n	800ae34 <__ssputs_r+0xa0>
 800add0:	4629      	mov	r1, r5
 800add2:	f7fc fb15 	bl	8007400 <_malloc_r>
 800add6:	4606      	mov	r6, r0
 800add8:	b950      	cbnz	r0, 800adf0 <__ssputs_r+0x5c>
 800adda:	230c      	movs	r3, #12
 800addc:	f04f 30ff 	mov.w	r0, #4294967295
 800ade0:	f8ca 3000 	str.w	r3, [sl]
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf0:	464a      	mov	r2, r9
 800adf2:	6921      	ldr	r1, [r4, #16]
 800adf4:	f7ff fae8 	bl	800a3c8 <memcpy>
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	6126      	str	r6, [r4, #16]
 800ae06:	444e      	add	r6, r9
 800ae08:	6026      	str	r6, [r4, #0]
 800ae0a:	463e      	mov	r6, r7
 800ae0c:	6165      	str	r5, [r4, #20]
 800ae0e:	eba5 0509 	sub.w	r5, r5, r9
 800ae12:	60a5      	str	r5, [r4, #8]
 800ae14:	42be      	cmp	r6, r7
 800ae16:	d900      	bls.n	800ae1a <__ssputs_r+0x86>
 800ae18:	463e      	mov	r6, r7
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	4641      	mov	r1, r8
 800ae1e:	6820      	ldr	r0, [r4, #0]
 800ae20:	f000 f96f 	bl	800b102 <memmove>
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	2000      	movs	r0, #0
 800ae28:	1b9b      	subs	r3, r3, r6
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	4433      	add	r3, r6
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	e7db      	b.n	800adec <__ssputs_r+0x58>
 800ae34:	462a      	mov	r2, r5
 800ae36:	f000 f97e 	bl	800b136 <_realloc_r>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d1e1      	bne.n	800ae04 <__ssputs_r+0x70>
 800ae40:	4650      	mov	r0, sl
 800ae42:	6921      	ldr	r1, [r4, #16]
 800ae44:	f7fc fa74 	bl	8007330 <_free_r>
 800ae48:	e7c7      	b.n	800adda <__ssputs_r+0x46>
	...

0800ae4c <_svfiprintf_r>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	4698      	mov	r8, r3
 800ae52:	898b      	ldrh	r3, [r1, #12]
 800ae54:	4607      	mov	r7, r0
 800ae56:	061b      	lsls	r3, r3, #24
 800ae58:	460d      	mov	r5, r1
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	b09d      	sub	sp, #116	; 0x74
 800ae5e:	d50e      	bpl.n	800ae7e <_svfiprintf_r+0x32>
 800ae60:	690b      	ldr	r3, [r1, #16]
 800ae62:	b963      	cbnz	r3, 800ae7e <_svfiprintf_r+0x32>
 800ae64:	2140      	movs	r1, #64	; 0x40
 800ae66:	f7fc facb 	bl	8007400 <_malloc_r>
 800ae6a:	6028      	str	r0, [r5, #0]
 800ae6c:	6128      	str	r0, [r5, #16]
 800ae6e:	b920      	cbnz	r0, 800ae7a <_svfiprintf_r+0x2e>
 800ae70:	230c      	movs	r3, #12
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e0d1      	b.n	800b01e <_svfiprintf_r+0x1d2>
 800ae7a:	2340      	movs	r3, #64	; 0x40
 800ae7c:	616b      	str	r3, [r5, #20]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9309      	str	r3, [sp, #36]	; 0x24
 800ae82:	2320      	movs	r3, #32
 800ae84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae88:	2330      	movs	r3, #48	; 0x30
 800ae8a:	f04f 0901 	mov.w	r9, #1
 800ae8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b038 <_svfiprintf_r+0x1ec>
 800ae96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	469a      	mov	sl, r3
 800ae9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea2:	b10a      	cbz	r2, 800aea8 <_svfiprintf_r+0x5c>
 800aea4:	2a25      	cmp	r2, #37	; 0x25
 800aea6:	d1f9      	bne.n	800ae9c <_svfiprintf_r+0x50>
 800aea8:	ebba 0b04 	subs.w	fp, sl, r4
 800aeac:	d00b      	beq.n	800aec6 <_svfiprintf_r+0x7a>
 800aeae:	465b      	mov	r3, fp
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ff6d 	bl	800ad94 <__ssputs_r>
 800aeba:	3001      	adds	r0, #1
 800aebc:	f000 80aa 	beq.w	800b014 <_svfiprintf_r+0x1c8>
 800aec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec2:	445a      	add	r2, fp
 800aec4:	9209      	str	r2, [sp, #36]	; 0x24
 800aec6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80a2 	beq.w	800b014 <_svfiprintf_r+0x1c8>
 800aed0:	2300      	movs	r3, #0
 800aed2:	f04f 32ff 	mov.w	r2, #4294967295
 800aed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeda:	f10a 0a01 	add.w	sl, sl, #1
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee6:	931a      	str	r3, [sp, #104]	; 0x68
 800aee8:	4654      	mov	r4, sl
 800aeea:	2205      	movs	r2, #5
 800aeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef0:	4851      	ldr	r0, [pc, #324]	; (800b038 <_svfiprintf_r+0x1ec>)
 800aef2:	f7ff fa5b 	bl	800a3ac <memchr>
 800aef6:	9a04      	ldr	r2, [sp, #16]
 800aef8:	b9d8      	cbnz	r0, 800af32 <_svfiprintf_r+0xe6>
 800aefa:	06d0      	lsls	r0, r2, #27
 800aefc:	bf44      	itt	mi
 800aefe:	2320      	movmi	r3, #32
 800af00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af04:	0711      	lsls	r1, r2, #28
 800af06:	bf44      	itt	mi
 800af08:	232b      	movmi	r3, #43	; 0x2b
 800af0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0e:	f89a 3000 	ldrb.w	r3, [sl]
 800af12:	2b2a      	cmp	r3, #42	; 0x2a
 800af14:	d015      	beq.n	800af42 <_svfiprintf_r+0xf6>
 800af16:	4654      	mov	r4, sl
 800af18:	2000      	movs	r0, #0
 800af1a:	f04f 0c0a 	mov.w	ip, #10
 800af1e:	9a07      	ldr	r2, [sp, #28]
 800af20:	4621      	mov	r1, r4
 800af22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af26:	3b30      	subs	r3, #48	; 0x30
 800af28:	2b09      	cmp	r3, #9
 800af2a:	d94e      	bls.n	800afca <_svfiprintf_r+0x17e>
 800af2c:	b1b0      	cbz	r0, 800af5c <_svfiprintf_r+0x110>
 800af2e:	9207      	str	r2, [sp, #28]
 800af30:	e014      	b.n	800af5c <_svfiprintf_r+0x110>
 800af32:	eba0 0308 	sub.w	r3, r0, r8
 800af36:	fa09 f303 	lsl.w	r3, r9, r3
 800af3a:	4313      	orrs	r3, r2
 800af3c:	46a2      	mov	sl, r4
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	e7d2      	b.n	800aee8 <_svfiprintf_r+0x9c>
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	9103      	str	r1, [sp, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfbb      	ittet	lt
 800af4e:	425b      	neglt	r3, r3
 800af50:	f042 0202 	orrlt.w	r2, r2, #2
 800af54:	9307      	strge	r3, [sp, #28]
 800af56:	9307      	strlt	r3, [sp, #28]
 800af58:	bfb8      	it	lt
 800af5a:	9204      	strlt	r2, [sp, #16]
 800af5c:	7823      	ldrb	r3, [r4, #0]
 800af5e:	2b2e      	cmp	r3, #46	; 0x2e
 800af60:	d10c      	bne.n	800af7c <_svfiprintf_r+0x130>
 800af62:	7863      	ldrb	r3, [r4, #1]
 800af64:	2b2a      	cmp	r3, #42	; 0x2a
 800af66:	d135      	bne.n	800afd4 <_svfiprintf_r+0x188>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	3402      	adds	r4, #2
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	9203      	str	r2, [sp, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfb8      	it	lt
 800af76:	f04f 33ff 	movlt.w	r3, #4294967295
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b03c <_svfiprintf_r+0x1f0>
 800af80:	2203      	movs	r2, #3
 800af82:	4650      	mov	r0, sl
 800af84:	7821      	ldrb	r1, [r4, #0]
 800af86:	f7ff fa11 	bl	800a3ac <memchr>
 800af8a:	b140      	cbz	r0, 800af9e <_svfiprintf_r+0x152>
 800af8c:	2340      	movs	r3, #64	; 0x40
 800af8e:	eba0 000a 	sub.w	r0, r0, sl
 800af92:	fa03 f000 	lsl.w	r0, r3, r0
 800af96:	9b04      	ldr	r3, [sp, #16]
 800af98:	3401      	adds	r4, #1
 800af9a:	4303      	orrs	r3, r0
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa2:	2206      	movs	r2, #6
 800afa4:	4826      	ldr	r0, [pc, #152]	; (800b040 <_svfiprintf_r+0x1f4>)
 800afa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afaa:	f7ff f9ff 	bl	800a3ac <memchr>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d038      	beq.n	800b024 <_svfiprintf_r+0x1d8>
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <_svfiprintf_r+0x1f8>)
 800afb4:	bb1b      	cbnz	r3, 800affe <_svfiprintf_r+0x1b2>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	3307      	adds	r3, #7
 800afba:	f023 0307 	bic.w	r3, r3, #7
 800afbe:	3308      	adds	r3, #8
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc4:	4433      	add	r3, r6
 800afc6:	9309      	str	r3, [sp, #36]	; 0x24
 800afc8:	e767      	b.n	800ae9a <_svfiprintf_r+0x4e>
 800afca:	460c      	mov	r4, r1
 800afcc:	2001      	movs	r0, #1
 800afce:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd2:	e7a5      	b.n	800af20 <_svfiprintf_r+0xd4>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f04f 0c0a 	mov.w	ip, #10
 800afda:	4619      	mov	r1, r3
 800afdc:	3401      	adds	r4, #1
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	4620      	mov	r0, r4
 800afe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe6:	3a30      	subs	r2, #48	; 0x30
 800afe8:	2a09      	cmp	r2, #9
 800afea:	d903      	bls.n	800aff4 <_svfiprintf_r+0x1a8>
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0c5      	beq.n	800af7c <_svfiprintf_r+0x130>
 800aff0:	9105      	str	r1, [sp, #20]
 800aff2:	e7c3      	b.n	800af7c <_svfiprintf_r+0x130>
 800aff4:	4604      	mov	r4, r0
 800aff6:	2301      	movs	r3, #1
 800aff8:	fb0c 2101 	mla	r1, ip, r1, r2
 800affc:	e7f0      	b.n	800afe0 <_svfiprintf_r+0x194>
 800affe:	ab03      	add	r3, sp, #12
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	462a      	mov	r2, r5
 800b004:	4638      	mov	r0, r7
 800b006:	4b10      	ldr	r3, [pc, #64]	; (800b048 <_svfiprintf_r+0x1fc>)
 800b008:	a904      	add	r1, sp, #16
 800b00a:	f7fc fb0b 	bl	8007624 <_printf_float>
 800b00e:	1c42      	adds	r2, r0, #1
 800b010:	4606      	mov	r6, r0
 800b012:	d1d6      	bne.n	800afc2 <_svfiprintf_r+0x176>
 800b014:	89ab      	ldrh	r3, [r5, #12]
 800b016:	065b      	lsls	r3, r3, #25
 800b018:	f53f af2c 	bmi.w	800ae74 <_svfiprintf_r+0x28>
 800b01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b01e:	b01d      	add	sp, #116	; 0x74
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	ab03      	add	r3, sp, #12
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	462a      	mov	r2, r5
 800b02a:	4638      	mov	r0, r7
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <_svfiprintf_r+0x1fc>)
 800b02e:	a904      	add	r1, sp, #16
 800b030:	f7fc fd94 	bl	8007b5c <_printf_i>
 800b034:	e7eb      	b.n	800b00e <_svfiprintf_r+0x1c2>
 800b036:	bf00      	nop
 800b038:	0800c084 	.word	0x0800c084
 800b03c:	0800c08a 	.word	0x0800c08a
 800b040:	0800c08e 	.word	0x0800c08e
 800b044:	08007625 	.word	0x08007625
 800b048:	0800ad95 	.word	0x0800ad95

0800b04c <nan>:
 800b04c:	2000      	movs	r0, #0
 800b04e:	4901      	ldr	r1, [pc, #4]	; (800b054 <nan+0x8>)
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	7ff80000 	.word	0x7ff80000

0800b058 <strncmp>:
 800b058:	4603      	mov	r3, r0
 800b05a:	b510      	push	{r4, lr}
 800b05c:	b172      	cbz	r2, 800b07c <strncmp+0x24>
 800b05e:	3901      	subs	r1, #1
 800b060:	1884      	adds	r4, r0, r2
 800b062:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b06a:	4290      	cmp	r0, r2
 800b06c:	d101      	bne.n	800b072 <strncmp+0x1a>
 800b06e:	42a3      	cmp	r3, r4
 800b070:	d101      	bne.n	800b076 <strncmp+0x1e>
 800b072:	1a80      	subs	r0, r0, r2
 800b074:	bd10      	pop	{r4, pc}
 800b076:	2800      	cmp	r0, #0
 800b078:	d1f3      	bne.n	800b062 <strncmp+0xa>
 800b07a:	e7fa      	b.n	800b072 <strncmp+0x1a>
 800b07c:	4610      	mov	r0, r2
 800b07e:	e7f9      	b.n	800b074 <strncmp+0x1c>

0800b080 <__ascii_wctomb>:
 800b080:	4603      	mov	r3, r0
 800b082:	4608      	mov	r0, r1
 800b084:	b141      	cbz	r1, 800b098 <__ascii_wctomb+0x18>
 800b086:	2aff      	cmp	r2, #255	; 0xff
 800b088:	d904      	bls.n	800b094 <__ascii_wctomb+0x14>
 800b08a:	228a      	movs	r2, #138	; 0x8a
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	4770      	bx	lr
 800b094:	2001      	movs	r0, #1
 800b096:	700a      	strb	r2, [r1, #0]
 800b098:	4770      	bx	lr
	...

0800b09c <__assert_func>:
 800b09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b09e:	4614      	mov	r4, r2
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <__assert_func+0x2c>)
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68d8      	ldr	r0, [r3, #12]
 800b0aa:	b14c      	cbz	r4, 800b0c0 <__assert_func+0x24>
 800b0ac:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <__assert_func+0x30>)
 800b0ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0b2:	9100      	str	r1, [sp, #0]
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	4906      	ldr	r1, [pc, #24]	; (800b0d0 <__assert_func+0x34>)
 800b0b8:	f000 f80e 	bl	800b0d8 <fiprintf>
 800b0bc:	f000 fa82 	bl	800b5c4 <abort>
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <__assert_func+0x38>)
 800b0c2:	461c      	mov	r4, r3
 800b0c4:	e7f3      	b.n	800b0ae <__assert_func+0x12>
 800b0c6:	bf00      	nop
 800b0c8:	200001a8 	.word	0x200001a8
 800b0cc:	0800c095 	.word	0x0800c095
 800b0d0:	0800c0a2 	.word	0x0800c0a2
 800b0d4:	0800c0d0 	.word	0x0800c0d0

0800b0d8 <fiprintf>:
 800b0d8:	b40e      	push	{r1, r2, r3}
 800b0da:	b503      	push	{r0, r1, lr}
 800b0dc:	4601      	mov	r1, r0
 800b0de:	ab03      	add	r3, sp, #12
 800b0e0:	4805      	ldr	r0, [pc, #20]	; (800b0f8 <fiprintf+0x20>)
 800b0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e6:	6800      	ldr	r0, [r0, #0]
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	f000 f87b 	bl	800b1e4 <_vfiprintf_r>
 800b0ee:	b002      	add	sp, #8
 800b0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f4:	b003      	add	sp, #12
 800b0f6:	4770      	bx	lr
 800b0f8:	200001a8 	.word	0x200001a8

0800b0fc <__retarget_lock_init_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_acquire_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <__retarget_lock_release_recursive>:
 800b100:	4770      	bx	lr

0800b102 <memmove>:
 800b102:	4288      	cmp	r0, r1
 800b104:	b510      	push	{r4, lr}
 800b106:	eb01 0402 	add.w	r4, r1, r2
 800b10a:	d902      	bls.n	800b112 <memmove+0x10>
 800b10c:	4284      	cmp	r4, r0
 800b10e:	4623      	mov	r3, r4
 800b110:	d807      	bhi.n	800b122 <memmove+0x20>
 800b112:	1e43      	subs	r3, r0, #1
 800b114:	42a1      	cmp	r1, r4
 800b116:	d008      	beq.n	800b12a <memmove+0x28>
 800b118:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b11c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b120:	e7f8      	b.n	800b114 <memmove+0x12>
 800b122:	4601      	mov	r1, r0
 800b124:	4402      	add	r2, r0
 800b126:	428a      	cmp	r2, r1
 800b128:	d100      	bne.n	800b12c <memmove+0x2a>
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b130:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b134:	e7f7      	b.n	800b126 <memmove+0x24>

0800b136 <_realloc_r>:
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	4680      	mov	r8, r0
 800b13c:	4614      	mov	r4, r2
 800b13e:	460e      	mov	r6, r1
 800b140:	b921      	cbnz	r1, 800b14c <_realloc_r+0x16>
 800b142:	4611      	mov	r1, r2
 800b144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b148:	f7fc b95a 	b.w	8007400 <_malloc_r>
 800b14c:	b92a      	cbnz	r2, 800b15a <_realloc_r+0x24>
 800b14e:	f7fc f8ef 	bl	8007330 <_free_r>
 800b152:	4625      	mov	r5, r4
 800b154:	4628      	mov	r0, r5
 800b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15a:	f000 fc53 	bl	800ba04 <_malloc_usable_size_r>
 800b15e:	4284      	cmp	r4, r0
 800b160:	4607      	mov	r7, r0
 800b162:	d802      	bhi.n	800b16a <_realloc_r+0x34>
 800b164:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b168:	d812      	bhi.n	800b190 <_realloc_r+0x5a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4640      	mov	r0, r8
 800b16e:	f7fc f947 	bl	8007400 <_malloc_r>
 800b172:	4605      	mov	r5, r0
 800b174:	2800      	cmp	r0, #0
 800b176:	d0ed      	beq.n	800b154 <_realloc_r+0x1e>
 800b178:	42bc      	cmp	r4, r7
 800b17a:	4622      	mov	r2, r4
 800b17c:	4631      	mov	r1, r6
 800b17e:	bf28      	it	cs
 800b180:	463a      	movcs	r2, r7
 800b182:	f7ff f921 	bl	800a3c8 <memcpy>
 800b186:	4631      	mov	r1, r6
 800b188:	4640      	mov	r0, r8
 800b18a:	f7fc f8d1 	bl	8007330 <_free_r>
 800b18e:	e7e1      	b.n	800b154 <_realloc_r+0x1e>
 800b190:	4635      	mov	r5, r6
 800b192:	e7df      	b.n	800b154 <_realloc_r+0x1e>

0800b194 <__sfputc_r>:
 800b194:	6893      	ldr	r3, [r2, #8]
 800b196:	b410      	push	{r4}
 800b198:	3b01      	subs	r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	6093      	str	r3, [r2, #8]
 800b19e:	da07      	bge.n	800b1b0 <__sfputc_r+0x1c>
 800b1a0:	6994      	ldr	r4, [r2, #24]
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	db01      	blt.n	800b1aa <__sfputc_r+0x16>
 800b1a6:	290a      	cmp	r1, #10
 800b1a8:	d102      	bne.n	800b1b0 <__sfputc_r+0x1c>
 800b1aa:	bc10      	pop	{r4}
 800b1ac:	f000 b94a 	b.w	800b444 <__swbuf_r>
 800b1b0:	6813      	ldr	r3, [r2, #0]
 800b1b2:	1c58      	adds	r0, r3, #1
 800b1b4:	6010      	str	r0, [r2, #0]
 800b1b6:	7019      	strb	r1, [r3, #0]
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	bc10      	pop	{r4}
 800b1bc:	4770      	bx	lr

0800b1be <__sfputs_r>:
 800b1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	460f      	mov	r7, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	18d5      	adds	r5, r2, r3
 800b1c8:	42ac      	cmp	r4, r5
 800b1ca:	d101      	bne.n	800b1d0 <__sfputs_r+0x12>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e007      	b.n	800b1e0 <__sfputs_r+0x22>
 800b1d0:	463a      	mov	r2, r7
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d8:	f7ff ffdc 	bl	800b194 <__sfputc_r>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d1f3      	bne.n	800b1c8 <__sfputs_r+0xa>
 800b1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1e4 <_vfiprintf_r>:
 800b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	4614      	mov	r4, r2
 800b1ec:	4698      	mov	r8, r3
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	b09d      	sub	sp, #116	; 0x74
 800b1f2:	b118      	cbz	r0, 800b1fc <_vfiprintf_r+0x18>
 800b1f4:	6983      	ldr	r3, [r0, #24]
 800b1f6:	b90b      	cbnz	r3, 800b1fc <_vfiprintf_r+0x18>
 800b1f8:	f000 fb02 	bl	800b800 <__sinit>
 800b1fc:	4b89      	ldr	r3, [pc, #548]	; (800b424 <_vfiprintf_r+0x240>)
 800b1fe:	429d      	cmp	r5, r3
 800b200:	d11b      	bne.n	800b23a <_vfiprintf_r+0x56>
 800b202:	6875      	ldr	r5, [r6, #4]
 800b204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b206:	07d9      	lsls	r1, r3, #31
 800b208:	d405      	bmi.n	800b216 <_vfiprintf_r+0x32>
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	059a      	lsls	r2, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_vfiprintf_r+0x32>
 800b210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b212:	f7ff ff74 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	071b      	lsls	r3, r3, #28
 800b21a:	d501      	bpl.n	800b220 <_vfiprintf_r+0x3c>
 800b21c:	692b      	ldr	r3, [r5, #16]
 800b21e:	b9eb      	cbnz	r3, 800b25c <_vfiprintf_r+0x78>
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f960 	bl	800b4e8 <__swsetup_r>
 800b228:	b1c0      	cbz	r0, 800b25c <_vfiprintf_r+0x78>
 800b22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b22c:	07dc      	lsls	r4, r3, #31
 800b22e:	d50e      	bpl.n	800b24e <_vfiprintf_r+0x6a>
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	b01d      	add	sp, #116	; 0x74
 800b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23a:	4b7b      	ldr	r3, [pc, #492]	; (800b428 <_vfiprintf_r+0x244>)
 800b23c:	429d      	cmp	r5, r3
 800b23e:	d101      	bne.n	800b244 <_vfiprintf_r+0x60>
 800b240:	68b5      	ldr	r5, [r6, #8]
 800b242:	e7df      	b.n	800b204 <_vfiprintf_r+0x20>
 800b244:	4b79      	ldr	r3, [pc, #484]	; (800b42c <_vfiprintf_r+0x248>)
 800b246:	429d      	cmp	r5, r3
 800b248:	bf08      	it	eq
 800b24a:	68f5      	ldreq	r5, [r6, #12]
 800b24c:	e7da      	b.n	800b204 <_vfiprintf_r+0x20>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	0598      	lsls	r0, r3, #22
 800b252:	d4ed      	bmi.n	800b230 <_vfiprintf_r+0x4c>
 800b254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b256:	f7ff ff53 	bl	800b100 <__retarget_lock_release_recursive>
 800b25a:	e7e9      	b.n	800b230 <_vfiprintf_r+0x4c>
 800b25c:	2300      	movs	r3, #0
 800b25e:	9309      	str	r3, [sp, #36]	; 0x24
 800b260:	2320      	movs	r3, #32
 800b262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b266:	2330      	movs	r3, #48	; 0x30
 800b268:	f04f 0901 	mov.w	r9, #1
 800b26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b270:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b430 <_vfiprintf_r+0x24c>
 800b274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b278:	4623      	mov	r3, r4
 800b27a:	469a      	mov	sl, r3
 800b27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b280:	b10a      	cbz	r2, 800b286 <_vfiprintf_r+0xa2>
 800b282:	2a25      	cmp	r2, #37	; 0x25
 800b284:	d1f9      	bne.n	800b27a <_vfiprintf_r+0x96>
 800b286:	ebba 0b04 	subs.w	fp, sl, r4
 800b28a:	d00b      	beq.n	800b2a4 <_vfiprintf_r+0xc0>
 800b28c:	465b      	mov	r3, fp
 800b28e:	4622      	mov	r2, r4
 800b290:	4629      	mov	r1, r5
 800b292:	4630      	mov	r0, r6
 800b294:	f7ff ff93 	bl	800b1be <__sfputs_r>
 800b298:	3001      	adds	r0, #1
 800b29a:	f000 80aa 	beq.w	800b3f2 <_vfiprintf_r+0x20e>
 800b29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a0:	445a      	add	r2, fp
 800b2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 80a2 	beq.w	800b3f2 <_vfiprintf_r+0x20e>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2b8:	f10a 0a01 	add.w	sl, sl, #1
 800b2bc:	9304      	str	r3, [sp, #16]
 800b2be:	9307      	str	r3, [sp, #28]
 800b2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2c6:	4654      	mov	r4, sl
 800b2c8:	2205      	movs	r2, #5
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	4858      	ldr	r0, [pc, #352]	; (800b430 <_vfiprintf_r+0x24c>)
 800b2d0:	f7ff f86c 	bl	800a3ac <memchr>
 800b2d4:	9a04      	ldr	r2, [sp, #16]
 800b2d6:	b9d8      	cbnz	r0, 800b310 <_vfiprintf_r+0x12c>
 800b2d8:	06d1      	lsls	r1, r2, #27
 800b2da:	bf44      	itt	mi
 800b2dc:	2320      	movmi	r3, #32
 800b2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e2:	0713      	lsls	r3, r2, #28
 800b2e4:	bf44      	itt	mi
 800b2e6:	232b      	movmi	r3, #43	; 0x2b
 800b2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f2:	d015      	beq.n	800b320 <_vfiprintf_r+0x13c>
 800b2f4:	4654      	mov	r4, sl
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f04f 0c0a 	mov.w	ip, #10
 800b2fc:	9a07      	ldr	r2, [sp, #28]
 800b2fe:	4621      	mov	r1, r4
 800b300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b304:	3b30      	subs	r3, #48	; 0x30
 800b306:	2b09      	cmp	r3, #9
 800b308:	d94e      	bls.n	800b3a8 <_vfiprintf_r+0x1c4>
 800b30a:	b1b0      	cbz	r0, 800b33a <_vfiprintf_r+0x156>
 800b30c:	9207      	str	r2, [sp, #28]
 800b30e:	e014      	b.n	800b33a <_vfiprintf_r+0x156>
 800b310:	eba0 0308 	sub.w	r3, r0, r8
 800b314:	fa09 f303 	lsl.w	r3, r9, r3
 800b318:	4313      	orrs	r3, r2
 800b31a:	46a2      	mov	sl, r4
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	e7d2      	b.n	800b2c6 <_vfiprintf_r+0xe2>
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	1d19      	adds	r1, r3, #4
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	9103      	str	r1, [sp, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bfbb      	ittet	lt
 800b32c:	425b      	neglt	r3, r3
 800b32e:	f042 0202 	orrlt.w	r2, r2, #2
 800b332:	9307      	strge	r3, [sp, #28]
 800b334:	9307      	strlt	r3, [sp, #28]
 800b336:	bfb8      	it	lt
 800b338:	9204      	strlt	r2, [sp, #16]
 800b33a:	7823      	ldrb	r3, [r4, #0]
 800b33c:	2b2e      	cmp	r3, #46	; 0x2e
 800b33e:	d10c      	bne.n	800b35a <_vfiprintf_r+0x176>
 800b340:	7863      	ldrb	r3, [r4, #1]
 800b342:	2b2a      	cmp	r3, #42	; 0x2a
 800b344:	d135      	bne.n	800b3b2 <_vfiprintf_r+0x1ce>
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	3402      	adds	r4, #2
 800b34a:	1d1a      	adds	r2, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	9203      	str	r2, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfb8      	it	lt
 800b354:	f04f 33ff 	movlt.w	r3, #4294967295
 800b358:	9305      	str	r3, [sp, #20]
 800b35a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b434 <_vfiprintf_r+0x250>
 800b35e:	2203      	movs	r2, #3
 800b360:	4650      	mov	r0, sl
 800b362:	7821      	ldrb	r1, [r4, #0]
 800b364:	f7ff f822 	bl	800a3ac <memchr>
 800b368:	b140      	cbz	r0, 800b37c <_vfiprintf_r+0x198>
 800b36a:	2340      	movs	r3, #64	; 0x40
 800b36c:	eba0 000a 	sub.w	r0, r0, sl
 800b370:	fa03 f000 	lsl.w	r0, r3, r0
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	3401      	adds	r4, #1
 800b378:	4303      	orrs	r3, r0
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b380:	2206      	movs	r2, #6
 800b382:	482d      	ldr	r0, [pc, #180]	; (800b438 <_vfiprintf_r+0x254>)
 800b384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b388:	f7ff f810 	bl	800a3ac <memchr>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d03f      	beq.n	800b410 <_vfiprintf_r+0x22c>
 800b390:	4b2a      	ldr	r3, [pc, #168]	; (800b43c <_vfiprintf_r+0x258>)
 800b392:	bb1b      	cbnz	r3, 800b3dc <_vfiprintf_r+0x1f8>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	3307      	adds	r3, #7
 800b398:	f023 0307 	bic.w	r3, r3, #7
 800b39c:	3308      	adds	r3, #8
 800b39e:	9303      	str	r3, [sp, #12]
 800b3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a2:	443b      	add	r3, r7
 800b3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a6:	e767      	b.n	800b278 <_vfiprintf_r+0x94>
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	2001      	movs	r0, #1
 800b3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3b0:	e7a5      	b.n	800b2fe <_vfiprintf_r+0x11a>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f04f 0c0a 	mov.w	ip, #10
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	3401      	adds	r4, #1
 800b3bc:	9305      	str	r3, [sp, #20]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3c4:	3a30      	subs	r2, #48	; 0x30
 800b3c6:	2a09      	cmp	r2, #9
 800b3c8:	d903      	bls.n	800b3d2 <_vfiprintf_r+0x1ee>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0c5      	beq.n	800b35a <_vfiprintf_r+0x176>
 800b3ce:	9105      	str	r1, [sp, #20]
 800b3d0:	e7c3      	b.n	800b35a <_vfiprintf_r+0x176>
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3da:	e7f0      	b.n	800b3be <_vfiprintf_r+0x1da>
 800b3dc:	ab03      	add	r3, sp, #12
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4b16      	ldr	r3, [pc, #88]	; (800b440 <_vfiprintf_r+0x25c>)
 800b3e6:	a904      	add	r1, sp, #16
 800b3e8:	f7fc f91c 	bl	8007624 <_printf_float>
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	1c78      	adds	r0, r7, #1
 800b3f0:	d1d6      	bne.n	800b3a0 <_vfiprintf_r+0x1bc>
 800b3f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f4:	07d9      	lsls	r1, r3, #31
 800b3f6:	d405      	bmi.n	800b404 <_vfiprintf_r+0x220>
 800b3f8:	89ab      	ldrh	r3, [r5, #12]
 800b3fa:	059a      	lsls	r2, r3, #22
 800b3fc:	d402      	bmi.n	800b404 <_vfiprintf_r+0x220>
 800b3fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b400:	f7ff fe7e 	bl	800b100 <__retarget_lock_release_recursive>
 800b404:	89ab      	ldrh	r3, [r5, #12]
 800b406:	065b      	lsls	r3, r3, #25
 800b408:	f53f af12 	bmi.w	800b230 <_vfiprintf_r+0x4c>
 800b40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b40e:	e711      	b.n	800b234 <_vfiprintf_r+0x50>
 800b410:	ab03      	add	r3, sp, #12
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	462a      	mov	r2, r5
 800b416:	4630      	mov	r0, r6
 800b418:	4b09      	ldr	r3, [pc, #36]	; (800b440 <_vfiprintf_r+0x25c>)
 800b41a:	a904      	add	r1, sp, #16
 800b41c:	f7fc fb9e 	bl	8007b5c <_printf_i>
 800b420:	e7e4      	b.n	800b3ec <_vfiprintf_r+0x208>
 800b422:	bf00      	nop
 800b424:	0800c0f4 	.word	0x0800c0f4
 800b428:	0800c114 	.word	0x0800c114
 800b42c:	0800c0d4 	.word	0x0800c0d4
 800b430:	0800c084 	.word	0x0800c084
 800b434:	0800c08a 	.word	0x0800c08a
 800b438:	0800c08e 	.word	0x0800c08e
 800b43c:	08007625 	.word	0x08007625
 800b440:	0800b1bf 	.word	0x0800b1bf

0800b444 <__swbuf_r>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	460e      	mov	r6, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	4605      	mov	r5, r0
 800b44c:	b118      	cbz	r0, 800b456 <__swbuf_r+0x12>
 800b44e:	6983      	ldr	r3, [r0, #24]
 800b450:	b90b      	cbnz	r3, 800b456 <__swbuf_r+0x12>
 800b452:	f000 f9d5 	bl	800b800 <__sinit>
 800b456:	4b21      	ldr	r3, [pc, #132]	; (800b4dc <__swbuf_r+0x98>)
 800b458:	429c      	cmp	r4, r3
 800b45a:	d12b      	bne.n	800b4b4 <__swbuf_r+0x70>
 800b45c:	686c      	ldr	r4, [r5, #4]
 800b45e:	69a3      	ldr	r3, [r4, #24]
 800b460:	60a3      	str	r3, [r4, #8]
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	071a      	lsls	r2, r3, #28
 800b466:	d52f      	bpl.n	800b4c8 <__swbuf_r+0x84>
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	b36b      	cbz	r3, 800b4c8 <__swbuf_r+0x84>
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	6820      	ldr	r0, [r4, #0]
 800b470:	b2f6      	uxtb	r6, r6
 800b472:	1ac0      	subs	r0, r0, r3
 800b474:	6963      	ldr	r3, [r4, #20]
 800b476:	4637      	mov	r7, r6
 800b478:	4283      	cmp	r3, r0
 800b47a:	dc04      	bgt.n	800b486 <__swbuf_r+0x42>
 800b47c:	4621      	mov	r1, r4
 800b47e:	4628      	mov	r0, r5
 800b480:	f000 f92a 	bl	800b6d8 <_fflush_r>
 800b484:	bb30      	cbnz	r0, 800b4d4 <__swbuf_r+0x90>
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	3001      	adds	r0, #1
 800b48a:	3b01      	subs	r3, #1
 800b48c:	60a3      	str	r3, [r4, #8]
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	1c5a      	adds	r2, r3, #1
 800b492:	6022      	str	r2, [r4, #0]
 800b494:	701e      	strb	r6, [r3, #0]
 800b496:	6963      	ldr	r3, [r4, #20]
 800b498:	4283      	cmp	r3, r0
 800b49a:	d004      	beq.n	800b4a6 <__swbuf_r+0x62>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	07db      	lsls	r3, r3, #31
 800b4a0:	d506      	bpl.n	800b4b0 <__swbuf_r+0x6c>
 800b4a2:	2e0a      	cmp	r6, #10
 800b4a4:	d104      	bne.n	800b4b0 <__swbuf_r+0x6c>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f000 f915 	bl	800b6d8 <_fflush_r>
 800b4ae:	b988      	cbnz	r0, 800b4d4 <__swbuf_r+0x90>
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <__swbuf_r+0x9c>)
 800b4b6:	429c      	cmp	r4, r3
 800b4b8:	d101      	bne.n	800b4be <__swbuf_r+0x7a>
 800b4ba:	68ac      	ldr	r4, [r5, #8]
 800b4bc:	e7cf      	b.n	800b45e <__swbuf_r+0x1a>
 800b4be:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <__swbuf_r+0xa0>)
 800b4c0:	429c      	cmp	r4, r3
 800b4c2:	bf08      	it	eq
 800b4c4:	68ec      	ldreq	r4, [r5, #12]
 800b4c6:	e7ca      	b.n	800b45e <__swbuf_r+0x1a>
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f000 f80c 	bl	800b4e8 <__swsetup_r>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d0cb      	beq.n	800b46c <__swbuf_r+0x28>
 800b4d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b4d8:	e7ea      	b.n	800b4b0 <__swbuf_r+0x6c>
 800b4da:	bf00      	nop
 800b4dc:	0800c0f4 	.word	0x0800c0f4
 800b4e0:	0800c114 	.word	0x0800c114
 800b4e4:	0800c0d4 	.word	0x0800c0d4

0800b4e8 <__swsetup_r>:
 800b4e8:	4b32      	ldr	r3, [pc, #200]	; (800b5b4 <__swsetup_r+0xcc>)
 800b4ea:	b570      	push	{r4, r5, r6, lr}
 800b4ec:	681d      	ldr	r5, [r3, #0]
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	b125      	cbz	r5, 800b4fe <__swsetup_r+0x16>
 800b4f4:	69ab      	ldr	r3, [r5, #24]
 800b4f6:	b913      	cbnz	r3, 800b4fe <__swsetup_r+0x16>
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f000 f981 	bl	800b800 <__sinit>
 800b4fe:	4b2e      	ldr	r3, [pc, #184]	; (800b5b8 <__swsetup_r+0xd0>)
 800b500:	429c      	cmp	r4, r3
 800b502:	d10f      	bne.n	800b524 <__swsetup_r+0x3c>
 800b504:	686c      	ldr	r4, [r5, #4]
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b50c:	0719      	lsls	r1, r3, #28
 800b50e:	d42c      	bmi.n	800b56a <__swsetup_r+0x82>
 800b510:	06dd      	lsls	r5, r3, #27
 800b512:	d411      	bmi.n	800b538 <__swsetup_r+0x50>
 800b514:	2309      	movs	r3, #9
 800b516:	6033      	str	r3, [r6, #0]
 800b518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	e03e      	b.n	800b5a2 <__swsetup_r+0xba>
 800b524:	4b25      	ldr	r3, [pc, #148]	; (800b5bc <__swsetup_r+0xd4>)
 800b526:	429c      	cmp	r4, r3
 800b528:	d101      	bne.n	800b52e <__swsetup_r+0x46>
 800b52a:	68ac      	ldr	r4, [r5, #8]
 800b52c:	e7eb      	b.n	800b506 <__swsetup_r+0x1e>
 800b52e:	4b24      	ldr	r3, [pc, #144]	; (800b5c0 <__swsetup_r+0xd8>)
 800b530:	429c      	cmp	r4, r3
 800b532:	bf08      	it	eq
 800b534:	68ec      	ldreq	r4, [r5, #12]
 800b536:	e7e6      	b.n	800b506 <__swsetup_r+0x1e>
 800b538:	0758      	lsls	r0, r3, #29
 800b53a:	d512      	bpl.n	800b562 <__swsetup_r+0x7a>
 800b53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53e:	b141      	cbz	r1, 800b552 <__swsetup_r+0x6a>
 800b540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b544:	4299      	cmp	r1, r3
 800b546:	d002      	beq.n	800b54e <__swsetup_r+0x66>
 800b548:	4630      	mov	r0, r6
 800b54a:	f7fb fef1 	bl	8007330 <_free_r>
 800b54e:	2300      	movs	r3, #0
 800b550:	6363      	str	r3, [r4, #52]	; 0x34
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b558:	81a3      	strh	r3, [r4, #12]
 800b55a:	2300      	movs	r3, #0
 800b55c:	6063      	str	r3, [r4, #4]
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	f043 0308 	orr.w	r3, r3, #8
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	b94b      	cbnz	r3, 800b582 <__swsetup_r+0x9a>
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d003      	beq.n	800b582 <__swsetup_r+0x9a>
 800b57a:	4621      	mov	r1, r4
 800b57c:	4630      	mov	r0, r6
 800b57e:	f000 fa01 	bl	800b984 <__smakebuf_r>
 800b582:	89a0      	ldrh	r0, [r4, #12]
 800b584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b588:	f010 0301 	ands.w	r3, r0, #1
 800b58c:	d00a      	beq.n	800b5a4 <__swsetup_r+0xbc>
 800b58e:	2300      	movs	r3, #0
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	6963      	ldr	r3, [r4, #20]
 800b594:	425b      	negs	r3, r3
 800b596:	61a3      	str	r3, [r4, #24]
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	b943      	cbnz	r3, 800b5ae <__swsetup_r+0xc6>
 800b59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5a0:	d1ba      	bne.n	800b518 <__swsetup_r+0x30>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	0781      	lsls	r1, r0, #30
 800b5a6:	bf58      	it	pl
 800b5a8:	6963      	ldrpl	r3, [r4, #20]
 800b5aa:	60a3      	str	r3, [r4, #8]
 800b5ac:	e7f4      	b.n	800b598 <__swsetup_r+0xb0>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	e7f7      	b.n	800b5a2 <__swsetup_r+0xba>
 800b5b2:	bf00      	nop
 800b5b4:	200001a8 	.word	0x200001a8
 800b5b8:	0800c0f4 	.word	0x0800c0f4
 800b5bc:	0800c114 	.word	0x0800c114
 800b5c0:	0800c0d4 	.word	0x0800c0d4

0800b5c4 <abort>:
 800b5c4:	2006      	movs	r0, #6
 800b5c6:	b508      	push	{r3, lr}
 800b5c8:	f000 fa4c 	bl	800ba64 <raise>
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f7f5 fe42 	bl	8001256 <_exit>
	...

0800b5d4 <__sflush_r>:
 800b5d4:	898a      	ldrh	r2, [r1, #12]
 800b5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d8:	4605      	mov	r5, r0
 800b5da:	0710      	lsls	r0, r2, #28
 800b5dc:	460c      	mov	r4, r1
 800b5de:	d457      	bmi.n	800b690 <__sflush_r+0xbc>
 800b5e0:	684b      	ldr	r3, [r1, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dc04      	bgt.n	800b5f0 <__sflush_r+0x1c>
 800b5e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc01      	bgt.n	800b5f0 <__sflush_r+0x1c>
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5f2:	2e00      	cmp	r6, #0
 800b5f4:	d0fa      	beq.n	800b5ec <__sflush_r+0x18>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5fc:	682f      	ldr	r7, [r5, #0]
 800b5fe:	602b      	str	r3, [r5, #0]
 800b600:	d032      	beq.n	800b668 <__sflush_r+0x94>
 800b602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	075a      	lsls	r2, r3, #29
 800b608:	d505      	bpl.n	800b616 <__sflush_r+0x42>
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b610:	b10b      	cbz	r3, 800b616 <__sflush_r+0x42>
 800b612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b614:	1ac0      	subs	r0, r0, r3
 800b616:	2300      	movs	r3, #0
 800b618:	4602      	mov	r2, r0
 800b61a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b61c:	4628      	mov	r0, r5
 800b61e:	6a21      	ldr	r1, [r4, #32]
 800b620:	47b0      	blx	r6
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	d106      	bne.n	800b636 <__sflush_r+0x62>
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	291d      	cmp	r1, #29
 800b62c:	d82c      	bhi.n	800b688 <__sflush_r+0xb4>
 800b62e:	4a29      	ldr	r2, [pc, #164]	; (800b6d4 <__sflush_r+0x100>)
 800b630:	40ca      	lsrs	r2, r1
 800b632:	07d6      	lsls	r6, r2, #31
 800b634:	d528      	bpl.n	800b688 <__sflush_r+0xb4>
 800b636:	2200      	movs	r2, #0
 800b638:	6062      	str	r2, [r4, #4]
 800b63a:	6922      	ldr	r2, [r4, #16]
 800b63c:	04d9      	lsls	r1, r3, #19
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	d504      	bpl.n	800b64c <__sflush_r+0x78>
 800b642:	1c42      	adds	r2, r0, #1
 800b644:	d101      	bne.n	800b64a <__sflush_r+0x76>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	b903      	cbnz	r3, 800b64c <__sflush_r+0x78>
 800b64a:	6560      	str	r0, [r4, #84]	; 0x54
 800b64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b64e:	602f      	str	r7, [r5, #0]
 800b650:	2900      	cmp	r1, #0
 800b652:	d0cb      	beq.n	800b5ec <__sflush_r+0x18>
 800b654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b658:	4299      	cmp	r1, r3
 800b65a:	d002      	beq.n	800b662 <__sflush_r+0x8e>
 800b65c:	4628      	mov	r0, r5
 800b65e:	f7fb fe67 	bl	8007330 <_free_r>
 800b662:	2000      	movs	r0, #0
 800b664:	6360      	str	r0, [r4, #52]	; 0x34
 800b666:	e7c2      	b.n	800b5ee <__sflush_r+0x1a>
 800b668:	6a21      	ldr	r1, [r4, #32]
 800b66a:	2301      	movs	r3, #1
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b0      	blx	r6
 800b670:	1c41      	adds	r1, r0, #1
 800b672:	d1c7      	bne.n	800b604 <__sflush_r+0x30>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0c4      	beq.n	800b604 <__sflush_r+0x30>
 800b67a:	2b1d      	cmp	r3, #29
 800b67c:	d001      	beq.n	800b682 <__sflush_r+0xae>
 800b67e:	2b16      	cmp	r3, #22
 800b680:	d101      	bne.n	800b686 <__sflush_r+0xb2>
 800b682:	602f      	str	r7, [r5, #0]
 800b684:	e7b2      	b.n	800b5ec <__sflush_r+0x18>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	e7ae      	b.n	800b5ee <__sflush_r+0x1a>
 800b690:	690f      	ldr	r7, [r1, #16]
 800b692:	2f00      	cmp	r7, #0
 800b694:	d0aa      	beq.n	800b5ec <__sflush_r+0x18>
 800b696:	0793      	lsls	r3, r2, #30
 800b698:	bf18      	it	ne
 800b69a:	2300      	movne	r3, #0
 800b69c:	680e      	ldr	r6, [r1, #0]
 800b69e:	bf08      	it	eq
 800b6a0:	694b      	ldreq	r3, [r1, #20]
 800b6a2:	1bf6      	subs	r6, r6, r7
 800b6a4:	600f      	str	r7, [r1, #0]
 800b6a6:	608b      	str	r3, [r1, #8]
 800b6a8:	2e00      	cmp	r6, #0
 800b6aa:	dd9f      	ble.n	800b5ec <__sflush_r+0x18>
 800b6ac:	4633      	mov	r3, r6
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	6a21      	ldr	r1, [r4, #32]
 800b6b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b6b8:	47e0      	blx	ip
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	dc06      	bgt.n	800b6cc <__sflush_r+0xf8>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	e790      	b.n	800b5ee <__sflush_r+0x1a>
 800b6cc:	4407      	add	r7, r0
 800b6ce:	1a36      	subs	r6, r6, r0
 800b6d0:	e7ea      	b.n	800b6a8 <__sflush_r+0xd4>
 800b6d2:	bf00      	nop
 800b6d4:	20400001 	.word	0x20400001

0800b6d8 <_fflush_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	690b      	ldr	r3, [r1, #16]
 800b6dc:	4605      	mov	r5, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	b913      	cbnz	r3, 800b6e8 <_fflush_r+0x10>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	b118      	cbz	r0, 800b6f2 <_fflush_r+0x1a>
 800b6ea:	6983      	ldr	r3, [r0, #24]
 800b6ec:	b90b      	cbnz	r3, 800b6f2 <_fflush_r+0x1a>
 800b6ee:	f000 f887 	bl	800b800 <__sinit>
 800b6f2:	4b14      	ldr	r3, [pc, #80]	; (800b744 <_fflush_r+0x6c>)
 800b6f4:	429c      	cmp	r4, r3
 800b6f6:	d11b      	bne.n	800b730 <_fflush_r+0x58>
 800b6f8:	686c      	ldr	r4, [r5, #4]
 800b6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0ef      	beq.n	800b6e2 <_fflush_r+0xa>
 800b702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b704:	07d0      	lsls	r0, r2, #31
 800b706:	d404      	bmi.n	800b712 <_fflush_r+0x3a>
 800b708:	0599      	lsls	r1, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_fflush_r+0x3a>
 800b70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70e:	f7ff fcf6 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800b712:	4628      	mov	r0, r5
 800b714:	4621      	mov	r1, r4
 800b716:	f7ff ff5d 	bl	800b5d4 <__sflush_r>
 800b71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b71c:	4605      	mov	r5, r0
 800b71e:	07da      	lsls	r2, r3, #31
 800b720:	d4e0      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	059b      	lsls	r3, r3, #22
 800b726:	d4dd      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72a:	f7ff fce9 	bl	800b100 <__retarget_lock_release_recursive>
 800b72e:	e7d9      	b.n	800b6e4 <_fflush_r+0xc>
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <_fflush_r+0x70>)
 800b732:	429c      	cmp	r4, r3
 800b734:	d101      	bne.n	800b73a <_fflush_r+0x62>
 800b736:	68ac      	ldr	r4, [r5, #8]
 800b738:	e7df      	b.n	800b6fa <_fflush_r+0x22>
 800b73a:	4b04      	ldr	r3, [pc, #16]	; (800b74c <_fflush_r+0x74>)
 800b73c:	429c      	cmp	r4, r3
 800b73e:	bf08      	it	eq
 800b740:	68ec      	ldreq	r4, [r5, #12]
 800b742:	e7da      	b.n	800b6fa <_fflush_r+0x22>
 800b744:	0800c0f4 	.word	0x0800c0f4
 800b748:	0800c114 	.word	0x0800c114
 800b74c:	0800c0d4 	.word	0x0800c0d4

0800b750 <std>:
 800b750:	2300      	movs	r3, #0
 800b752:	b510      	push	{r4, lr}
 800b754:	4604      	mov	r4, r0
 800b756:	e9c0 3300 	strd	r3, r3, [r0]
 800b75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b75e:	6083      	str	r3, [r0, #8]
 800b760:	8181      	strh	r1, [r0, #12]
 800b762:	6643      	str	r3, [r0, #100]	; 0x64
 800b764:	81c2      	strh	r2, [r0, #14]
 800b766:	6183      	str	r3, [r0, #24]
 800b768:	4619      	mov	r1, r3
 800b76a:	2208      	movs	r2, #8
 800b76c:	305c      	adds	r0, #92	; 0x5c
 800b76e:	f7fb fdd7 	bl	8007320 <memset>
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <std+0x38>)
 800b774:	6224      	str	r4, [r4, #32]
 800b776:	6263      	str	r3, [r4, #36]	; 0x24
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <std+0x3c>)
 800b77a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <std+0x40>)
 800b77e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b780:	4b04      	ldr	r3, [pc, #16]	; (800b794 <std+0x44>)
 800b782:	6323      	str	r3, [r4, #48]	; 0x30
 800b784:	bd10      	pop	{r4, pc}
 800b786:	bf00      	nop
 800b788:	0800ba9d 	.word	0x0800ba9d
 800b78c:	0800babf 	.word	0x0800babf
 800b790:	0800baf7 	.word	0x0800baf7
 800b794:	0800bb1b 	.word	0x0800bb1b

0800b798 <_cleanup_r>:
 800b798:	4901      	ldr	r1, [pc, #4]	; (800b7a0 <_cleanup_r+0x8>)
 800b79a:	f000 b8af 	b.w	800b8fc <_fwalk_reent>
 800b79e:	bf00      	nop
 800b7a0:	0800b6d9 	.word	0x0800b6d9

0800b7a4 <__sfmoreglue>:
 800b7a4:	2268      	movs	r2, #104	; 0x68
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	1e4d      	subs	r5, r1, #1
 800b7aa:	4355      	muls	r5, r2
 800b7ac:	460e      	mov	r6, r1
 800b7ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7b2:	f7fb fe25 	bl	8007400 <_malloc_r>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b140      	cbz	r0, 800b7cc <__sfmoreglue+0x28>
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	60a0      	str	r0, [r4, #8]
 800b7c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7c8:	f7fb fdaa 	bl	8007320 <memset>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__sfp_lock_acquire+0x8>)
 800b7d2:	f7ff bc94 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	20001681 	.word	0x20001681

0800b7dc <__sfp_lock_release>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__sfp_lock_release+0x8>)
 800b7de:	f7ff bc8f 	b.w	800b100 <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	20001681 	.word	0x20001681

0800b7e8 <__sinit_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sinit_lock_acquire+0x8>)
 800b7ea:	f7ff bc88 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20001682 	.word	0x20001682

0800b7f4 <__sinit_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sinit_lock_release+0x8>)
 800b7f6:	f7ff bc83 	b.w	800b100 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20001682 	.word	0x20001682

0800b800 <__sinit>:
 800b800:	b510      	push	{r4, lr}
 800b802:	4604      	mov	r4, r0
 800b804:	f7ff fff0 	bl	800b7e8 <__sinit_lock_acquire>
 800b808:	69a3      	ldr	r3, [r4, #24]
 800b80a:	b11b      	cbz	r3, 800b814 <__sinit+0x14>
 800b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b810:	f7ff bff0 	b.w	800b7f4 <__sinit_lock_release>
 800b814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b818:	6523      	str	r3, [r4, #80]	; 0x50
 800b81a:	4b13      	ldr	r3, [pc, #76]	; (800b868 <__sinit+0x68>)
 800b81c:	4a13      	ldr	r2, [pc, #76]	; (800b86c <__sinit+0x6c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	62a2      	str	r2, [r4, #40]	; 0x28
 800b822:	42a3      	cmp	r3, r4
 800b824:	bf08      	it	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	4620      	mov	r0, r4
 800b82a:	bf08      	it	eq
 800b82c:	61a3      	streq	r3, [r4, #24]
 800b82e:	f000 f81f 	bl	800b870 <__sfp>
 800b832:	6060      	str	r0, [r4, #4]
 800b834:	4620      	mov	r0, r4
 800b836:	f000 f81b 	bl	800b870 <__sfp>
 800b83a:	60a0      	str	r0, [r4, #8]
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 f817 	bl	800b870 <__sfp>
 800b842:	2200      	movs	r2, #0
 800b844:	2104      	movs	r1, #4
 800b846:	60e0      	str	r0, [r4, #12]
 800b848:	6860      	ldr	r0, [r4, #4]
 800b84a:	f7ff ff81 	bl	800b750 <std>
 800b84e:	2201      	movs	r2, #1
 800b850:	2109      	movs	r1, #9
 800b852:	68a0      	ldr	r0, [r4, #8]
 800b854:	f7ff ff7c 	bl	800b750 <std>
 800b858:	2202      	movs	r2, #2
 800b85a:	2112      	movs	r1, #18
 800b85c:	68e0      	ldr	r0, [r4, #12]
 800b85e:	f7ff ff77 	bl	800b750 <std>
 800b862:	2301      	movs	r3, #1
 800b864:	61a3      	str	r3, [r4, #24]
 800b866:	e7d1      	b.n	800b80c <__sinit+0xc>
 800b868:	0800bc8c 	.word	0x0800bc8c
 800b86c:	0800b799 	.word	0x0800b799

0800b870 <__sfp>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	4607      	mov	r7, r0
 800b874:	f7ff ffac 	bl	800b7d0 <__sfp_lock_acquire>
 800b878:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <__sfp+0x84>)
 800b87a:	681e      	ldr	r6, [r3, #0]
 800b87c:	69b3      	ldr	r3, [r6, #24]
 800b87e:	b913      	cbnz	r3, 800b886 <__sfp+0x16>
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff ffbd 	bl	800b800 <__sinit>
 800b886:	3648      	adds	r6, #72	; 0x48
 800b888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	d503      	bpl.n	800b898 <__sfp+0x28>
 800b890:	6833      	ldr	r3, [r6, #0]
 800b892:	b30b      	cbz	r3, 800b8d8 <__sfp+0x68>
 800b894:	6836      	ldr	r6, [r6, #0]
 800b896:	e7f7      	b.n	800b888 <__sfp+0x18>
 800b898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b89c:	b9d5      	cbnz	r5, 800b8d4 <__sfp+0x64>
 800b89e:	4b16      	ldr	r3, [pc, #88]	; (800b8f8 <__sfp+0x88>)
 800b8a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8a4:	60e3      	str	r3, [r4, #12]
 800b8a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a8:	f7ff fc28 	bl	800b0fc <__retarget_lock_init_recursive>
 800b8ac:	f7ff ff96 	bl	800b7dc <__sfp_lock_release>
 800b8b0:	2208      	movs	r2, #8
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8bc:	6025      	str	r5, [r4, #0]
 800b8be:	61a5      	str	r5, [r4, #24]
 800b8c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8c4:	f7fb fd2c 	bl	8007320 <memset>
 800b8c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d4:	3468      	adds	r4, #104	; 0x68
 800b8d6:	e7d9      	b.n	800b88c <__sfp+0x1c>
 800b8d8:	2104      	movs	r1, #4
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7ff ff62 	bl	800b7a4 <__sfmoreglue>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	6030      	str	r0, [r6, #0]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1d5      	bne.n	800b894 <__sfp+0x24>
 800b8e8:	f7ff ff78 	bl	800b7dc <__sfp_lock_release>
 800b8ec:	230c      	movs	r3, #12
 800b8ee:	603b      	str	r3, [r7, #0]
 800b8f0:	e7ee      	b.n	800b8d0 <__sfp+0x60>
 800b8f2:	bf00      	nop
 800b8f4:	0800bc8c 	.word	0x0800bc8c
 800b8f8:	ffff0001 	.word	0xffff0001

0800b8fc <_fwalk_reent>:
 800b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b900:	4606      	mov	r6, r0
 800b902:	4688      	mov	r8, r1
 800b904:	2700      	movs	r7, #0
 800b906:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b90a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b90e:	f1b9 0901 	subs.w	r9, r9, #1
 800b912:	d505      	bpl.n	800b920 <_fwalk_reent+0x24>
 800b914:	6824      	ldr	r4, [r4, #0]
 800b916:	2c00      	cmp	r4, #0
 800b918:	d1f7      	bne.n	800b90a <_fwalk_reent+0xe>
 800b91a:	4638      	mov	r0, r7
 800b91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b920:	89ab      	ldrh	r3, [r5, #12]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d907      	bls.n	800b936 <_fwalk_reent+0x3a>
 800b926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b92a:	3301      	adds	r3, #1
 800b92c:	d003      	beq.n	800b936 <_fwalk_reent+0x3a>
 800b92e:	4629      	mov	r1, r5
 800b930:	4630      	mov	r0, r6
 800b932:	47c0      	blx	r8
 800b934:	4307      	orrs	r7, r0
 800b936:	3568      	adds	r5, #104	; 0x68
 800b938:	e7e9      	b.n	800b90e <_fwalk_reent+0x12>

0800b93a <__swhatbuf_r>:
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	460e      	mov	r6, r1
 800b93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b942:	4614      	mov	r4, r2
 800b944:	2900      	cmp	r1, #0
 800b946:	461d      	mov	r5, r3
 800b948:	b096      	sub	sp, #88	; 0x58
 800b94a:	da08      	bge.n	800b95e <__swhatbuf_r+0x24>
 800b94c:	2200      	movs	r2, #0
 800b94e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b952:	602a      	str	r2, [r5, #0]
 800b954:	061a      	lsls	r2, r3, #24
 800b956:	d410      	bmi.n	800b97a <__swhatbuf_r+0x40>
 800b958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b95c:	e00e      	b.n	800b97c <__swhatbuf_r+0x42>
 800b95e:	466a      	mov	r2, sp
 800b960:	f000 f902 	bl	800bb68 <_fstat_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	dbf1      	blt.n	800b94c <__swhatbuf_r+0x12>
 800b968:	9a01      	ldr	r2, [sp, #4]
 800b96a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b96e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b972:	425a      	negs	r2, r3
 800b974:	415a      	adcs	r2, r3
 800b976:	602a      	str	r2, [r5, #0]
 800b978:	e7ee      	b.n	800b958 <__swhatbuf_r+0x1e>
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	2000      	movs	r0, #0
 800b97e:	6023      	str	r3, [r4, #0]
 800b980:	b016      	add	sp, #88	; 0x58
 800b982:	bd70      	pop	{r4, r5, r6, pc}

0800b984 <__smakebuf_r>:
 800b984:	898b      	ldrh	r3, [r1, #12]
 800b986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b988:	079d      	lsls	r5, r3, #30
 800b98a:	4606      	mov	r6, r0
 800b98c:	460c      	mov	r4, r1
 800b98e:	d507      	bpl.n	800b9a0 <__smakebuf_r+0x1c>
 800b990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	2301      	movs	r3, #1
 800b99a:	6163      	str	r3, [r4, #20]
 800b99c:	b002      	add	sp, #8
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
 800b9a0:	466a      	mov	r2, sp
 800b9a2:	ab01      	add	r3, sp, #4
 800b9a4:	f7ff ffc9 	bl	800b93a <__swhatbuf_r>
 800b9a8:	9900      	ldr	r1, [sp, #0]
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7fb fd27 	bl	8007400 <_malloc_r>
 800b9b2:	b948      	cbnz	r0, 800b9c8 <__smakebuf_r+0x44>
 800b9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b8:	059a      	lsls	r2, r3, #22
 800b9ba:	d4ef      	bmi.n	800b99c <__smakebuf_r+0x18>
 800b9bc:	f023 0303 	bic.w	r3, r3, #3
 800b9c0:	f043 0302 	orr.w	r3, r3, #2
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	e7e3      	b.n	800b990 <__smakebuf_r+0xc>
 800b9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ba00 <__smakebuf_r+0x7c>)
 800b9ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	6020      	str	r0, [r4, #0]
 800b9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	6120      	str	r0, [r4, #16]
 800b9da:	6163      	str	r3, [r4, #20]
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	b15b      	cbz	r3, 800b9f8 <__smakebuf_r+0x74>
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e6:	f000 f8d1 	bl	800bb8c <_isatty_r>
 800b9ea:	b128      	cbz	r0, 800b9f8 <__smakebuf_r+0x74>
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	f043 0301 	orr.w	r3, r3, #1
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	89a0      	ldrh	r0, [r4, #12]
 800b9fa:	4305      	orrs	r5, r0
 800b9fc:	81a5      	strh	r5, [r4, #12]
 800b9fe:	e7cd      	b.n	800b99c <__smakebuf_r+0x18>
 800ba00:	0800b799 	.word	0x0800b799

0800ba04 <_malloc_usable_size_r>:
 800ba04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba08:	1f18      	subs	r0, r3, #4
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bfbc      	itt	lt
 800ba0e:	580b      	ldrlt	r3, [r1, r0]
 800ba10:	18c0      	addlt	r0, r0, r3
 800ba12:	4770      	bx	lr

0800ba14 <_raise_r>:
 800ba14:	291f      	cmp	r1, #31
 800ba16:	b538      	push	{r3, r4, r5, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	d904      	bls.n	800ba28 <_raise_r+0x14>
 800ba1e:	2316      	movs	r3, #22
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba2a:	b112      	cbz	r2, 800ba32 <_raise_r+0x1e>
 800ba2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba30:	b94b      	cbnz	r3, 800ba46 <_raise_r+0x32>
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f830 	bl	800ba98 <_getpid_r>
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba42:	f000 b817 	b.w	800ba74 <_kill_r>
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d00a      	beq.n	800ba60 <_raise_r+0x4c>
 800ba4a:	1c59      	adds	r1, r3, #1
 800ba4c:	d103      	bne.n	800ba56 <_raise_r+0x42>
 800ba4e:	2316      	movs	r3, #22
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	2001      	movs	r0, #1
 800ba54:	e7e7      	b.n	800ba26 <_raise_r+0x12>
 800ba56:	2400      	movs	r4, #0
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba5e:	4798      	blx	r3
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7e0      	b.n	800ba26 <_raise_r+0x12>

0800ba64 <raise>:
 800ba64:	4b02      	ldr	r3, [pc, #8]	; (800ba70 <raise+0xc>)
 800ba66:	4601      	mov	r1, r0
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f7ff bfd3 	b.w	800ba14 <_raise_r>
 800ba6e:	bf00      	nop
 800ba70:	200001a8 	.word	0x200001a8

0800ba74 <_kill_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	2300      	movs	r3, #0
 800ba78:	4d06      	ldr	r5, [pc, #24]	; (800ba94 <_kill_r+0x20>)
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	4611      	mov	r1, r2
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	f7f5 fbd8 	bl	8001236 <_kill>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	d102      	bne.n	800ba90 <_kill_r+0x1c>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	b103      	cbz	r3, 800ba90 <_kill_r+0x1c>
 800ba8e:	6023      	str	r3, [r4, #0]
 800ba90:	bd38      	pop	{r3, r4, r5, pc}
 800ba92:	bf00      	nop
 800ba94:	2000167c 	.word	0x2000167c

0800ba98 <_getpid_r>:
 800ba98:	f7f5 bbc6 	b.w	8001228 <_getpid>

0800ba9c <__sread>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	460c      	mov	r4, r1
 800baa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa4:	f000 f894 	bl	800bbd0 <_read_r>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	bfab      	itete	ge
 800baac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800baae:	89a3      	ldrhlt	r3, [r4, #12]
 800bab0:	181b      	addge	r3, r3, r0
 800bab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bab6:	bfac      	ite	ge
 800bab8:	6563      	strge	r3, [r4, #84]	; 0x54
 800baba:	81a3      	strhlt	r3, [r4, #12]
 800babc:	bd10      	pop	{r4, pc}

0800babe <__swrite>:
 800babe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	461f      	mov	r7, r3
 800bac4:	898b      	ldrh	r3, [r1, #12]
 800bac6:	4605      	mov	r5, r0
 800bac8:	05db      	lsls	r3, r3, #23
 800baca:	460c      	mov	r4, r1
 800bacc:	4616      	mov	r6, r2
 800bace:	d505      	bpl.n	800badc <__swrite+0x1e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	2200      	movs	r2, #0
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	f000 f868 	bl	800bbac <_lseek_r>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	4632      	mov	r2, r6
 800bae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bae4:	81a3      	strh	r3, [r4, #12]
 800bae6:	4628      	mov	r0, r5
 800bae8:	463b      	mov	r3, r7
 800baea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf2:	f000 b817 	b.w	800bb24 <_write_r>

0800baf6 <__sseek>:
 800baf6:	b510      	push	{r4, lr}
 800baf8:	460c      	mov	r4, r1
 800bafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafe:	f000 f855 	bl	800bbac <_lseek_r>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	bf15      	itete	ne
 800bb08:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb12:	81a3      	strheq	r3, [r4, #12]
 800bb14:	bf18      	it	ne
 800bb16:	81a3      	strhne	r3, [r4, #12]
 800bb18:	bd10      	pop	{r4, pc}

0800bb1a <__sclose>:
 800bb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb1e:	f000 b813 	b.w	800bb48 <_close_r>
	...

0800bb24 <_write_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4d05      	ldr	r5, [pc, #20]	; (800bb44 <_write_r+0x20>)
 800bb30:	602a      	str	r2, [r5, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	f7f5 fbb6 	bl	80012a4 <_write>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_write_r+0x1e>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_write_r+0x1e>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	2000167c 	.word	0x2000167c

0800bb48 <_close_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4d05      	ldr	r5, [pc, #20]	; (800bb64 <_close_r+0x1c>)
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f5 fbc2 	bl	80012dc <_close>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_close_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_close_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	2000167c 	.word	0x2000167c

0800bb68 <_fstat_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4d06      	ldr	r5, [pc, #24]	; (800bb88 <_fstat_r+0x20>)
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	4611      	mov	r1, r2
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	f7f5 fbbc 	bl	80012f2 <_fstat>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d102      	bne.n	800bb84 <_fstat_r+0x1c>
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	b103      	cbz	r3, 800bb84 <_fstat_r+0x1c>
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	bd38      	pop	{r3, r4, r5, pc}
 800bb86:	bf00      	nop
 800bb88:	2000167c 	.word	0x2000167c

0800bb8c <_isatty_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4d05      	ldr	r5, [pc, #20]	; (800bba8 <_isatty_r+0x1c>)
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	f7f5 fbba 	bl	8001310 <_isatty>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_isatty_r+0x1a>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_isatty_r+0x1a>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	2000167c 	.word	0x2000167c

0800bbac <_lseek_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4d05      	ldr	r5, [pc, #20]	; (800bbcc <_lseek_r+0x20>)
 800bbb8:	602a      	str	r2, [r5, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f7f5 fbb2 	bl	8001324 <_lseek>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_lseek_r+0x1e>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_lseek_r+0x1e>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	2000167c 	.word	0x2000167c

0800bbd0 <_read_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4d05      	ldr	r5, [pc, #20]	; (800bbf0 <_read_r+0x20>)
 800bbdc:	602a      	str	r2, [r5, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f7f5 fb43 	bl	800126a <_read>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	d102      	bne.n	800bbee <_read_r+0x1e>
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	b103      	cbz	r3, 800bbee <_read_r+0x1e>
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	2000167c 	.word	0x2000167c

0800bbf4 <_init>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr

0800bc00 <_fini>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	bf00      	nop
 800bc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc06:	bc08      	pop	{r3}
 800bc08:	469e      	mov	lr, r3
 800bc0a:	4770      	bx	lr
